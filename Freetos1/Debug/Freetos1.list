
Freetos1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110a4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08011264  08011264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011358  08011358  00013080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011358  08011358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011360  08011360  00013080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011360  08011360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011364  08011364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08011368  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013080  2**0
                  CONTENTS
 10 .bss          000091b4  20000080  20000080  00013080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20009234  20009234  00013080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036304  00000000  00000000  000130b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000076a9  00000000  00000000  000493b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b30  00000000  00000000  00050a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002161  00000000  00000000  00053590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035def  00000000  00000000  000556f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000397d0  00000000  00000000  0008b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f8ec  00000000  00000000  000c4cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001e459c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bab0  00000000  00000000  001e45e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  001f0090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801124c 	.word	0x0801124c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	0801124c 	.word	0x0801124c

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b988 	b.w	8000528 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	468e      	mov	lr, r1
 8000238:	4604      	mov	r4, r0
 800023a:	4688      	mov	r8, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d962      	bls.n	800030c <__udivmoddi4+0xdc>
 8000246:	fab2 f682 	clz	r6, r2
 800024a:	b14e      	cbz	r6, 8000260 <__udivmoddi4+0x30>
 800024c:	f1c6 0320 	rsb	r3, r6, #32
 8000250:	fa01 f806 	lsl.w	r8, r1, r6
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	40b7      	lsls	r7, r6
 800025a:	ea43 0808 	orr.w	r8, r3, r8
 800025e:	40b4      	lsls	r4, r6
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f fc87 	uxth.w	ip, r7
 8000268:	fbb8 f1fe 	udiv	r1, r8, lr
 800026c:	0c23      	lsrs	r3, r4, #16
 800026e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000276:	fb01 f20c 	mul.w	r2, r1, ip
 800027a:	429a      	cmp	r2, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x62>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f101 30ff 	add.w	r0, r1, #4294967295
 8000284:	f080 80ea 	bcs.w	800045c <__udivmoddi4+0x22c>
 8000288:	429a      	cmp	r2, r3
 800028a:	f240 80e7 	bls.w	800045c <__udivmoddi4+0x22c>
 800028e:	3902      	subs	r1, #2
 8000290:	443b      	add	r3, r7
 8000292:	1a9a      	subs	r2, r3, r2
 8000294:	b2a3      	uxth	r3, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a6:	459c      	cmp	ip, r3
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0x8e>
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	f080 80d6 	bcs.w	8000460 <__udivmoddi4+0x230>
 80002b4:	459c      	cmp	ip, r3
 80002b6:	f240 80d3 	bls.w	8000460 <__udivmoddi4+0x230>
 80002ba:	443b      	add	r3, r7
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c2:	eba3 030c 	sub.w	r3, r3, ip
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40f3      	lsrs	r3, r6
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xb6>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb0>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa2>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x14c>
 80002ee:	4573      	cmp	r3, lr
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xc8>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 8105 	bhi.w	8000502 <__udivmoddi4+0x2d2>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4690      	mov	r8, r2
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e5      	beq.n	80002d2 <__udivmoddi4+0xa2>
 8000306:	e9c5 4800 	strd	r4, r8, [r5]
 800030a:	e7e2      	b.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	2a00      	cmp	r2, #0
 800030e:	f000 8090 	beq.w	8000432 <__udivmoddi4+0x202>
 8000312:	fab2 f682 	clz	r6, r2
 8000316:	2e00      	cmp	r6, #0
 8000318:	f040 80a4 	bne.w	8000464 <__udivmoddi4+0x234>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	0c03      	lsrs	r3, r0, #16
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	b280      	uxth	r0, r0
 8000326:	b2bc      	uxth	r4, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb2 fcfe 	udiv	ip, r2, lr
 800032e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000336:	fb04 f20c 	mul.w	r2, r4, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x11e>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x11c>
 8000346:	429a      	cmp	r2, r3
 8000348:	f200 80e0 	bhi.w	800050c <__udivmoddi4+0x2dc>
 800034c:	46c4      	mov	ip, r8
 800034e:	1a9b      	subs	r3, r3, r2
 8000350:	fbb3 f2fe 	udiv	r2, r3, lr
 8000354:	fb0e 3312 	mls	r3, lr, r2, r3
 8000358:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800035c:	fb02 f404 	mul.w	r4, r2, r4
 8000360:	429c      	cmp	r4, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x144>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f102 30ff 	add.w	r0, r2, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x142>
 800036c:	429c      	cmp	r4, r3
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2d6>
 8000372:	4602      	mov	r2, r0
 8000374:	1b1b      	subs	r3, r3, r4
 8000376:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x98>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa0e f401 	lsl.w	r4, lr, r1
 800038c:	fa20 f306 	lsr.w	r3, r0, r6
 8000390:	fa2e fe06 	lsr.w	lr, lr, r6
 8000394:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000398:	4323      	orrs	r3, r4
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	fa1f fc87 	uxth.w	ip, r7
 80003a2:	fbbe f0f9 	udiv	r0, lr, r9
 80003a6:	0c1c      	lsrs	r4, r3, #16
 80003a8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x1a0>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c2:	f080 809c 	bcs.w	80004fe <__udivmoddi4+0x2ce>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f240 8099 	bls.w	80004fe <__udivmoddi4+0x2ce>
 80003cc:	3802      	subs	r0, #2
 80003ce:	443c      	add	r4, r7
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	fa1f fe83 	uxth.w	lr, r3
 80003d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003dc:	fb09 4413 	mls	r4, r9, r3, r4
 80003e0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1ce>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f2:	f080 8082 	bcs.w	80004fa <__udivmoddi4+0x2ca>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d97f      	bls.n	80004fa <__udivmoddi4+0x2ca>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000402:	eba4 040c 	sub.w	r4, r4, ip
 8000406:	fba0 ec02 	umull	lr, ip, r0, r2
 800040a:	4564      	cmp	r4, ip
 800040c:	4673      	mov	r3, lr
 800040e:	46e1      	mov	r9, ip
 8000410:	d362      	bcc.n	80004d8 <__udivmoddi4+0x2a8>
 8000412:	d05f      	beq.n	80004d4 <__udivmoddi4+0x2a4>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x1fe>
 8000416:	ebb8 0203 	subs.w	r2, r8, r3
 800041a:	eb64 0409 	sbc.w	r4, r4, r9
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	fa22 f301 	lsr.w	r3, r2, r1
 8000426:	431e      	orrs	r6, r3
 8000428:	40cc      	lsrs	r4, r1
 800042a:	e9c5 6400 	strd	r6, r4, [r5]
 800042e:	2100      	movs	r1, #0
 8000430:	e74f      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000432:	fbb1 fcf2 	udiv	ip, r1, r2
 8000436:	0c01      	lsrs	r1, r0, #16
 8000438:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800043c:	b280      	uxth	r0, r0
 800043e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000442:	463b      	mov	r3, r7
 8000444:	4638      	mov	r0, r7
 8000446:	463c      	mov	r4, r7
 8000448:	46b8      	mov	r8, r7
 800044a:	46be      	mov	lr, r7
 800044c:	2620      	movs	r6, #32
 800044e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000452:	eba2 0208 	sub.w	r2, r2, r8
 8000456:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045a:	e766      	b.n	800032a <__udivmoddi4+0xfa>
 800045c:	4601      	mov	r1, r0
 800045e:	e718      	b.n	8000292 <__udivmoddi4+0x62>
 8000460:	4610      	mov	r0, r2
 8000462:	e72c      	b.n	80002be <__udivmoddi4+0x8e>
 8000464:	f1c6 0220 	rsb	r2, r6, #32
 8000468:	fa2e f302 	lsr.w	r3, lr, r2
 800046c:	40b7      	lsls	r7, r6
 800046e:	40b1      	lsls	r1, r6
 8000470:	fa20 f202 	lsr.w	r2, r0, r2
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	430a      	orrs	r2, r1
 800047a:	fbb3 f8fe 	udiv	r8, r3, lr
 800047e:	b2bc      	uxth	r4, r7
 8000480:	fb0e 3318 	mls	r3, lr, r8, r3
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb08 f904 	mul.w	r9, r8, r4
 800048e:	40b0      	lsls	r0, r6
 8000490:	4589      	cmp	r9, r1
 8000492:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000496:	b280      	uxth	r0, r0
 8000498:	d93e      	bls.n	8000518 <__udivmoddi4+0x2e8>
 800049a:	1879      	adds	r1, r7, r1
 800049c:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x276>
 80004a2:	4589      	cmp	r9, r1
 80004a4:	d81f      	bhi.n	80004e6 <__udivmoddi4+0x2b6>
 80004a6:	eba1 0109 	sub.w	r1, r1, r9
 80004aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ae:	fb09 f804 	mul.w	r8, r9, r4
 80004b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b6:	b292      	uxth	r2, r2
 80004b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004bc:	4542      	cmp	r2, r8
 80004be:	d229      	bcs.n	8000514 <__udivmoddi4+0x2e4>
 80004c0:	18ba      	adds	r2, r7, r2
 80004c2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c6:	d2c4      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004c8:	4542      	cmp	r2, r8
 80004ca:	d2c2      	bcs.n	8000452 <__udivmoddi4+0x222>
 80004cc:	f1a9 0102 	sub.w	r1, r9, #2
 80004d0:	443a      	add	r2, r7
 80004d2:	e7be      	b.n	8000452 <__udivmoddi4+0x222>
 80004d4:	45f0      	cmp	r8, lr
 80004d6:	d29d      	bcs.n	8000414 <__udivmoddi4+0x1e4>
 80004d8:	ebbe 0302 	subs.w	r3, lr, r2
 80004dc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e0:	3801      	subs	r0, #1
 80004e2:	46e1      	mov	r9, ip
 80004e4:	e796      	b.n	8000414 <__udivmoddi4+0x1e4>
 80004e6:	eba7 0909 	sub.w	r9, r7, r9
 80004ea:	4449      	add	r1, r9
 80004ec:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f4:	fb09 f804 	mul.w	r8, r9, r4
 80004f8:	e7db      	b.n	80004b2 <__udivmoddi4+0x282>
 80004fa:	4673      	mov	r3, lr
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1ce>
 80004fe:	4650      	mov	r0, sl
 8000500:	e766      	b.n	80003d0 <__udivmoddi4+0x1a0>
 8000502:	4608      	mov	r0, r1
 8000504:	e6fd      	b.n	8000302 <__udivmoddi4+0xd2>
 8000506:	443b      	add	r3, r7
 8000508:	3a02      	subs	r2, #2
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x144>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	443b      	add	r3, r7
 8000512:	e71c      	b.n	800034e <__udivmoddi4+0x11e>
 8000514:	4649      	mov	r1, r9
 8000516:	e79c      	b.n	8000452 <__udivmoddi4+0x222>
 8000518:	eba1 0109 	sub.w	r1, r1, r9
 800051c:	46c4      	mov	ip, r8
 800051e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000522:	fb09 f804 	mul.w	r8, r9, r4
 8000526:	e7c4      	b.n	80004b2 <__udivmoddi4+0x282>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000009c 	.word	0x2000009c
 8000590:	20000140 	.word	0x20000140

08000594 <Send_Message2>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Send_Message2(void)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOG, LED1_Pin);
 800059a:	2140      	movs	r1, #64	@ 0x40
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <Send_Message2+0x3c>)
 800059e:	f002 ffb6 	bl	800350e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOK, LED4_Pin);
 80005a2:	2108      	movs	r1, #8
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <Send_Message2+0x40>)
 80005a6:	f002 ffb2 	bl	800350e <HAL_GPIO_TogglePin>

	uint8_t message[] = "Task02_Message \r\n";
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <Send_Message2+0x44>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	682b      	ldr	r3, [r5, #0]
 80005b6:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, message, sizeof(message), 500);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005be:	2212      	movs	r2, #18
 80005c0:	4806      	ldr	r0, [pc, #24]	@ (80005dc <Send_Message2+0x48>)
 80005c2:	f008 fd7b 	bl	80090bc <HAL_UART_Transmit>

}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021800 	.word	0x40021800
 80005d4:	40022800 	.word	0x40022800
 80005d8:	08011264 	.word	0x08011264
 80005dc:	20000694 	.word	0x20000694

080005e0 <Send_MessageDefault>:

void Send_MessageDefault(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LED3_Pin|LED2_Pin);
 80005e6:	2130      	movs	r1, #48	@ 0x30
 80005e8:	480a      	ldr	r0, [pc, #40]	@ (8000614 <Send_MessageDefault+0x34>)
 80005ea:	f002 ff90 	bl	800350e <HAL_GPIO_TogglePin>


	{
		uint8_t message[] = "DefaultTask \r\n\r\n";
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <Send_MessageDefault+0x38>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	682b      	ldr	r3, [r5, #0]
 80005fa:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, message, sizeof(message), 500);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000602:	2211      	movs	r2, #17
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <Send_MessageDefault+0x3c>)
 8000606:	f008 fd59 	bl	80090bc <HAL_UART_Transmit>





}
 800060a:	bf00      	nop
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}
 8000612:	bf00      	nop
 8000614:	40020c00 	.word	0x40020c00
 8000618:	08011278 	.word	0x08011278
 800061c:	20000694 	.word	0x20000694

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b08e      	sub	sp, #56	@ 0x38
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f001 fbab 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f853 	bl	80006d4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800062e:	f000 f8c3 	bl	80007b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 fcad 	bl	8000f90 <MX_GPIO_Init>
  MX_CRC_Init();
 8000636:	f000 f8eb 	bl	8000810 <MX_CRC_Init>
  MX_DMA2D_Init();
 800063a:	f000 f8fd 	bl	8000838 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800063e:	f000 f92d 	bl	800089c <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000642:	f000 fc55 	bl	8000ef0 <MX_FMC_Init>
  MX_I2C1_Init();
 8000646:	f000 fa29 	bl	8000a9c <MX_I2C1_Init>
  MX_I2C2_Init();
 800064a:	f000 fa55 	bl	8000af8 <MX_I2C2_Init>
  MX_LTDC_Init();
 800064e:	f000 fa81 	bl	8000b54 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000652:	f000 fafd 	bl	8000c50 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000656:	f000 fb27 	bl	8000ca8 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 800065a:	f000 fb83 	bl	8000d64 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800065e:	f000 fba3 	bl	8000da8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000662:	f000 fbf1 	bl	8000e48 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000666:	f000 fc19 	bl	8000e9c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800066a:	f00b f86d 	bl	800b748 <MX_FATFS_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  MX_USB_HOST_Init();
 800066e:	f010 f931 	bl	80108d4 <MX_USB_HOST_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <main+0xa4>)
 8000674:	f107 041c 	add.w	r4, r7, #28
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f00d fe31 	bl	800e2f4 <osThreadCreate>
 8000692:	4603      	mov	r3, r0
 8000694:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <main+0xa8>)
 8000696:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityAboveNormal, 0, 128);
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <main+0xac>)
 800069a:	463c      	mov	r4, r7
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80006aa:	463b      	mov	r3, r7
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f00d fe20 	bl	800e2f4 <osThreadCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a06      	ldr	r2, [pc, #24]	@ (80006d0 <main+0xb0>)
 80006b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ba:	f00d fdf8 	bl	800e2ae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0x9e>
 80006c2:	bf00      	nop
 80006c4:	08011298 	.word	0x08011298
 80006c8:	20000758 	.word	0x20000758
 80006cc:	080112bc 	.word	0x080112bc
 80006d0:	2000075c 	.word	0x2000075c

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2234      	movs	r2, #52	@ 0x34
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f010 fcb8 	bl	8011058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <SystemClock_Config+0xdc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemClock_Config+0xdc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <SystemClock_Config+0xdc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <SystemClock_Config+0xe0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemClock_Config+0xe0>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <SystemClock_Config+0xe0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000738:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000742:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000748:	23b4      	movs	r3, #180	@ 0xb4
 800074a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000750:	2306      	movs	r3, #6
 8000752:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000754:	2306      	movs	r3, #6
 8000756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4618      	mov	r0, r3
 800075e:	f006 fa73 	bl	8006c48 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000768:	f000 fdc8 	bl	80012fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076c:	f005 fcca 	bl	8006104 <HAL_PWREx_EnableOverDrive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000776:	f000 fdc1 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2302      	movs	r3, #2
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000786:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000790:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2105      	movs	r1, #5
 8000798:	4618      	mov	r0, r3
 800079a:	f005 fdc5 	bl	8006328 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a4:	f000 fdaa 	bl	80012fc <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	@ 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b090      	sub	sp, #64	@ 0x40
 80007bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	223c      	movs	r2, #60	@ 0x3c
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f010 fc47 	bl	8011058 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 80007ca:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 80007ce:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 80007d0:	2390      	movs	r3, #144	@ 0x90
 80007d2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 80007dc:	2306      	movs	r3, #6
 80007de:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80007e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80007ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 ffe8 	bl	80067cc <HAL_RCCEx_PeriphCLKConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000802:	f000 fd7b 	bl	80012fc <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3740      	adds	r7, #64	@ 0x40
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_CRC_Init+0x20>)
 8000816:	4a07      	ldr	r2, [pc, #28]	@ (8000834 <MX_CRC_Init+0x24>)
 8000818:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_CRC_Init+0x20>)
 800081c:	f001 fbf8 	bl	8002010 <HAL_CRC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000826:	f000 fd69 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000340 	.word	0x20000340
 8000834:	40023000 	.word	0x40023000

08000838 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 800083e:	4a16      	ldr	r2, [pc, #88]	@ (8000898 <MX_DMA2D_Init+0x60>)
 8000840:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 8000862:	2200      	movs	r2, #0
 8000864:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 8000868:	2200      	movs	r2, #0
 800086a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800086c:	4809      	ldr	r0, [pc, #36]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 800086e:	f001 fc7d 	bl	800216c <HAL_DMA2D_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000878:	f000 fd40 	bl	80012fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800087c:	2101      	movs	r1, #1
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_DMA2D_Init+0x5c>)
 8000880:	f001 fdce 	bl	8002420 <HAL_DMA2D_ConfigLayer>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800088a:	f000 fd37 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000348 	.word	0x20000348
 8000898:	4002b000 	.word	0x4002b000

0800089c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0aa      	sub	sp, #168	@ 0xa8
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008ae:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80008b2:	2224      	movs	r2, #36	@ 0x24
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f010 fbce 	bl	8011058 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80008bc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80008ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d2:	2234      	movs	r2, #52	@ 0x34
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f010 fbbe 	bl	8011058 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80008dc:	463b      	mov	r3, r7
 80008de:	222c      	movs	r2, #44	@ 0x2c
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f010 fbb8 	bl	8011058 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80008e8:	4b6a      	ldr	r3, [pc, #424]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008ea:	4a6b      	ldr	r2, [pc, #428]	@ (8000a98 <MX_DSIHOST_DSI_Init+0x1fc>)
 80008ec:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80008ee:	4b69      	ldr	r3, [pc, #420]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80008f4:	4b67      	ldr	r3, [pc, #412]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80008fa:	4b66      	ldr	r3, [pc, #408]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000900:	237d      	movs	r3, #125	@ 0x7d
 8000902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000906:	2302      	movs	r3, #2
 8000908:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000912:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000916:	4619      	mov	r1, r3
 8000918:	485e      	ldr	r0, [pc, #376]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 800091a:	f001 fe13 	bl	8002544 <HAL_DSI_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000924:	f000 fcea 	bl	80012fc <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800095a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800095e:	4619      	mov	r1, r3
 8000960:	484c      	ldr	r0, [pc, #304]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000962:	f002 fb03 	bl	8002f6c <HAL_DSI_ConfigHostTimeouts>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800096c:	f000 fcc6 	bl	80012fc <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000970:	231c      	movs	r3, #28
 8000972:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000974:	2321      	movs	r3, #33	@ 0x21
 8000976:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000978:	230f      	movs	r3, #15
 800097a:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800097c:	2319      	movs	r3, #25
 800097e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000984:	230a      	movs	r3, #10
 8000986:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000988:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800098c:	4619      	mov	r1, r3
 800098e:	4841      	ldr	r0, [pc, #260]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000990:	f002 fa82 	bl	8002e98 <HAL_DSI_ConfigPhyTimer>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800099a:	f000 fcaf 	bl	80012fc <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800099e:	2104      	movs	r1, #4
 80009a0:	483c      	ldr	r0, [pc, #240]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009a2:	f002 fa51 	bl	8002e48 <HAL_DSI_ConfigFlowControl>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 80009ac:	f000 fca6 	bl	80012fc <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80009b0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80009b4:	4837      	ldr	r0, [pc, #220]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009b6:	f002 fb9f 	bl	80030f8 <HAL_DSI_SetLowPowerRXFilter>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80009c0:	f000 fc9c 	bl	80012fc <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4833      	ldr	r0, [pc, #204]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009c8:	f001 ff3c 	bl	8002844 <HAL_DSI_ConfigErrorMonitor>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80009d2:	f000 fc93 	bl	80012fc <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 80009d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80009dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 80009e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e6:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80009e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 80009ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80009f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f8:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 80009fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009fe:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000a06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a0c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000a10:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000a12:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000a16:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a26:	4619      	mov	r1, r3
 8000a28:	481a      	ldr	r0, [pc, #104]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a2a:	f002 f9af 	bl	8002d8c <HAL_DSI_ConfigCommand>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000a34:	f000 fc62 	bl	80012fc <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000a40:	23c8      	movs	r3, #200	@ 0xc8
 8000a42:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000a44:	2310      	movs	r3, #16
 8000a46:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000a5c:	2340      	movs	r3, #64	@ 0x40
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	480a      	ldr	r0, [pc, #40]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a6a:	f002 f8b7 	bl	8002bdc <HAL_DSI_ConfigAdaptedCommandMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000a74:	f000 fc42 	bl	80012fc <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4806      	ldr	r0, [pc, #24]	@ (8000a94 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a7c:	f002 f886 	bl	8002b8c <HAL_DSI_SetGenericVCID>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000a86:	f000 fc39 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	37a8      	adds	r7, #168	@ 0xa8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000388 	.word	0x20000388
 8000a98:	40016c00 	.word	0x40016c00

08000a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000aa2:	4a13      	ldr	r2, [pc, #76]	@ (8000af0 <MX_I2C1_Init+0x54>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000aa8:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <MX_I2C1_Init+0x58>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_I2C1_Init+0x50>)
 8000ada:	f004 fe67 	bl	80057ac <HAL_I2C_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 fc0a 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200003a4 	.word	0x200003a4
 8000af0:	40005400 	.word	0x40005400
 8000af4:	000186a0 	.word	0x000186a0

08000af8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	@ (8000b4c <MX_I2C2_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_I2C2_Init+0x58>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_I2C2_Init+0x50>)
 8000b36:	f004 fe39 	bl	80057ac <HAL_I2C_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 fbdc 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200003f8 	.word	0x200003f8
 8000b4c:	40005800 	.word	0x40005800
 8000b50:	000186a0 	.word	0x000186a0

08000b54 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	@ 0x38
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2234      	movs	r2, #52	@ 0x34
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f010 fa79 	bl	8011058 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b66:	4b38      	ldr	r3, [pc, #224]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b68:	4a38      	ldr	r2, [pc, #224]	@ (8000c4c <MX_LTDC_Init+0xf8>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b6c:	4b36      	ldr	r3, [pc, #216]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b72:	4b35      	ldr	r3, [pc, #212]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b78:	4b33      	ldr	r3, [pc, #204]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b7e:	4b32      	ldr	r3, [pc, #200]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000b84:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000b90:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000b96:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000b9e:	22c9      	movs	r2, #201	@ 0xc9
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000ba2:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000ba4:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000baa:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000bac:	22ca      	movs	r2, #202	@ 0xca
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000bb0:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000bb2:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bd0:	481d      	ldr	r0, [pc, #116]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000bd2:	f004 ff2f 	bl	8005a34 <HAL_LTDC_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 fb8e 	bl	80012fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000be4:	23c8      	movs	r3, #200	@ 0xc8
 8000be6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000bec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000bf0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bf6:	23ff      	movs	r3, #255	@ 0xff
 8000bf8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bfe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c02:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c04:	2307      	movs	r3, #7
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c08:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000c0e:	23c8      	movs	r3, #200	@ 0xc8
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000c12:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_LTDC_Init+0xf4>)
 8000c32:	f005 f891 	bl	8005d58 <HAL_LTDC_ConfigLayer>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000c3c:	f000 fb5e 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3738      	adds	r7, #56	@ 0x38
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000044c 	.word	0x2000044c
 8000c4c:	40016800 	.word	0x40016800

08000c50 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c56:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <MX_QUADSPI_Init+0x54>)
 8000c58:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c68:	2210      	movs	r2, #16
 8000c6a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c6e:	2218      	movs	r2, #24
 8000c70:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c78:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_QUADSPI_Init+0x50>)
 8000c8e:	f005 fa89 	bl	80061a4 <HAL_QSPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c98:	f000 fb30 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200004f4 	.word	0x200004f4
 8000ca4:	a0001000 	.word	0xa0001000

08000ca8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000cac:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cae:	4a2b      	ldr	r2, [pc, #172]	@ (8000d5c <MX_SAI1_Init+0xb4>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cb2:	4b29      	ldr	r3, [pc, #164]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000cbe:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cc0:	2240      	movs	r2, #64	@ 0x40
 8000cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000cc4:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cca:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d60 <MX_SAI1_Init+0xb8>)
 8000cf2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d0e:	2208      	movs	r2, #8
 8000d10:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_SAI1_Init+0xb0>)
 8000d44:	f006 fa04 	bl	8007150 <HAL_SAI_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000d4e:	f000 fad5 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000540 	.word	0x20000540
 8000d5c:	40015804 	.word	0x40015804
 8000d60:	0002ee00 	.word	0x0002ee00

08000d64 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <MX_SDIO_SD_Init+0x3c>)
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000da4 <MX_SDIO_SD_Init+0x40>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_SDIO_SD_Init+0x3c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <MX_SDIO_SD_Init+0x3c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_SDIO_SD_Init+0x3c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000d80:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <MX_SDIO_SD_Init+0x3c>)
 8000d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d86:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <MX_SDIO_SD_Init+0x3c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <MX_SDIO_SD_Init+0x3c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200005c8 	.word	0x200005c8
 8000da4:	40012c00 	.word	0x40012c00

08000da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e44 <MX_TIM1_Init+0x9c>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000dd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ddc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df0:	4813      	ldr	r0, [pc, #76]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000df2:	f007 fc9e 	bl	8008732 <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000dfc:	f000 fa7e 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000e0e:	f007 fe3f 	bl	8008a90 <HAL_TIM_ConfigClockSource>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e18:	f000 fa70 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_TIM1_Init+0x98>)
 8000e2a:	f008 f867 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e34:	f000 fa62 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	2000064c 	.word	0x2000064c
 8000e44:	40010000 	.word	0x40010000

08000e48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_USART3_UART_Init+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <MX_USART3_UART_Init+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_USART3_UART_Init+0x4c>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_USART3_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_USART3_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_USART3_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_USART3_UART_Init+0x4c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_USART3_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_USART3_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_USART3_UART_Init+0x4c>)
 8000e80:	f008 f8cc 	bl	800901c <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e8a:	f000 fa37 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000694 	.word	0x20000694
 8000e98:	40004800 	.word	0x40004800

08000e9c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <MX_USART6_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_USART6_UART_Init+0x4c>)
 8000ed4:	f008 f8a2 	bl	800901c <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f000 fa0d 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200006dc 	.word	0x200006dc
 8000eec:	40011400 	.word	0x40011400

08000ef0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f0a:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <MX_FMC_Init+0x9c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f22:	2220      	movs	r2, #32
 8000f24:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f28:	2240      	movs	r2, #64	@ 0x40
 8000f2a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f2e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000f32:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f40:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f54:	2307      	movs	r3, #7
 8000f56:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f60:	2303      	movs	r3, #3
 8000f62:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f72:	f007 fbaa 	bl	80086ca <HAL_SDRAM_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000f7c:	f000 f9be 	bl	80012fc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000724 	.word	0x20000724
 8000f8c:	a0000140 	.word	0xa0000140

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	@ 0x40
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000faa:	4bae      	ldr	r3, [pc, #696]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4aad      	ldr	r2, [pc, #692]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fb0:	f043 0310 	orr.w	r3, r3, #16
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4bab      	ldr	r3, [pc, #684]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc6:	4ba7      	ldr	r3, [pc, #668]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4aa6      	ldr	r2, [pc, #664]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4ba4      	ldr	r3, [pc, #656]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
 8000fe2:	4ba0      	ldr	r3, [pc, #640]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a9f      	ldr	r2, [pc, #636]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b9d      	ldr	r3, [pc, #628]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	4b99      	ldr	r3, [pc, #612]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a98      	ldr	r2, [pc, #608]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b96      	ldr	r3, [pc, #600]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	4b92      	ldr	r3, [pc, #584]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a91      	ldr	r2, [pc, #580]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b8f      	ldr	r3, [pc, #572]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	4b8b      	ldr	r3, [pc, #556]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a8a      	ldr	r2, [pc, #552]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b88      	ldr	r3, [pc, #544]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b84      	ldr	r3, [pc, #528]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a83      	ldr	r2, [pc, #524]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b81      	ldr	r3, [pc, #516]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b7d      	ldr	r3, [pc, #500]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a7c      	ldr	r2, [pc, #496]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b7a      	ldr	r3, [pc, #488]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b76      	ldr	r3, [pc, #472]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a75      	ldr	r2, [pc, #468]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b73      	ldr	r3, [pc, #460]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4b68      	ldr	r3, [pc, #416]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a67      	ldr	r2, [pc, #412]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b65      	ldr	r3, [pc, #404]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	210c      	movs	r1, #12
 80010de:	4862      	ldr	r0, [pc, #392]	@ (8001268 <MX_GPIO_Init+0x2d8>)
 80010e0:	f002 f9fc 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2130      	movs	r1, #48	@ 0x30
 80010e8:	4860      	ldr	r0, [pc, #384]	@ (800126c <MX_GPIO_Init+0x2dc>)
 80010ea:	f002 f9f7 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2108      	movs	r1, #8
 80010f2:	485f      	ldr	r0, [pc, #380]	@ (8001270 <MX_GPIO_Init+0x2e0>)
 80010f4:	f002 f9f2 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2140      	movs	r1, #64	@ 0x40
 80010fc:	485d      	ldr	r0, [pc, #372]	@ (8001274 <MX_GPIO_Init+0x2e4>)
 80010fe:	f002 f9ed 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2105      	movs	r1, #5
 8001106:	485c      	ldr	r0, [pc, #368]	@ (8001278 <MX_GPIO_Init+0x2e8>)
 8001108:	f002 f9e8 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2180      	movs	r1, #128	@ 0x80
 8001110:	485a      	ldr	r0, [pc, #360]	@ (800127c <MX_GPIO_Init+0x2ec>)
 8001112:	f002 f9e3 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2108      	movs	r1, #8
 800111a:	4859      	ldr	r0, [pc, #356]	@ (8001280 <MX_GPIO_Init+0x2f0>)
 800111c:	f002 f9de 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001120:	230c      	movs	r3, #12
 8001122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001134:	4619      	mov	r1, r3
 8001136:	484c      	ldr	r0, [pc, #304]	@ (8001268 <MX_GPIO_Init+0x2d8>)
 8001138:	f002 f80c 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 800113c:	2308      	movs	r3, #8
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800114c:	2306      	movs	r3, #6
 800114e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001154:	4619      	mov	r1, r3
 8001156:	4848      	ldr	r0, [pc, #288]	@ (8001278 <MX_GPIO_Init+0x2e8>)
 8001158:	f001 fffc 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001160:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001164:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116e:	4619      	mov	r1, r3
 8001170:	4841      	ldr	r0, [pc, #260]	@ (8001278 <MX_GPIO_Init+0x2e8>)
 8001172:	f001 ffef 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001176:	2330      	movs	r3, #48	@ 0x30
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800117a:	2311      	movs	r3, #17
 800117c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	4837      	ldr	r0, [pc, #220]	@ (800126c <MX_GPIO_Init+0x2dc>)
 800118e:	f001 ffe1 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001192:	2308      	movs	r3, #8
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001196:	2311      	movs	r3, #17
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	4831      	ldr	r0, [pc, #196]	@ (8001270 <MX_GPIO_Init+0x2e0>)
 80011aa:	f001 ffd3 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80011ae:	2340      	movs	r3, #64	@ 0x40
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011b2:	2311      	movs	r3, #17
 80011b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	482b      	ldr	r0, [pc, #172]	@ (8001274 <MX_GPIO_Init+0x2e4>)
 80011c6:	f001 ffc5 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80011ca:	2305      	movs	r3, #5
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011de:	4619      	mov	r1, r3
 80011e0:	4825      	ldr	r0, [pc, #148]	@ (8001278 <MX_GPIO_Init+0x2e8>)
 80011e2:	f001 ffb7 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80011e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011f8:	2302      	movs	r3, #2
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001200:	4619      	mov	r1, r3
 8001202:	481a      	ldr	r0, [pc, #104]	@ (800126c <MX_GPIO_Init+0x2dc>)
 8001204:	f001 ffa6 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001208:	2304      	movs	r3, #4
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001218:	4619      	mov	r1, r3
 800121a:	4816      	ldr	r0, [pc, #88]	@ (8001274 <MX_GPIO_Init+0x2e4>)
 800121c:	f001 ff9a 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001220:	2320      	movs	r3, #32
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001224:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001228:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001232:	4619      	mov	r1, r3
 8001234:	4813      	ldr	r0, [pc, #76]	@ (8001284 <MX_GPIO_Init+0x2f4>)
 8001236:	f001 ff8d 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800123a:	2380      	movs	r3, #128	@ 0x80
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800124a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800124e:	4619      	mov	r1, r3
 8001250:	480a      	ldr	r0, [pc, #40]	@ (800127c <MX_GPIO_Init+0x2ec>)
 8001252:	f001 ff7f 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001256:	2308      	movs	r3, #8
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	e012      	b.n	8001288 <MX_GPIO_Init+0x2f8>
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40021000 	.word	0x40021000
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40022800 	.word	0x40022800
 8001274:	40021800 	.word	0x40021800
 8001278:	40020400 	.word	0x40020400
 800127c:	40021c00 	.word	0x40021c00
 8001280:	40020000 	.word	0x40020000
 8001284:	40022400 	.word	0x40022400
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001292:	4619      	mov	r1, r3
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <MX_GPIO_Init+0x314>)
 8001296:	f001 ff5d 	bl	8003154 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800129a:	bf00      	nop
 800129c:	3740      	adds	r7, #64	@ 0x40
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020000 	.word	0x40020000

080012a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */

  for(;;)
  {
	Send_MessageDefault();
 80012b0:	f7ff f996 	bl	80005e0 <Send_MessageDefault>
    osDelay(1000);
 80012b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b8:	f00d f868 	bl	800e38c <osDelay>
	Send_MessageDefault();
 80012bc:	bf00      	nop
 80012be:	e7f7      	b.n	80012b0 <StartDefaultTask+0x8>

080012c0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

  for(;;)
  {
	Send_Message2();
 80012c8:	f7ff f964 	bl	8000594 <Send_Message2>
    osDelay(1000);
 80012cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012d0:	f00d f85c 	bl	800e38c <osDelay>
	Send_Message2();
 80012d4:	bf00      	nop
 80012d6:	e7f7      	b.n	80012c8 <StartTask02+0x8>

080012d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a04      	ldr	r2, [pc, #16]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80012ea:	f000 fd6b 	bl	8001dc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40001000 	.word	0x40001000

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_MspInit+0x54>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	4a11      	ldr	r2, [pc, #68]	@ (800135c <HAL_MspInit+0x54>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131c:	6453      	str	r3, [r2, #68]	@ 0x44
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_MspInit+0x54>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_MspInit+0x54>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <HAL_MspInit+0x54>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <HAL_MspInit+0x54>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	210f      	movs	r1, #15
 800134a:	f06f 0001 	mvn.w	r0, #1
 800134e:	f000 fe35 	bl	8001fbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0b      	ldr	r2, [pc, #44]	@ (800139c <HAL_CRC_MspInit+0x3c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10d      	bne.n	800138e <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_CRC_MspInit+0x40>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <HAL_CRC_MspInit+0x40>)
 800137c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <HAL_CRC_MspInit+0x40>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023000 	.word	0x40023000
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	@ (80013ec <HAL_DMA2D_MspInit+0x48>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d115      	bne.n	80013e2 <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_DMA2D_MspInit+0x4c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <HAL_DMA2D_MspInit+0x4c>)
 80013c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_DMA2D_MspInit+0x4c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	205a      	movs	r0, #90	@ 0x5a
 80013d8:	f000 fdf0 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013dc:	205a      	movs	r0, #90	@ 0x5a
 80013de:	f000 fe09 	bl	8001ff4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	4002b000 	.word	0x4002b000
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <HAL_DSI_MspInit+0x94>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d133      	bne.n	800147e <HAL_DSI_MspInit+0x8a>
  {
    /* USER CODE BEGIN DSI_MspInit 0 */

    /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <HAL_DSI_MspInit+0x98>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a1b      	ldr	r2, [pc, #108]	@ (800148c <HAL_DSI_MspInit+0x98>)
 8001420:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b19      	ldr	r3, [pc, #100]	@ (800148c <HAL_DSI_MspInit+0x98>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_DSI_MspInit+0x98>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <HAL_DSI_MspInit+0x98>)
 800143c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_DSI_MspInit+0x98>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 800144e:	2304      	movs	r3, #4
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800145e:	230d      	movs	r3, #13
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4809      	ldr	r0, [pc, #36]	@ (8001490 <HAL_DSI_MspInit+0x9c>)
 800146a:	f001 fe73 	bl	8003154 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	205c      	movs	r0, #92	@ 0x5c
 8001474:	f000 fda2 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001478:	205c      	movs	r0, #92	@ 0x5c
 800147a:	f000 fdbb 	bl	8001ff4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	@ 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40016c00 	.word	0x40016c00
 800148c:	40023800 	.word	0x40023800
 8001490:	40022400 	.word	0x40022400

08001494 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	@ 0x30
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a32      	ldr	r2, [pc, #200]	@ (800157c <HAL_I2C_MspInit+0xe8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12d      	bne.n	8001512 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a30      	ldr	r2, [pc, #192]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80014d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014dc:	2301      	movs	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e4:	2304      	movs	r3, #4
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4825      	ldr	r0, [pc, #148]	@ (8001584 <HAL_I2C_MspInit+0xf0>)
 80014f0:	f001 fe30 	bl	8003154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a20      	ldr	r2, [pc, #128]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 80014fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001510:	e030      	b.n	8001574 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <HAL_I2C_MspInit+0xf4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d12b      	bne.n	8001574 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001524:	4a16      	ldr	r2, [pc, #88]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 8001526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800152a:	6313      	str	r3, [r2, #48]	@ 0x30
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001538:	2330      	movs	r3, #48	@ 0x30
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153c:	2312      	movs	r3, #18
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001540:	2301      	movs	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001548:	2304      	movs	r3, #4
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	480e      	ldr	r0, [pc, #56]	@ (800158c <HAL_I2C_MspInit+0xf8>)
 8001554:	f001 fdfe 	bl	8003154 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 8001562:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001566:	6413      	str	r3, [r2, #64]	@ 0x40
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <HAL_I2C_MspInit+0xec>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	@ 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40005400 	.word	0x40005400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400
 8001588:	40005800 	.word	0x40005800
 800158c:	40021c00 	.word	0x40021c00

08001590 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <HAL_LTDC_MspInit+0x48>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d115      	bne.n	80015ce <HAL_LTDC_MspInit+0x3e>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <HAL_LTDC_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <HAL_LTDC_MspInit+0x4c>)
 80015ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_LTDC_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2105      	movs	r1, #5
 80015c2:	2058      	movs	r0, #88	@ 0x58
 80015c4:	f000 fcfa 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015c8:	2058      	movs	r0, #88	@ 0x58
 80015ca:	f000 fd13 	bl	8001ff4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40016800 	.word	0x40016800
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a31      	ldr	r2, [pc, #196]	@ (80016c4 <HAL_QSPI_MspInit+0xe4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d15b      	bne.n	80016ba <HAL_QSPI_MspInit+0xda>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b30      	ldr	r3, [pc, #192]	@ (80016c8 <HAL_QSPI_MspInit+0xe8>)
 8001608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160a:	4a2f      	ldr	r2, [pc, #188]	@ (80016c8 <HAL_QSPI_MspInit+0xe8>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6393      	str	r3, [r2, #56]	@ 0x38
 8001612:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <HAL_QSPI_MspInit+0xe8>)
 8001614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <HAL_QSPI_MspInit+0xe8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a28      	ldr	r2, [pc, #160]	@ (80016c8 <HAL_QSPI_MspInit+0xe8>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <HAL_QSPI_MspInit+0xe8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <HAL_QSPI_MspInit+0xe8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a21      	ldr	r2, [pc, #132]	@ (80016c8 <HAL_QSPI_MspInit+0xe8>)
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <HAL_QSPI_MspInit+0xe8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001656:	2340      	movs	r3, #64	@ 0x40
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001666:	230a      	movs	r3, #10
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4816      	ldr	r0, [pc, #88]	@ (80016cc <HAL_QSPI_MspInit+0xec>)
 8001672:	f001 fd6f 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8001676:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001688:	2309      	movs	r3, #9
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480f      	ldr	r0, [pc, #60]	@ (80016d0 <HAL_QSPI_MspInit+0xf0>)
 8001694:	f001 fd5e 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001698:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80016aa:	230a      	movs	r3, #10
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4806      	ldr	r0, [pc, #24]	@ (80016d0 <HAL_QSPI_MspInit+0xf0>)
 80016b6:	f001 fd4d 	bl	8003154 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	@ 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	a0001000 	.word	0xa0001000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40021400 	.word	0x40021400

080016d4 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a28      	ldr	r2, [pc, #160]	@ (8001794 <HAL_SD_MspInit+0xc0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d14a      	bne.n	800178c <HAL_SD_MspInit+0xb8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <HAL_SD_MspInit+0xc4>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	4a26      	ldr	r2, [pc, #152]	@ (8001798 <HAL_SD_MspInit+0xc4>)
 8001700:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001704:	6453      	str	r3, [r2, #68]	@ 0x44
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <HAL_SD_MspInit+0xc4>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_SD_MspInit+0xc4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a1f      	ldr	r2, [pc, #124]	@ (8001798 <HAL_SD_MspInit+0xc4>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <HAL_SD_MspInit+0xc4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_SD_MspInit+0xc4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <HAL_SD_MspInit+0xc4>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <HAL_SD_MspInit+0xc4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 800174a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800174e:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800175c:	230c      	movs	r3, #12
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <HAL_SD_MspInit+0xc8>)
 8001768:	f001 fcf4 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800176c:	2304      	movs	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800177c:	230c      	movs	r3, #12
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	@ (80017a0 <HAL_SD_MspInit+0xcc>)
 8001788:	f001 fce4 	bl	8003154 <HAL_GPIO_Init>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	@ 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40012c00 	.word	0x40012c00
 8001798:	40023800 	.word	0x40023800
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020c00 	.word	0x40020c00

080017a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	@ (80017e0 <HAL_TIM_Base_MspInit+0x3c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d10d      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_TIM_Base_MspInit+0x40>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	4a09      	ldr	r2, [pc, #36]	@ (80017e4 <HAL_TIM_Base_MspInit+0x40>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c6:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <HAL_TIM_Base_MspInit+0x40>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40010000 	.word	0x40010000
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	@ 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a33      	ldr	r2, [pc, #204]	@ (80018d4 <HAL_UART_MspInit+0xec>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d12d      	bne.n	8001866 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	4b32      	ldr	r3, [pc, #200]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a31      	ldr	r2, [pc, #196]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 8001814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a2a      	ldr	r2, [pc, #168]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001842:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184c:	2301      	movs	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001854:	2307      	movs	r3, #7
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	481f      	ldr	r0, [pc, #124]	@ (80018dc <HAL_UART_MspInit+0xf4>)
 8001860:	f001 fc78 	bl	8003154 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001864:	e031      	b.n	80018ca <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a1d      	ldr	r2, [pc, #116]	@ (80018e0 <HAL_UART_MspInit+0xf8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d12c      	bne.n	80018ca <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 8001876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001878:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 800187a:	f043 0320 	orr.w	r3, r3, #32
 800187e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 8001882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 8001896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800189a:	6313      	str	r3, [r2, #48]	@ 0x30
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_UART_MspInit+0xf0>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 80018a8:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018ba:	2308      	movs	r3, #8
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <HAL_UART_MspInit+0xfc>)
 80018c6:	f001 fc45 	bl	8003154 <HAL_GPIO_Init>
}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	@ 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40004800 	.word	0x40004800
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40011400 	.word	0x40011400
 80018e4:	40021800 	.word	0x40021800

080018e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80018fc:	4b44      	ldr	r3, [pc, #272]	@ (8001a10 <HAL_FMC_MspInit+0x128>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f040 8081 	bne.w	8001a08 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001906:	4b42      	ldr	r3, [pc, #264]	@ (8001a10 <HAL_FMC_MspInit+0x128>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4b40      	ldr	r3, [pc, #256]	@ (8001a14 <HAL_FMC_MspInit+0x12c>)
 8001912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001914:	4a3f      	ldr	r2, [pc, #252]	@ (8001a14 <HAL_FMC_MspInit+0x12c>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6393      	str	r3, [r2, #56]	@ 0x38
 800191c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a14 <HAL_FMC_MspInit+0x12c>)
 800191e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001928:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800192c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800193a:	230c      	movs	r3, #12
 800193c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4835      	ldr	r0, [pc, #212]	@ (8001a18 <HAL_FMC_MspInit+0x130>)
 8001944:	f001 fc06 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001948:	f248 1333 	movw	r3, #33075	@ 0x8133
 800194c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800195a:	230c      	movs	r3, #12
 800195c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	482e      	ldr	r0, [pc, #184]	@ (8001a1c <HAL_FMC_MspInit+0x134>)
 8001964:	f001 fbf6 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001968:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800196c:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800197a:	230c      	movs	r3, #12
 800197c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4619      	mov	r1, r3
 8001982:	4827      	ldr	r0, [pc, #156]	@ (8001a20 <HAL_FMC_MspInit+0x138>)
 8001984:	f001 fbe6 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001988:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 800198c:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800199a:	230c      	movs	r3, #12
 800199c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4820      	ldr	r0, [pc, #128]	@ (8001a24 <HAL_FMC_MspInit+0x13c>)
 80019a4:	f001 fbd6 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80019a8:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80019ac:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ba:	230c      	movs	r3, #12
 80019bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <HAL_FMC_MspInit+0x140>)
 80019c4:	f001 fbc6 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 80019c8:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 80019cc:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019da:	230c      	movs	r3, #12
 80019dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	4812      	ldr	r0, [pc, #72]	@ (8001a2c <HAL_FMC_MspInit+0x144>)
 80019e4:	f001 fbb6 	bl	8003154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80019e8:	2301      	movs	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019f8:	230c      	movs	r3, #12
 80019fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	480b      	ldr	r0, [pc, #44]	@ (8001a30 <HAL_FMC_MspInit+0x148>)
 8001a02:	f001 fba7 	bl	8003154 <HAL_GPIO_Init>
 8001a06:	e000      	b.n	8001a0a <HAL_FMC_MspInit+0x122>
    return;
 8001a08:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000760 	.word	0x20000760
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40021800 	.word	0x40021800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021400 	.word	0x40021400
 8001a2c:	40021c00 	.word	0x40021c00
 8001a30:	40020800 	.word	0x40020800

08001a34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a3c:	f7ff ff54 	bl	80018e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a26      	ldr	r2, [pc, #152]	@ (8001af0 <HAL_SAI_MspInit+0xa8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d146      	bne.n	8001ae8 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <HAL_SAI_MspInit+0xac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_SAI_MspInit+0xb0>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	4a23      	ldr	r2, [pc, #140]	@ (8001af8 <HAL_SAI_MspInit+0xb0>)
 8001a6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a72:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <HAL_SAI_MspInit+0xb0>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_SAI_MspInit+0xac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a1b      	ldr	r2, [pc, #108]	@ (8001af4 <HAL_SAI_MspInit+0xac>)
 8001a86:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001a88:	2330      	movs	r3, #48	@ 0x30
 8001a8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001a98:	2306      	movs	r3, #6
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4816      	ldr	r0, [pc, #88]	@ (8001afc <HAL_SAI_MspInit+0xb4>)
 8001aa4:	f001 fb56 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001aa8:	2340      	movs	r3, #64	@ 0x40
 8001aaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ab8:	2306      	movs	r3, #6
 8001aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480f      	ldr	r0, [pc, #60]	@ (8001b00 <HAL_SAI_MspInit+0xb8>)
 8001ac4:	f001 fb46 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ad8:	2306      	movs	r3, #6
 8001ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4808      	ldr	r0, [pc, #32]	@ (8001b04 <HAL_SAI_MspInit+0xbc>)
 8001ae4:	f001 fb36 	bl	8003154 <HAL_GPIO_Init>

    }
}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40015804 	.word	0x40015804
 8001af4:	20000764 	.word	0x20000764
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021800 	.word	0x40021800

08001b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08e      	sub	sp, #56	@ 0x38
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <HAL_InitTick+0xe4>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	4a32      	ldr	r2, [pc, #200]	@ (8001bec <HAL_InitTick+0xe4>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b28:	4b30      	ldr	r3, [pc, #192]	@ (8001bec <HAL_InitTick+0xe4>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b34:	f107 0210 	add.w	r2, r7, #16
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fe12 	bl	8006768 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b4e:	f004 fde3 	bl	8006718 <HAL_RCC_GetPCLK1Freq>
 8001b52:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b54:	e004      	b.n	8001b60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b56:	f004 fddf 	bl	8006718 <HAL_RCC_GetPCLK1Freq>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b62:	4a23      	ldr	r2, [pc, #140]	@ (8001bf0 <HAL_InitTick+0xe8>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	0c9b      	lsrs	r3, r3, #18
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <HAL_InitTick+0xec>)
 8001b70:	4a21      	ldr	r2, [pc, #132]	@ (8001bf8 <HAL_InitTick+0xf0>)
 8001b72:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <HAL_InitTick+0xec>)
 8001b76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf4 <HAL_InitTick+0xec>)
 8001b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <HAL_InitTick+0xec>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_InitTick+0xec>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8e:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_InitTick+0xec>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001b94:	4817      	ldr	r0, [pc, #92]	@ (8001bf4 <HAL_InitTick+0xec>)
 8001b96:	f006 fdcc 	bl	8008732 <HAL_TIM_Base_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d11b      	bne.n	8001be0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ba8:	4812      	ldr	r0, [pc, #72]	@ (8001bf4 <HAL_InitTick+0xec>)
 8001baa:	f006 fe11 	bl	80087d0 <HAL_TIM_Base_Start_IT>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d111      	bne.n	8001be0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bbc:	2036      	movs	r0, #54	@ 0x36
 8001bbe:	f000 fa19 	bl	8001ff4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d808      	bhi.n	8001bda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	2036      	movs	r0, #54	@ 0x36
 8001bce:	f000 f9f5 	bl	8001fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_InitTick+0xf4>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e002      	b.n	8001be0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3738      	adds	r7, #56	@ 0x38
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	431bde83 	.word	0x431bde83
 8001bf4:	20000768 	.word	0x20000768
 8001bf8:	40001000 	.word	0x40001000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <NMI_Handler+0x4>

08001c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <MemManage_Handler+0x4>

08001c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <TIM6_DAC_IRQHandler+0x10>)
 8001c3e:	f006 fe37 	bl	80088b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000768 	.word	0x20000768

08001c4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <OTG_FS_IRQHandler+0x10>)
 8001c52:	f001 ff57 	bl	8003b04 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20008d0c 	.word	0x20008d0c

08001c60 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <LTDC_IRQHandler+0x10>)
 8001c66:	f003 ffb5 	bl	8005bd4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000044c 	.word	0x2000044c

08001c74 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <DMA2D_IRQHandler+0x10>)
 8001c7a:	f000 fac0 	bl	80021fe <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000348 	.word	0x20000348

08001c88 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001c8c:	4802      	ldr	r0, [pc, #8]	@ (8001c98 <DSI_IRQHandler+0x10>)
 8001c8e:	f000 fe96 	bl	80029be <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000388 	.word	0x20000388

08001c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <_sbrk+0x5c>)
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <_sbrk+0x60>)
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <_sbrk+0x64>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <_sbrk+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d207      	bcs.n	8001cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ccc:	f00f fa3a 	bl	8011144 <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e009      	b.n	8001cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <_sbrk+0x64>)
 8001cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20050000 	.word	0x20050000
 8001cfc:	00000400 	.word	0x00000400
 8001d00:	200007b0 	.word	0x200007b0
 8001d04:	20009238 	.word	0x20009238

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <SystemInit+0x20>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d12:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <SystemInit+0x20>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d30:	f7ff ffea 	bl	8001d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	@ (8001d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f00f f9f9 	bl	8011150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7fe fc5f 	bl	8000620 <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001d70:	08011368 	.word	0x08011368
  ldr r2, =_sbss
 8001d74:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001d78:	20009234 	.word	0x20009234

08001d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <HAL_Init+0x40>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <HAL_Init+0x40>)
 8001d96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	@ (8001dc0 <HAL_Init+0x40>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f8fc 	bl	8001fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff feaa 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff faa8 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_IncTick+0x20>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_IncTick+0x24>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <HAL_IncTick+0x24>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008
 8001de8:	200007b4 	.word	0x200007b4

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	@ (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200007b4 	.word	0x200007b4

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff ffee 	bl	8001dec <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d005      	beq.n	8001e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_Delay+0x44>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e2a:	bf00      	nop
 8001e2c:	f7ff ffde 	bl	8001dec <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8f7      	bhi.n	8001e2c <HAL_Delay+0x28>
  {
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	@ (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ff4c 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fce:	f7ff ff61 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8001fd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f7ff ffb1 	bl	8001f40 <NVIC_EncodePriority>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff80 	bl	8001eec <__NVIC_SetPriority>
}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff54 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e00e      	b.n	8002040 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	795b      	ldrb	r3, [r3, #5]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff f994 	bl	8001360 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_DMA_Start_IT+0x26>
 800206a:	2302      	movs	r3, #2
 800206c:	e040      	b.n	80020f0 <HAL_DMA_Start_IT+0xa8>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d12f      	bne.n	80020e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2202      	movs	r2, #2
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f83a 	bl	8002110 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a0:	223f      	movs	r2, #63	@ 0x3f
 80020a2:	409a      	lsls	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0216 	orr.w	r2, r2, #22
 80020b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0208 	orr.w	r2, r2, #8
 80020ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e005      	b.n	80020ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800212c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b40      	cmp	r3, #64	@ 0x40
 800213c:	d108      	bne.n	8002150 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800214e:	e007      	b.n	8002160 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e03b      	b.n	80021f6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff f906 	bl	80013a4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021bc:	f023 0107 	bic.w	r1, r3, #7
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68d1      	ldr	r1, [r2, #12]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	430b      	orrs	r3, r1
 80021e4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d026      	beq.n	800226e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d021      	beq.n	800226e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002238:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2204      	movs	r2, #4
 8002252:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d026      	beq.n	80022c6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d021      	beq.n	80022c6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002290:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2220      	movs	r2, #32
 8002298:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229e:	f043 0202 	orr.w	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2204      	movs	r2, #4
 80022aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d026      	beq.n	800231e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d021      	beq.n	800231e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022e8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2208      	movs	r2, #8
 80022f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f6:	f043 0204 	orr.w	r2, r3, #4
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2204      	movs	r2, #4
 8002302:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d013      	beq.n	8002350 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00e      	beq.n	8002350 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002340:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2204      	movs	r2, #4
 8002348:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f853 	bl	80023f6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d024      	beq.n	80023a4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01f      	beq.n	80023a4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002372:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2202      	movs	r2, #2
 800237a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01f      	beq.n	80023ee <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01a      	beq.n	80023ee <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023c6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2210      	movs	r2, #16
 80023ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f80e 	bl	800240a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_DMA2D_ConfigLayer+0x20>
 800243c:	2302      	movs	r3, #2
 800243e:	e079      	b.n	8002534 <HAL_DMA2D_ConfigLayer+0x114>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	3318      	adds	r3, #24
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800246a:	4b35      	ldr	r3, [pc, #212]	@ (8002540 <HAL_DMA2D_ConfigLayer+0x120>)
 800246c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b0a      	cmp	r3, #10
 8002474:	d003      	beq.n	800247e <HAL_DMA2D_ConfigLayer+0x5e>
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b09      	cmp	r3, #9
 800247c:	d107      	bne.n	800248e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e005      	b.n	800249a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d120      	bne.n	80024e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	ea02 0103 	and.w	r1, r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b0a      	cmp	r3, #10
 80024c8:	d003      	beq.n	80024d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d127      	bne.n	8002522 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80024de:	629a      	str	r2, [r3, #40]	@ 0x28
 80024e0:	e01f      	b.n	8002522 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	ea02 0103 	and.w	r1, r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b0a      	cmp	r3, #10
 800250a:	d003      	beq.n	8002514 <HAL_DMA2D_ConfigLayer+0xf4>
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b09      	cmp	r3, #9
 8002512:	d106      	bne.n	8002522 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002520:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	ff03000f 	.word	0xff03000f

08002544 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	@ 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e16e      	b.n	8002836 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7c5b      	ldrb	r3, [r3, #17]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe ff46 	bl	80013f4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2203      	movs	r2, #3
 800256c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002582:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800258e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002596:	f7ff fc29 	bl	8001dec <HAL_GetTick>
 800259a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800259c:	e009      	b.n	80025b2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800259e:	f7ff fc25 	bl	8001dec <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025ac:	d901      	bls.n	80025b2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e141      	b.n	8002836 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80025ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0ed      	beq.n	800259e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 80025d2:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80025d6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80025ee:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80025f6:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800262a:	2001      	movs	r0, #1
 800262c:	f7ff fbea 	bl	8001e04 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002630:	f7ff fbdc 	bl	8001dec <HAL_GetTick>
 8002634:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002636:	e009      	b.n	800264c <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002638:	f7ff fbd8 	bl	8001dec <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002646:	d901      	bls.n	800264c <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0f4      	b.n	8002836 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ed      	beq.n	8002638 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800268c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0202 	orr.w	r2, r2, #2
 80026b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0204 	orr.w	r2, r2, #4
 80026c4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0203 	bic.w	r2, r2, #3
 80026d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f2:	f7ff fb7b 	bl	8001dec <HAL_GetTick>
 80026f6:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d123      	bne.n	8002750 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002708:	e00c      	b.n	8002724 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800270a:	f7ff fb6f 	bl	8001dec <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002718:	d904      	bls.n	8002724 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e088      	b.n	8002836 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800272c:	f003 0314 	and.w	r3, r3, #20
 8002730:	2b14      	cmp	r3, #20
 8002732:	d1ea      	bne.n	800270a <HAL_DSI_Init+0x1c6>
 8002734:	e014      	b.n	8002760 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002736:	f7ff fb59 	bl	8001dec <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002744:	d904      	bls.n	8002750 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e072      	b.n	8002836 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002758:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800275c:	2b94      	cmp	r3, #148	@ 0x94
 800275e:	d1ea      	bne.n	8002736 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_DSI_Init+0x22a>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	e000      	b.n	8002770 <HAL_DSI_Init+0x22c>
 800276e:	2301      	movs	r3, #1
 8002770:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	4a32      	ldr	r2, [pc, #200]	@ (8002840 <HAL_DSI_Init+0x2fc>)
 8002776:	fb03 f202 	mul.w	r2, r3, r2
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	409a      	lsls	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80027a6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0203 	bic.w	r2, r2, #3
 800280a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3728      	adds	r7, #40	@ 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	003d0900 	.word	0x003d0900

08002844 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7c1b      	ldrb	r3, [r3, #16]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_DSI_ConfigErrorMonitor+0x16>
 8002856:	2302      	movs	r3, #2
 8002858:	e0ab      	b.n	80029b2 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2200      	movs	r2, #0
 8002866:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002894:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002898:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80028b6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0202 	orr.w	r2, r2, #2
 80028f2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 020c 	orr.w	r2, r2, #12
 8002910:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0210 	orr.w	r2, r2, #16
 800292e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0220 	orr.w	r2, r2, #32
 800294c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800296a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d009      	beq.n	800298c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002988:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 80029a6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00f      	beq.n	80029f6 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8ad 	bl	8002b50 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00f      	beq.n	8002a26 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f89f 	bl	8002b64 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 808c 	beq.w	8002b48 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002a38:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a50:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f043 0202 	orr.w	r2, r3, #2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f043 0208 	orr.w	r2, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f043 0210 	orr.w	r2, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f818 	bl	8002b78 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7c1b      	ldrb	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_DSI_SetGenericVCID+0x16>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e016      	b.n	8002bd0 <HAL_DSI_SetGenericVCID+0x44>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0203 	bic.w	r2, r2, #3
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7c1b      	ldrb	r3, [r3, #16]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0c5      	b.n	8002d7e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0203 	bic.w	r2, r2, #3
 8002c3e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68d9      	ldr	r1, [r3, #12]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0207 	bic.w	r2, r2, #7
 8002c60:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6959      	ldr	r1, [r3, #20]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 020f 	bic.w	r2, r2, #15
 8002c8e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 020e 	bic.w	r2, r2, #14
 8002cb2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	005a      	lsls	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002d00:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0202 	orr.w	r2, r2, #2
 8002d72:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7c1b      	ldrb	r3, [r3, #16]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_DSI_ConfigCommand+0x16>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e049      	b.n	8002e36 <HAL_DSI_ConfigCommand+0xaa>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b24      	ldr	r3, [pc, #144]	@ (8002e44 <HAL_DSI_ConfigCommand+0xb8>)
 8002db4:	400b      	ands	r3, r1
 8002db6:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002dc6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8002dcc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8002dd2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8002dd8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8002dde:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8002de4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8002dea:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8002df0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8002df6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8002dfc:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8002e02:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0202 	bic.w	r2, r2, #2
 8002e1a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	fef080ff 	.word	0xfef080ff

08002e48 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7c1b      	ldrb	r3, [r3, #16]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_DSI_ConfigFlowControl+0x16>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e016      	b.n	8002e8c <HAL_DSI_ConfigFlowControl+0x44>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 021f 	bic.w	r2, r2, #31
 8002e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7c1b      	ldrb	r3, [r3, #16]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_DSI_ConfigPhyTimer+0x16>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e058      	b.n	8002f60 <HAL_DSI_ConfigPhyTimer+0xc8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf38      	it	cc
 8002ec0:	4613      	movcc	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8002ed4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	041a      	lsls	r2, r3, #16
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8002f02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002f3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7c1b      	ldrb	r3, [r3, #16]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_DSI_ConfigHostTimeouts+0x16>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0b4      	b.n	80030ec <HAL_DSI_ConfigHostTimeouts+0x180>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002f96:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	021a      	lsls	r2, r3, #8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	041a      	lsls	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003076:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	0c1b      	lsrs	r3, r3, #16
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6a1a      	ldr	r2, [r3, #32]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7c1b      	ldrb	r3, [r3, #16]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800310a:	2302      	movs	r3, #2
 800310c:	e01b      	b.n	8003146 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003124:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	065a      	lsls	r2, r3, #25
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	@ 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e177      	b.n	8003460 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	f040 8166 	bne.w	800345a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d005      	beq.n	80031a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d130      	bne.n	8003208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031dc:	2201      	movs	r2, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 0201 	and.w	r2, r3, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b03      	cmp	r3, #3
 8003212:	d017      	beq.n	8003244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d123      	bne.n	8003298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	08da      	lsrs	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3208      	adds	r2, #8
 8003258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	08da      	lsrs	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3208      	adds	r2, #8
 8003292:	69b9      	ldr	r1, [r7, #24]
 8003294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0203 	and.w	r2, r3, #3
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80c0 	beq.w	800345a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b66      	ldr	r3, [pc, #408]	@ (8003478 <HAL_GPIO_Init+0x324>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	4a65      	ldr	r2, [pc, #404]	@ (8003478 <HAL_GPIO_Init+0x324>)
 80032e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ea:	4b63      	ldr	r3, [pc, #396]	@ (8003478 <HAL_GPIO_Init+0x324>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f6:	4a61      	ldr	r2, [pc, #388]	@ (800347c <HAL_GPIO_Init+0x328>)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a58      	ldr	r2, [pc, #352]	@ (8003480 <HAL_GPIO_Init+0x32c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d037      	beq.n	8003392 <HAL_GPIO_Init+0x23e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a57      	ldr	r2, [pc, #348]	@ (8003484 <HAL_GPIO_Init+0x330>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_GPIO_Init+0x23a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a56      	ldr	r2, [pc, #344]	@ (8003488 <HAL_GPIO_Init+0x334>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02b      	beq.n	800338a <HAL_GPIO_Init+0x236>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a55      	ldr	r2, [pc, #340]	@ (800348c <HAL_GPIO_Init+0x338>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d025      	beq.n	8003386 <HAL_GPIO_Init+0x232>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a54      	ldr	r2, [pc, #336]	@ (8003490 <HAL_GPIO_Init+0x33c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <HAL_GPIO_Init+0x22e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a53      	ldr	r2, [pc, #332]	@ (8003494 <HAL_GPIO_Init+0x340>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x22a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a52      	ldr	r2, [pc, #328]	@ (8003498 <HAL_GPIO_Init+0x344>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x226>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a51      	ldr	r2, [pc, #324]	@ (800349c <HAL_GPIO_Init+0x348>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x222>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a50      	ldr	r2, [pc, #320]	@ (80034a0 <HAL_GPIO_Init+0x34c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x21e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a4f      	ldr	r2, [pc, #316]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x21a>
 800336a:	2309      	movs	r3, #9
 800336c:	e012      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800336e:	230a      	movs	r3, #10
 8003370:	e010      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003372:	2308      	movs	r3, #8
 8003374:	e00e      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003376:	2307      	movs	r3, #7
 8003378:	e00c      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800337a:	2306      	movs	r3, #6
 800337c:	e00a      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800337e:	2305      	movs	r3, #5
 8003380:	e008      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003382:	2304      	movs	r3, #4
 8003384:	e006      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003386:	2303      	movs	r3, #3
 8003388:	e004      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800338a:	2302      	movs	r3, #2
 800338c:	e002      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003392:	2300      	movs	r3, #0
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f002 0203 	and.w	r2, r2, #3
 800339a:	0092      	lsls	r2, r2, #2
 800339c:	4093      	lsls	r3, r2
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a4:	4935      	ldr	r1, [pc, #212]	@ (800347c <HAL_GPIO_Init+0x328>)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	3302      	adds	r3, #2
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033b2:	4b3d      	ldr	r3, [pc, #244]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d6:	4a34      	ldr	r2, [pc, #208]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033dc:	4b32      	ldr	r3, [pc, #200]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003400:	4a29      	ldr	r2, [pc, #164]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003406:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800342a:	4a1f      	ldr	r2, [pc, #124]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003430:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003454:	4a14      	ldr	r2, [pc, #80]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3301      	adds	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b0f      	cmp	r3, #15
 8003464:	f67f ae84 	bls.w	8003170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3724      	adds	r7, #36	@ 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	40013800 	.word	0x40013800
 8003480:	40020000 	.word	0x40020000
 8003484:	40020400 	.word	0x40020400
 8003488:	40020800 	.word	0x40020800
 800348c:	40020c00 	.word	0x40020c00
 8003490:	40021000 	.word	0x40021000
 8003494:	40021400 	.word	0x40021400
 8003498:	40021800 	.word	0x40021800
 800349c:	40021c00 	.word	0x40021c00
 80034a0:	40022000 	.word	0x40022000
 80034a4:	40022400 	.word	0x40022400
 80034a8:	40013c00 	.word	0x40013c00

080034ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	e001      	b.n	80034ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
 80034e8:	4613      	mov	r3, r2
 80034ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034ec:	787b      	ldrb	r3, [r7, #1]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034f8:	e003      	b.n	8003502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034fa:	887b      	ldrh	r3, [r7, #2]
 80034fc:	041a      	lsls	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	619a      	str	r2, [r3, #24]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003520:	887a      	ldrh	r2, [r7, #2]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4013      	ands	r3, r2
 8003526:	041a      	lsls	r2, r3, #16
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	43d9      	mvns	r1, r3
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	400b      	ands	r3, r1
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	619a      	str	r2, [r3, #24]
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af02      	add	r7, sp, #8
 8003548:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e059      	b.n	8003608 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f00d fa04 	bl	801097c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2203      	movs	r2, #3
 8003578:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003582:	d102      	bne.n	800358a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f006 ffed 	bl	800a56e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7c1a      	ldrb	r2, [r3, #16]
 800359c:	f88d 2000 	strb.w	r2, [sp]
 80035a0:	3304      	adds	r3, #4
 80035a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a4:	f006 ff6e 	bl	800a484 <USB_CoreInit>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e026      	b.n	8003608 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2101      	movs	r1, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f006 ffe5 	bl	800a590 <USB_SetCurrentMode>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e017      	b.n	8003608 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	7c1a      	ldrb	r2, [r3, #16]
 80035e0:	f88d 2000 	strb.w	r2, [sp]
 80035e4:	3304      	adds	r3, #4
 80035e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035e8:	f007 f988 	bl	800a8fc <USB_HostInit>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2202      	movs	r2, #2
 80035f6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e004      	b.n	8003608 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b08b      	sub	sp, #44	@ 0x2c
 8003614:	af04      	add	r7, sp, #16
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	4608      	mov	r0, r1
 800361a:	4611      	mov	r1, r2
 800361c:	461a      	mov	r2, r3
 800361e:	4603      	mov	r3, r0
 8003620:	70fb      	strb	r3, [r7, #3]
 8003622:	460b      	mov	r3, r1
 8003624:	70bb      	strb	r3, [r7, #2]
 8003626:	4613      	mov	r3, r2
 8003628:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800362a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800362c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_HCD_HC_Init+0x2c>
 8003638:	2302      	movs	r3, #2
 800363a:	e09d      	b.n	8003778 <HAL_HCD_HC_Init+0x168>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3319      	adds	r3, #25
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3314      	adds	r3, #20
 8003668:	787a      	ldrb	r2, [r7, #1]
 800366a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3315      	adds	r3, #21
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3326      	adds	r3, #38	@ 0x26
 8003690:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003694:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	78bb      	ldrb	r3, [r7, #2]
 800369a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800369e:	b2d8      	uxtb	r0, r3
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3316      	adds	r3, #22
 80036ae:	4602      	mov	r2, r0
 80036b0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fbc8 	bl	8003e4c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80036bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	da0a      	bge.n	80036da <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3317      	adds	r3, #23
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	e009      	b.n	80036ee <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3317      	adds	r3, #23
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f007 fa5a 	bl	800abac <USB_GetHostSpeed>
 80036f8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80036fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10b      	bne.n	800371a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003702:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_HCD_HC_Init+0x10a>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2bbc      	cmp	r3, #188	@ 0xbc
 8003714:	d901      	bls.n	800371a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003716:	23bc      	movs	r3, #188	@ 0xbc
 8003718:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3318      	adds	r3, #24
 800372a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800372e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	b298      	uxth	r0, r3
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3328      	adds	r3, #40	@ 0x28
 8003744:	4602      	mov	r2, r0
 8003746:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	b29b      	uxth	r3, r3
 8003750:	787c      	ldrb	r4, [r7, #1]
 8003752:	78ba      	ldrb	r2, [r7, #2]
 8003754:	78f9      	ldrb	r1, [r7, #3]
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4623      	mov	r3, r4
 8003766:	f007 fa49 	bl	800abfc <USB_HC_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
}
 8003778:	4618      	mov	r0, r3
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}

08003780 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_HCD_HC_Halt+0x1e>
 800379a:	2302      	movs	r3, #2
 800379c:	e00f      	b.n	80037be <HAL_HCD_HC_Halt+0x3e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f007 fddb 	bl	800b36a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	70fb      	strb	r3, [r7, #3]
 80037da:	460b      	mov	r3, r1
 80037dc:	70bb      	strb	r3, [r7, #2]
 80037de:	4613      	mov	r3, r2
 80037e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3317      	adds	r3, #23
 80037f2:	78ba      	ldrb	r2, [r7, #2]
 80037f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3326      	adds	r3, #38	@ 0x26
 8003806:	787a      	ldrb	r2, [r7, #1]
 8003808:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800380a:	7c3b      	ldrb	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d114      	bne.n	800383a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	332a      	adds	r3, #42	@ 0x2a
 8003820:	2203      	movs	r2, #3
 8003822:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	3319      	adds	r3, #25
 8003834:	7f3a      	ldrb	r2, [r7, #28]
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e009      	b.n	800384e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	332a      	adds	r3, #42	@ 0x2a
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800384e:	787b      	ldrb	r3, [r7, #1]
 8003850:	2b03      	cmp	r3, #3
 8003852:	f200 8102 	bhi.w	8003a5a <HAL_HCD_HC_SubmitRequest+0x292>
 8003856:	a201      	add	r2, pc, #4	@ (adr r2, 800385c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	0800386d 	.word	0x0800386d
 8003860:	08003a45 	.word	0x08003a45
 8003864:	08003931 	.word	0x08003931
 8003868:	080039bb 	.word	0x080039bb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800386c:	7c3b      	ldrb	r3, [r7, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	f040 80f5 	bne.w	8003a5e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003874:	78bb      	ldrb	r3, [r7, #2]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d12d      	bne.n	80038d6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800387a:	8b3b      	ldrh	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	333d      	adds	r3, #61	@ 0x3d
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	333d      	adds	r3, #61	@ 0x3d
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	332a      	adds	r3, #42	@ 0x2a
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80038be:	e0ce      	b.n	8003a5e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	332a      	adds	r3, #42	@ 0x2a
 80038d0:	2202      	movs	r2, #2
 80038d2:	701a      	strb	r2, [r3, #0]
      break;
 80038d4:	e0c3      	b.n	8003a5e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	331a      	adds	r3, #26
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 80b8 	bne.w	8003a5e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	333c      	adds	r3, #60	@ 0x3c
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	332a      	adds	r3, #42	@ 0x2a
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
      break;
 8003918:	e0a1      	b.n	8003a5e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	332a      	adds	r3, #42	@ 0x2a
 800392a:	2202      	movs	r2, #2
 800392c:	701a      	strb	r2, [r3, #0]
      break;
 800392e:	e096      	b.n	8003a5e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003930:	78bb      	ldrb	r3, [r7, #2]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d120      	bne.n	8003978 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	333d      	adds	r3, #61	@ 0x3d
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	332a      	adds	r3, #42	@ 0x2a
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003960:	e07e      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	332a      	adds	r3, #42	@ 0x2a
 8003972:	2202      	movs	r2, #2
 8003974:	701a      	strb	r2, [r3, #0]
      break;
 8003976:	e073      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	333c      	adds	r3, #60	@ 0x3c
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	332a      	adds	r3, #42	@ 0x2a
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
      break;
 80039a2:	e05d      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	332a      	adds	r3, #42	@ 0x2a
 80039b4:	2202      	movs	r2, #2
 80039b6:	701a      	strb	r2, [r3, #0]
      break;
 80039b8:	e052      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80039ba:	78bb      	ldrb	r3, [r7, #2]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d120      	bne.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	333d      	adds	r3, #61	@ 0x3d
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	332a      	adds	r3, #42	@ 0x2a
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039ea:	e039      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	332a      	adds	r3, #42	@ 0x2a
 80039fc:	2202      	movs	r2, #2
 80039fe:	701a      	strb	r2, [r3, #0]
      break;
 8003a00:	e02e      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	333c      	adds	r3, #60	@ 0x3c
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	332a      	adds	r3, #42	@ 0x2a
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
      break;
 8003a2c:	e018      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	332a      	adds	r3, #42	@ 0x2a
 8003a3e:	2202      	movs	r2, #2
 8003a40:	701a      	strb	r2, [r3, #0]
      break;
 8003a42:	e00d      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	332a      	adds	r3, #42	@ 0x2a
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
      break;
 8003a58:	e002      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003a5e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	332c      	adds	r3, #44	@ 0x2c
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	8b39      	ldrh	r1, [r7, #24]
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4403      	add	r3, r0
 8003a84:	3334      	adds	r3, #52	@ 0x34
 8003a86:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	334c      	adds	r3, #76	@ 0x4c
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	3338      	adds	r3, #56	@ 0x38
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	3315      	adds	r3, #21
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003ac4:	78fa      	ldrb	r2, [r7, #3]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	334d      	adds	r3, #77	@ 0x4d
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	3310      	adds	r3, #16
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	1d19      	adds	r1, r3, #4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	799b      	ldrb	r3, [r3, #6]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f007 f9ae 	bl	800ae54 <USB_HC_StartXfer>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop

08003b04 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f006 feae 	bl	800a87c <USB_GetMode>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	f040 80fb 	bne.w	8003d1e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f006 fe71 	bl	800a814 <USB_ReadInterrupts>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80f1 	beq.w	8003d1c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f006 fe68 	bl	800a814 <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b4e:	d104      	bne.n	8003b5a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003b58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f006 fe58 	bl	800a814 <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b6e:	d104      	bne.n	8003b7a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f006 fe48 	bl	800a814 <USB_ReadInterrupts>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b8e:	d104      	bne.n	8003b9a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f006 fe38 	bl	800a814 <USB_ReadInterrupts>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d103      	bne.n	8003bb6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f006 fe2a 	bl	800a814 <USB_ReadInterrupts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bca:	d120      	bne.n	8003c0e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003bd4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d113      	bne.n	8003c0e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003be6:	2110      	movs	r1, #16
 8003be8:	6938      	ldr	r0, [r7, #16]
 8003bea:	f006 fd1d 	bl	800a628 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003bee:	6938      	ldr	r0, [r7, #16]
 8003bf0:	f006 fd4c 	bl	800a68c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	7a5b      	ldrb	r3, [r3, #9]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d105      	bne.n	8003c08 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f006 ff32 	bl	800aa6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f00c ff35 	bl	8010a78 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f006 fdfe 	bl	800a814 <USB_ReadInterrupts>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c22:	d102      	bne.n	8003c2a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f001 fd4d 	bl	80056c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f006 fdf0 	bl	800a814 <USB_ReadInterrupts>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d106      	bne.n	8003c4c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f00c fefe 	bl	8010a40 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f006 fddf 	bl	800a814 <USB_ReadInterrupts>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c60:	d139      	bne.n	8003cd6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f007 fb6e 	bl	800b348 <USB_HC_ReadInterrupt>
 8003c6c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e025      	b.n	8003cc0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d018      	beq.n	8003cba <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c9e:	d106      	bne.n	8003cae <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f905 	bl	8003eb6 <HCD_HC_IN_IRQHandler>
 8003cac:	e005      	b.n	8003cba <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 ff67 	bl	8004b88 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	795b      	ldrb	r3, [r3, #5]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d3d3      	bcc.n	8003c74 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f006 fd9a 	bl	800a814 <USB_ReadInterrupts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d101      	bne.n	8003cee <HAL_HCD_IRQHandler+0x1ea>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_HCD_IRQHandler+0x1ec>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d014      	beq.n	8003d1e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0210 	bic.w	r2, r2, #16
 8003d02:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f001 fbfe 	bl	8005506 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0210 	orr.w	r2, r2, #16
 8003d18:	619a      	str	r2, [r3, #24]
 8003d1a:	e000      	b.n	8003d1e <HAL_HCD_IRQHandler+0x21a>
      return;
 8003d1c:	bf00      	nop
    }
  }
}
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_HCD_Start+0x16>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e013      	b.n	8003d62 <HAL_HCD_Start+0x3e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2101      	movs	r1, #1
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f006 fef6 	bl	800ab3a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f006 fbfa 	bl	800a54c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_HCD_Stop+0x16>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e00d      	b.n	8003d9c <HAL_HCD_Stop+0x32>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f007 fc49 	bl	800b624 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f006 fe98 	bl	800aae6 <USB_ResetPort>
 8003db6:	4603      	mov	r3, r0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	334c      	adds	r3, #76	@ 0x4c
 8003ddc:	781b      	ldrb	r3, [r3, #0]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	460b      	mov	r3, r1
 8003df4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3338      	adds	r3, #56	@ 0x38
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f006 feda 	bl	800abda <USB_GetCurrentFrame>
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f006 feb5 	bl	800abac <USB_GetHostSpeed>
 8003e42:	4603      	mov	r3, r0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	331a      	adds	r3, #26
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	331b      	adds	r3, #27
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3325      	adds	r3, #37	@ 0x25
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3324      	adds	r3, #36	@ 0x24
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b086      	sub	sp, #24
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f006 fcb0 	bl	800a83a <USB_ReadChInterrupts>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d11a      	bne.n	8003f1a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	334d      	adds	r3, #77	@ 0x4d
 8003f06:	2207      	movs	r2, #7
 8003f08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f007 fa29 	bl	800b36a <USB_HC_Halt>
 8003f18:	e09e      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f006 fc89 	bl	800a83a <USB_ReadChInterrupts>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f32:	d11b      	bne.n	8003f6c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f40:	461a      	mov	r2, r3
 8003f42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	334d      	adds	r3, #77	@ 0x4d
 8003f58:	2208      	movs	r2, #8
 8003f5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f007 fa00 	bl	800b36a <USB_HC_Halt>
 8003f6a:	e075      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f006 fc60 	bl	800a83a <USB_ReadChInterrupts>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d11a      	bne.n	8003fba <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f90:	461a      	mov	r2, r3
 8003f92:	2308      	movs	r3, #8
 8003f94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	334d      	adds	r3, #77	@ 0x4d
 8003fa6:	2206      	movs	r2, #6
 8003fa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f007 f9d9 	bl	800b36a <USB_HC_Halt>
 8003fb8:	e04e      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f006 fc39 	bl	800a83a <USB_ReadChInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd2:	d11b      	bne.n	800400c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fe6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	334d      	adds	r3, #77	@ 0x4d
 8003ff8:	2209      	movs	r2, #9
 8003ffa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f007 f9b0 	bl	800b36a <USB_HC_Halt>
 800400a:	e025      	b.n	8004058 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	4611      	mov	r1, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f006 fc10 	bl	800a83a <USB_ReadChInterrupts>
 800401a:	4603      	mov	r3, r0
 800401c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004020:	2b80      	cmp	r3, #128	@ 0x80
 8004022:	d119      	bne.n	8004058 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004030:	461a      	mov	r2, r3
 8004032:	2380      	movs	r3, #128	@ 0x80
 8004034:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	334d      	adds	r3, #77	@ 0x4d
 8004046:	2207      	movs	r2, #7
 8004048:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f007 f989 	bl	800b36a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	78fa      	ldrb	r2, [r7, #3]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f006 fbea 	bl	800a83a <USB_ReadChInterrupts>
 8004066:	4603      	mov	r3, r0
 8004068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800406c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004070:	d112      	bne.n	8004098 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f007 f975 	bl	800b36a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800408c:	461a      	mov	r2, r3
 800408e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004092:	6093      	str	r3, [r2, #8]
 8004094:	f000 bd75 	b.w	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f006 fbca 	bl	800a83a <USB_ReadChInterrupts>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	f040 8128 	bne.w	8004302 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040be:	461a      	mov	r2, r3
 80040c0:	2320      	movs	r3, #32
 80040c2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	331b      	adds	r3, #27
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d119      	bne.n	800410e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	331b      	adds	r3, #27
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	440a      	add	r2, r1
 8004104:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800410c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	799b      	ldrb	r3, [r3, #6]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01b      	beq.n	800414e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	3330      	adds	r3, #48	@ 0x30
 8004126:	6819      	ldr	r1, [r3, #0]
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	1ac9      	subs	r1, r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4403      	add	r3, r0
 800414a:	3338      	adds	r3, #56	@ 0x38
 800414c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	334d      	adds	r3, #77	@ 0x4d
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	3344      	adds	r3, #68	@ 0x44
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004182:	461a      	mov	r2, r3
 8004184:	2301      	movs	r3, #1
 8004186:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	3326      	adds	r3, #38	@ 0x26
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	3326      	adds	r3, #38	@ 0x26
 80041ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d110      	bne.n	80041d6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f007 f8d4 	bl	800b36a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ce:	461a      	mov	r2, r3
 80041d0:	2310      	movs	r3, #16
 80041d2:	6093      	str	r3, [r2, #8]
 80041d4:	e03d      	b.n	8004252 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3326      	adds	r3, #38	@ 0x26
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d00a      	beq.n	8004202 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	3326      	adds	r3, #38	@ 0x26
 80041fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d127      	bne.n	8004252 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	440a      	add	r2, r1
 8004218:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800421c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004220:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	334c      	adds	r3, #76	@ 0x4c
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	334c      	adds	r3, #76	@ 0x4c
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f00c fc21 	bl	8010a94 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	799b      	ldrb	r3, [r3, #6]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d13b      	bne.n	80042d2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	3338      	adds	r3, #56	@ 0x38
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4403      	add	r3, r0
 800427a:	3328      	adds	r3, #40	@ 0x28
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	440b      	add	r3, r1
 8004280:	1e59      	subs	r1, r3, #1
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4403      	add	r3, r0
 8004290:	3328      	adds	r3, #40	@ 0x28
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	fbb1 f3f3 	udiv	r3, r1, r3
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8470 	beq.w	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	333c      	adds	r3, #60	@ 0x3c
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	f083 0301 	eor.w	r3, r3, #1
 80042ba:	b2d8      	uxtb	r0, r3
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	333c      	adds	r3, #60	@ 0x3c
 80042ca:	4602      	mov	r2, r0
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	f000 bc58 	b.w	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	333c      	adds	r3, #60	@ 0x3c
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	f083 0301 	eor.w	r3, r3, #1
 80042ea:	b2d8      	uxtb	r0, r3
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	333c      	adds	r3, #60	@ 0x3c
 80042fa:	4602      	mov	r2, r0
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	f000 bc40 	b.w	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f006 fa95 	bl	800a83a <USB_ReadChInterrupts>
 8004310:	4603      	mov	r3, r0
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b20      	cmp	r3, #32
 8004318:	d131      	bne.n	800437e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004326:	461a      	mov	r2, r3
 8004328:	2320      	movs	r3, #32
 800432a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	331a      	adds	r3, #26
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	f040 841f 	bne.w	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	331b      	adds	r3, #27
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	334d      	adds	r3, #77	@ 0x4d
 8004368:	2203      	movs	r2, #3
 800436a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f006 fff8 	bl	800b36a <USB_HC_Halt>
 800437a:	f000 bc02 	b.w	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f006 fa57 	bl	800a83a <USB_ReadChInterrupts>
 800438c:	4603      	mov	r3, r0
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b02      	cmp	r3, #2
 8004394:	f040 8305 	bne.w	80049a2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a4:	461a      	mov	r2, r3
 80043a6:	2302      	movs	r3, #2
 80043a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	334d      	adds	r3, #77	@ 0x4d
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d114      	bne.n	80043ea <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	334d      	adds	r3, #77	@ 0x4d
 80043d0:	2202      	movs	r2, #2
 80043d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	334c      	adds	r3, #76	@ 0x4c
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	e2cc      	b.n	8004984 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	334d      	adds	r3, #77	@ 0x4d
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b06      	cmp	r3, #6
 80043fe:	d114      	bne.n	800442a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	334d      	adds	r3, #77	@ 0x4d
 8004410:	2202      	movs	r2, #2
 8004412:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	334c      	adds	r3, #76	@ 0x4c
 8004424:	2205      	movs	r2, #5
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	e2ac      	b.n	8004984 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	334d      	adds	r3, #77	@ 0x4d
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b07      	cmp	r3, #7
 800443e:	d00b      	beq.n	8004458 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	334d      	adds	r3, #77	@ 0x4d
 8004450:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004452:	2b09      	cmp	r3, #9
 8004454:	f040 80a6 	bne.w	80045a4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	334d      	adds	r3, #77	@ 0x4d
 8004468:	2202      	movs	r2, #2
 800446a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3344      	adds	r3, #68	@ 0x44
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4403      	add	r3, r0
 800448c:	3344      	adds	r3, #68	@ 0x44
 800448e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	3344      	adds	r3, #68	@ 0x44
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d943      	bls.n	800452e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	3344      	adds	r3, #68	@ 0x44
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	331a      	adds	r3, #26
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d123      	bne.n	8004518 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	331b      	adds	r3, #27
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	331c      	adds	r3, #28
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	440a      	add	r2, r1
 800450e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004516:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	334c      	adds	r3, #76	@ 0x4c
 8004528:	2204      	movs	r2, #4
 800452a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800452c:	e229      	b.n	8004982 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	334c      	adds	r3, #76	@ 0x4c
 800453e:	2202      	movs	r2, #2
 8004540:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	3326      	adds	r3, #38	@ 0x26
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	3326      	adds	r3, #38	@ 0x26
 8004568:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800456a:	2b02      	cmp	r3, #2
 800456c:	f040 8209 	bne.w	8004982 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004586:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800458e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800459c:	461a      	mov	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045a2:	e1ee      	b.n	8004982 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	334d      	adds	r3, #77	@ 0x4d
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b05      	cmp	r3, #5
 80045b8:	f040 80c8 	bne.w	800474c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	334d      	adds	r3, #77	@ 0x4d
 80045cc:	2202      	movs	r2, #2
 80045ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	331b      	adds	r3, #27
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	f040 81ce 	bne.w	8004984 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3326      	adds	r3, #38	@ 0x26
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d16b      	bne.n	80046d6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	3348      	adds	r3, #72	@ 0x48
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	1c59      	adds	r1, r3, #1
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4403      	add	r3, r0
 800461e:	3348      	adds	r3, #72	@ 0x48
 8004620:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3348      	adds	r3, #72	@ 0x48
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d943      	bls.n	80046c0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3348      	adds	r3, #72	@ 0x48
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	331b      	adds	r3, #27
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3344      	adds	r3, #68	@ 0x44
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d809      	bhi.n	800468a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	331c      	adds	r3, #28
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	334c      	adds	r3, #76	@ 0x4c
 80046ba:	2204      	movs	r2, #4
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e014      	b.n	80046ea <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	334c      	adds	r3, #76	@ 0x4c
 80046d0:	2202      	movs	r2, #2
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	e009      	b.n	80046ea <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	334c      	adds	r3, #76	@ 0x4c
 80046e6:	2202      	movs	r2, #2
 80046e8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	3326      	adds	r3, #38	@ 0x26
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00b      	beq.n	8004718 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3326      	adds	r3, #38	@ 0x26
 8004710:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004712:	2b02      	cmp	r3, #2
 8004714:	f040 8136 	bne.w	8004984 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4413      	add	r3, r2
 8004720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800472e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004736:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4413      	add	r3, r2
 8004740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004744:	461a      	mov	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e11b      	b.n	8004984 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	334d      	adds	r3, #77	@ 0x4d
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b03      	cmp	r3, #3
 8004760:	f040 8081 	bne.w	8004866 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	334d      	adds	r3, #77	@ 0x4d
 8004774:	2202      	movs	r2, #2
 8004776:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	331b      	adds	r3, #27
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b01      	cmp	r3, #1
 800478c:	f040 80fa 	bne.w	8004984 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	334c      	adds	r3, #76	@ 0x4c
 80047a0:	2202      	movs	r2, #2
 80047a2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	0151      	lsls	r1, r2, #5
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	440a      	add	r2, r1
 80047ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047e2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047fe:	f023 0320 	bic.w	r3, r3, #32
 8004802:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3326      	adds	r3, #38	@ 0x26
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	3326      	adds	r3, #38	@ 0x26
 800482a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800482c:	2b02      	cmp	r3, #2
 800482e:	f040 80a9 	bne.w	8004984 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4413      	add	r3, r2
 800483a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004848:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004850:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4413      	add	r3, r2
 800485a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	e08e      	b.n	8004984 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	334d      	adds	r3, #77	@ 0x4d
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d143      	bne.n	8004904 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	334d      	adds	r3, #77	@ 0x4d
 800488c:	2202      	movs	r2, #2
 800488e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	334c      	adds	r3, #76	@ 0x4c
 80048a0:	2202      	movs	r2, #2
 80048a2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	3326      	adds	r3, #38	@ 0x26
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3326      	adds	r3, #38	@ 0x26
 80048ca:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d159      	bne.n	8004984 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048e6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048ee:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048fc:	461a      	mov	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e03f      	b.n	8004984 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	334d      	adds	r3, #77	@ 0x4d
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b08      	cmp	r3, #8
 8004918:	d126      	bne.n	8004968 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	334d      	adds	r3, #77	@ 0x4d
 800492a:	2202      	movs	r2, #2
 800492c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3344      	adds	r3, #68	@ 0x44
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	1c59      	adds	r1, r3, #1
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4403      	add	r3, r0
 800494e:	3344      	adds	r3, #68	@ 0x44
 8004950:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	334c      	adds	r3, #76	@ 0x4c
 8004962:	2204      	movs	r2, #4
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	e00d      	b.n	8004984 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	334d      	adds	r3, #77	@ 0x4d
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b02      	cmp	r3, #2
 800497c:	f000 8100 	beq.w	8004b80 <HCD_HC_IN_IRQHandler+0xcca>
 8004980:	e000      	b.n	8004984 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004982:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	334c      	adds	r3, #76	@ 0x4c
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f00c f87a 	bl	8010a94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80049a0:	e0ef      	b.n	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f005 ff45 	bl	800a83a <USB_ReadChInterrupts>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b6:	2b40      	cmp	r3, #64	@ 0x40
 80049b8:	d12f      	bne.n	8004a1a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c6:	461a      	mov	r2, r3
 80049c8:	2340      	movs	r3, #64	@ 0x40
 80049ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	334d      	adds	r3, #77	@ 0x4d
 80049dc:	2205      	movs	r2, #5
 80049de:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80049e0:	78fa      	ldrb	r2, [r7, #3]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	331a      	adds	r3, #26
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	3344      	adds	r3, #68	@ 0x44
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f006 fca9 	bl	800b36a <USB_HC_Halt>
 8004a18:	e0b3      	b.n	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f005 ff09 	bl	800a83a <USB_ReadChInterrupts>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	f040 80a7 	bne.w	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004a34:	78fa      	ldrb	r2, [r7, #3]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	3326      	adds	r3, #38	@ 0x26
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d11b      	bne.n	8004a82 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	3344      	adds	r3, #68	@ 0x44
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004a5e:	78fa      	ldrb	r2, [r7, #3]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	334d      	adds	r3, #77	@ 0x4d
 8004a6e:	2204      	movs	r2, #4
 8004a70:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f006 fc75 	bl	800b36a <USB_HC_Halt>
 8004a80:	e03f      	b.n	8004b02 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	3326      	adds	r3, #38	@ 0x26
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3326      	adds	r3, #38	@ 0x26
 8004aa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d129      	bne.n	8004b02 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	3344      	adds	r3, #68	@ 0x44
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	799b      	ldrb	r3, [r3, #6]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HCD_HC_IN_IRQHandler+0xc2a>
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	331b      	adds	r3, #27
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d110      	bne.n	8004b02 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004ae0:	78fa      	ldrb	r2, [r7, #3]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	334d      	adds	r3, #77	@ 0x4d
 8004af0:	2204      	movs	r2, #4
 8004af2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f006 fc34 	bl	800b36a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	331b      	adds	r3, #27
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d129      	bne.n	8004b6c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	331b      	adds	r3, #27
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b4a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	78fa      	ldrb	r2, [r7, #3]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b66:	f043 0320 	orr.w	r3, r3, #32
 8004b6a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2310      	movs	r3, #16
 8004b7c:	6093      	str	r3, [r2, #8]
 8004b7e:	e000      	b.n	8004b82 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004b80:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f005 fe47 	bl	800a83a <USB_ReadChInterrupts>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d11b      	bne.n	8004bee <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	334d      	adds	r3, #77	@ 0x4d
 8004bd8:	2207      	movs	r2, #7
 8004bda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	78fa      	ldrb	r2, [r7, #3]
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f006 fbc0 	bl	800b36a <USB_HC_Halt>
 8004bea:	f000 bc89 	b.w	8005500 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f005 fe1f 	bl	800a83a <USB_ReadChInterrupts>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	f040 8082 	bne.w	8004d0c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c14:	461a      	mov	r2, r3
 8004c16:	2320      	movs	r3, #32
 8004c18:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	3319      	adds	r3, #25
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d124      	bne.n	8004c7a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3319      	adds	r3, #25
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c44:	78fa      	ldrb	r2, [r7, #3]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	334c      	adds	r3, #76	@ 0x4c
 8004c54:	2202      	movs	r2, #2
 8004c56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004c58:	78fa      	ldrb	r2, [r7, #3]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	334d      	adds	r3, #77	@ 0x4d
 8004c68:	2203      	movs	r2, #3
 8004c6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f006 fb78 	bl	800b36a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	331a      	adds	r3, #26
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	f040 8437 	bne.w	8005500 <HCD_HC_OUT_IRQHandler+0x978>
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	331b      	adds	r3, #27
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f040 842b 	bne.w	8005500 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004caa:	78fa      	ldrb	r2, [r7, #3]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	3326      	adds	r3, #38	@ 0x26
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d009      	beq.n	8004cd4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	331b      	adds	r3, #27
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	334d      	adds	r3, #77	@ 0x4d
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f006 fb3a 	bl	800b36a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3344      	adds	r3, #68	@ 0x44
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	e3f9      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f005 fd90 	bl	800a83a <USB_ReadChInterrupts>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d24:	d111      	bne.n	8004d4a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d32:	461a      	mov	r2, r3
 8004d34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f006 fb11 	bl	800b36a <USB_HC_Halt>
 8004d48:	e3da      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	78fa      	ldrb	r2, [r7, #3]
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f005 fd71 	bl	800a83a <USB_ReadChInterrupts>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d168      	bne.n	8004e34 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	3344      	adds	r3, #68	@ 0x44
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f005 fd5b 	bl	800a83a <USB_ReadChInterrupts>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8a:	2b40      	cmp	r3, #64	@ 0x40
 8004d8c:	d112      	bne.n	8004db4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3319      	adds	r3, #25
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dae:	461a      	mov	r2, r3
 8004db0:	2340      	movs	r3, #64	@ 0x40
 8004db2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	331b      	adds	r3, #27
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d019      	beq.n	8004dfe <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	331b      	adds	r3, #27
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dfc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	334d      	adds	r3, #77	@ 0x4d
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f006 fa9c 	bl	800b36a <USB_HC_Halt>
 8004e32:	e365      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f005 fcfc 	bl	800a83a <USB_ReadChInterrupts>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d139      	bne.n	8004ec0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	334d      	adds	r3, #77	@ 0x4d
 8004e5c:	2205      	movs	r2, #5
 8004e5e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	331a      	adds	r3, #26
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3319      	adds	r3, #25
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	3344      	adds	r3, #68	@ 0x44
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f006 fa5f 	bl	800b36a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004eac:	78fb      	ldrb	r3, [r7, #3]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2340      	movs	r3, #64	@ 0x40
 8004ebc:	6093      	str	r3, [r2, #8]
 8004ebe:	e31f      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	78fa      	ldrb	r2, [r7, #3]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f005 fcb6 	bl	800a83a <USB_ReadChInterrupts>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d11a      	bne.n	8004f0e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	334d      	adds	r3, #77	@ 0x4d
 8004efa:	2206      	movs	r2, #6
 8004efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f006 fa2f 	bl	800b36a <USB_HC_Halt>
 8004f0c:	e2f8      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f005 fc8f 	bl	800a83a <USB_ReadChInterrupts>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d144      	bne.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3344      	adds	r3, #68	@ 0x44
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	334d      	adds	r3, #77	@ 0x4d
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3319      	adds	r3, #25
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d114      	bne.n	8004f8e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	3318      	adds	r3, #24
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3319      	adds	r3, #25
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	78fa      	ldrb	r2, [r7, #3]
 8004f94:	4611      	mov	r1, r2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f006 f9e7 	bl	800b36a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2310      	movs	r3, #16
 8004fac:	6093      	str	r3, [r2, #8]
 8004fae:	e2a7      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f005 fc3e 	bl	800a83a <USB_ReadChInterrupts>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc4:	2b80      	cmp	r3, #128	@ 0x80
 8004fc6:	f040 8083 	bne.w	80050d0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	799b      	ldrb	r3, [r3, #6]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d111      	bne.n	8004ff6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	334d      	adds	r3, #77	@ 0x4d
 8004fe2:	2207      	movs	r2, #7
 8004fe4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	4611      	mov	r1, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f006 f9bb 	bl	800b36a <USB_HC_Halt>
 8004ff4:	e062      	b.n	80050bc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	3344      	adds	r3, #68	@ 0x44
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4403      	add	r3, r0
 8005016:	3344      	adds	r3, #68	@ 0x44
 8005018:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	3344      	adds	r3, #68	@ 0x44
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d922      	bls.n	8005076 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	3344      	adds	r3, #68	@ 0x44
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	334c      	adds	r3, #76	@ 0x4c
 8005054:	2204      	movs	r2, #4
 8005056:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005058:	78fa      	ldrb	r2, [r7, #3]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	334c      	adds	r3, #76	@ 0x4c
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f00b fd10 	bl	8010a94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005074:	e022      	b.n	80050bc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005076:	78fa      	ldrb	r2, [r7, #3]
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	334c      	adds	r3, #76	@ 0x4c
 8005086:	2202      	movs	r2, #2
 8005088:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050a0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80050a8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c8:	461a      	mov	r2, r3
 80050ca:	2380      	movs	r3, #128	@ 0x80
 80050cc:	6093      	str	r3, [r2, #8]
 80050ce:	e217      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	4611      	mov	r1, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	f005 fbae 	bl	800a83a <USB_ReadChInterrupts>
 80050de:	4603      	mov	r3, r0
 80050e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e8:	d11b      	bne.n	8005122 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	334d      	adds	r3, #77	@ 0x4d
 80050fa:	2209      	movs	r2, #9
 80050fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	78fa      	ldrb	r2, [r7, #3]
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f006 f92f 	bl	800b36a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4413      	add	r3, r2
 8005114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005118:	461a      	mov	r2, r3
 800511a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800511e:	6093      	str	r3, [r2, #8]
 8005120:	e1ee      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f005 fb85 	bl	800a83a <USB_ReadChInterrupts>
 8005130:	4603      	mov	r3, r0
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	f040 81df 	bne.w	80054fa <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005148:	461a      	mov	r2, r3
 800514a:	2302      	movs	r3, #2
 800514c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	334d      	adds	r3, #77	@ 0x4d
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	f040 8093 	bne.w	800528c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	334d      	adds	r3, #77	@ 0x4d
 8005176:	2202      	movs	r2, #2
 8005178:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	334c      	adds	r3, #76	@ 0x4c
 800518a:	2201      	movs	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	3326      	adds	r3, #38	@ 0x26
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d00b      	beq.n	80051bc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80051a4:	78fa      	ldrb	r2, [r7, #3]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	1a9b      	subs	r3, r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	3326      	adds	r3, #38	@ 0x26
 80051b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	f040 8190 	bne.w	80054dc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	799b      	ldrb	r3, [r3, #6]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d115      	bne.n	80051f0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	333d      	adds	r3, #61	@ 0x3d
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	f083 0301 	eor.w	r3, r3, #1
 80051dc:	b2d8      	uxtb	r0, r3
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	333d      	adds	r3, #61	@ 0x3d
 80051ec:	4602      	mov	r2, r0
 80051ee:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	799b      	ldrb	r3, [r3, #6]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	f040 8171 	bne.w	80054dc <HCD_HC_OUT_IRQHandler+0x954>
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3334      	adds	r3, #52	@ 0x34
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8165 	beq.w	80054dc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	3334      	adds	r3, #52	@ 0x34
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	78fa      	ldrb	r2, [r7, #3]
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4403      	add	r3, r0
 8005232:	3328      	adds	r3, #40	@ 0x28
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	440b      	add	r3, r1
 8005238:	1e59      	subs	r1, r3, #1
 800523a:	78fa      	ldrb	r2, [r7, #3]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4403      	add	r3, r0
 8005248:	3328      	adds	r3, #40	@ 0x28
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005250:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 813f 	beq.w	80054dc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	333d      	adds	r3, #61	@ 0x3d
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	78fa      	ldrb	r2, [r7, #3]
 8005272:	f083 0301 	eor.w	r3, r3, #1
 8005276:	b2d8      	uxtb	r0, r3
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	333d      	adds	r3, #61	@ 0x3d
 8005286:	4602      	mov	r2, r0
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e127      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	334d      	adds	r3, #77	@ 0x4d
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d120      	bne.n	80052e4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052a2:	78fa      	ldrb	r2, [r7, #3]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	334d      	adds	r3, #77	@ 0x4d
 80052b2:	2202      	movs	r2, #2
 80052b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	331b      	adds	r3, #27
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 8107 	bne.w	80054dc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	334c      	adds	r3, #76	@ 0x4c
 80052de:	2202      	movs	r2, #2
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e0fb      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	334d      	adds	r3, #77	@ 0x4d
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d13a      	bne.n	8005370 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	334d      	adds	r3, #77	@ 0x4d
 800530a:	2202      	movs	r2, #2
 800530c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	334c      	adds	r3, #76	@ 0x4c
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	331b      	adds	r3, #27
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	f040 80d1 	bne.w	80054dc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	331b      	adds	r3, #27
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	440a      	add	r2, r1
 8005364:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536c:	6053      	str	r3, [r2, #4]
 800536e:	e0b5      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	334d      	adds	r3, #77	@ 0x4d
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b05      	cmp	r3, #5
 8005384:	d114      	bne.n	80053b0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	334d      	adds	r3, #77	@ 0x4d
 8005396:	2202      	movs	r2, #2
 8005398:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	334c      	adds	r3, #76	@ 0x4c
 80053aa:	2202      	movs	r2, #2
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	e095      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	334d      	adds	r3, #77	@ 0x4d
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b06      	cmp	r3, #6
 80053c4:	d114      	bne.n	80053f0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	334d      	adds	r3, #77	@ 0x4d
 80053d6:	2202      	movs	r2, #2
 80053d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	334c      	adds	r3, #76	@ 0x4c
 80053ea:	2205      	movs	r2, #5
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e075      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	334d      	adds	r3, #77	@ 0x4d
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b07      	cmp	r3, #7
 8005404:	d00a      	beq.n	800541c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	334d      	adds	r3, #77	@ 0x4d
 8005416:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005418:	2b09      	cmp	r3, #9
 800541a:	d170      	bne.n	80054fe <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	334d      	adds	r3, #77	@ 0x4d
 800542c:	2202      	movs	r2, #2
 800542e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	3344      	adds	r3, #68	@ 0x44
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	1c59      	adds	r1, r3, #1
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4403      	add	r3, r0
 8005450:	3344      	adds	r3, #68	@ 0x44
 8005452:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	3344      	adds	r3, #68	@ 0x44
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d914      	bls.n	8005494 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800546a:	78fa      	ldrb	r2, [r7, #3]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	3344      	adds	r3, #68	@ 0x44
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	334c      	adds	r3, #76	@ 0x4c
 800548e:	2204      	movs	r2, #4
 8005490:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005492:	e022      	b.n	80054da <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	334c      	adds	r3, #76	@ 0x4c
 80054a4:	2202      	movs	r2, #2
 80054a6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054d4:	461a      	mov	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80054da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	334c      	adds	r3, #76	@ 0x4c
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	78fb      	ldrb	r3, [r7, #3]
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f00b face 	bl	8010a94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054f8:	e002      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80054fe:	bf00      	nop
  }
}
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b08a      	sub	sp, #40	@ 0x28
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	0c5b      	lsrs	r3, r3, #17
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800553a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d004      	beq.n	800554c <HCD_RXQLVL_IRQHandler+0x46>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b05      	cmp	r3, #5
 8005546:	f000 80b6 	beq.w	80056b6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800554a:	e0b7      	b.n	80056bc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80b3 	beq.w	80056ba <HCD_RXQLVL_IRQHandler+0x1b4>
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4613      	mov	r3, r2
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	332c      	adds	r3, #44	@ 0x2c
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80a7 	beq.w	80056ba <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4613      	mov	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	3338      	adds	r3, #56	@ 0x38
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	18d1      	adds	r1, r2, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4403      	add	r3, r0
 8005590:	3334      	adds	r3, #52	@ 0x34
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4299      	cmp	r1, r3
 8005596:	f200 8083 	bhi.w	80056a0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4613      	mov	r3, r2
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	332c      	adds	r3, #44	@ 0x2c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	b292      	uxth	r2, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	f005 f8d5 	bl	800a764 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4613      	mov	r3, r2
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	332c      	adds	r3, #44	@ 0x2c
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	18d1      	adds	r1, r2, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4613      	mov	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4403      	add	r3, r0
 80055de:	332c      	adds	r3, #44	@ 0x2c
 80055e0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	3338      	adds	r3, #56	@ 0x38
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	18d1      	adds	r1, r2, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4613      	mov	r3, r2
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4403      	add	r3, r0
 8005606:	3338      	adds	r3, #56	@ 0x38
 8005608:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	0cdb      	lsrs	r3, r3, #19
 800561a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800561e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	4613      	mov	r3, r2
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	3328      	adds	r3, #40	@ 0x28
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4293      	cmp	r3, r2
 8005638:	d13f      	bne.n	80056ba <HCD_RXQLVL_IRQHandler+0x1b4>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d03c      	beq.n	80056ba <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005656:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800565e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800566c:	461a      	mov	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4613      	mov	r3, r2
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	333c      	adds	r3, #60	@ 0x3c
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f083 0301 	eor.w	r3, r3, #1
 8005688:	b2d8      	uxtb	r0, r3
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4613      	mov	r3, r2
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	333c      	adds	r3, #60	@ 0x3c
 800569a:	4602      	mov	r2, r0
 800569c:	701a      	strb	r2, [r3, #0]
      break;
 800569e:	e00c      	b.n	80056ba <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4613      	mov	r3, r2
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	334c      	adds	r3, #76	@ 0x4c
 80056b0:	2204      	movs	r2, #4
 80056b2:	701a      	strb	r2, [r3, #0]
      break;
 80056b4:	e001      	b.n	80056ba <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80056b6:	bf00      	nop
 80056b8:	e000      	b.n	80056bc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80056ba:	bf00      	nop
  }
}
 80056bc:	bf00      	nop
 80056be:	3728      	adds	r7, #40	@ 0x28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80056f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d10b      	bne.n	8005714 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b01      	cmp	r3, #1
 8005704:	d102      	bne.n	800570c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f00b f9a8 	bl	8010a5c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f043 0302 	orr.w	r3, r3, #2
 8005712:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b08      	cmp	r3, #8
 800571c:	d132      	bne.n	8005784 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f043 0308 	orr.w	r3, r3, #8
 8005724:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d126      	bne.n	800577e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7a5b      	ldrb	r3, [r3, #9]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d113      	bne.n	8005760 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800573e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005742:	d106      	bne.n	8005752 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2102      	movs	r1, #2
 800574a:	4618      	mov	r0, r3
 800574c:	f005 f98e 	bl	800aa6c <USB_InitFSLSPClkSel>
 8005750:	e011      	b.n	8005776 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2101      	movs	r1, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f005 f987 	bl	800aa6c <USB_InitFSLSPClkSel>
 800575e:	e00a      	b.n	8005776 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	79db      	ldrb	r3, [r3, #7]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800576e:	461a      	mov	r2, r3
 8005770:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005774:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f00b f99e 	bl	8010ab8 <HAL_HCD_PortEnabled_Callback>
 800577c:	e002      	b.n	8005784 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f00b f9a8 	bl	8010ad4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	d103      	bne.n	8005796 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f043 0320 	orr.w	r3, r3, #32
 8005794:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800579c:	461a      	mov	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6013      	str	r3, [r2, #0]
}
 80057a2:	bf00      	nop
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e12b      	b.n	8005a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fb fe5e 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	@ 0x24
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800580e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005810:	f000 ff82 	bl	8006718 <HAL_RCC_GetPCLK1Freq>
 8005814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4a81      	ldr	r2, [pc, #516]	@ (8005a20 <HAL_I2C_Init+0x274>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d807      	bhi.n	8005830 <HAL_I2C_Init+0x84>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a80      	ldr	r2, [pc, #512]	@ (8005a24 <HAL_I2C_Init+0x278>)
 8005824:	4293      	cmp	r3, r2
 8005826:	bf94      	ite	ls
 8005828:	2301      	movls	r3, #1
 800582a:	2300      	movhi	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	e006      	b.n	800583e <HAL_I2C_Init+0x92>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a7d      	ldr	r2, [pc, #500]	@ (8005a28 <HAL_I2C_Init+0x27c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	bf94      	ite	ls
 8005838:	2301      	movls	r3, #1
 800583a:	2300      	movhi	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e0e7      	b.n	8005a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a78      	ldr	r2, [pc, #480]	@ (8005a2c <HAL_I2C_Init+0x280>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	0c9b      	lsrs	r3, r3, #18
 8005850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a6a      	ldr	r2, [pc, #424]	@ (8005a20 <HAL_I2C_Init+0x274>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d802      	bhi.n	8005880 <HAL_I2C_Init+0xd4>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	3301      	adds	r3, #1
 800587e:	e009      	b.n	8005894 <HAL_I2C_Init+0xe8>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	4a69      	ldr	r2, [pc, #420]	@ (8005a30 <HAL_I2C_Init+0x284>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	099b      	lsrs	r3, r3, #6
 8005892:	3301      	adds	r3, #1
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	430b      	orrs	r3, r1
 800589a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80058a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	495c      	ldr	r1, [pc, #368]	@ (8005a20 <HAL_I2C_Init+0x274>)
 80058b0:	428b      	cmp	r3, r1
 80058b2:	d819      	bhi.n	80058e8 <HAL_I2C_Init+0x13c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	1e59      	subs	r1, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	fbb1 f3f3 	udiv	r3, r1, r3
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058c8:	400b      	ands	r3, r1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_I2C_Init+0x138>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1e59      	subs	r1, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058dc:	3301      	adds	r3, #1
 80058de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e2:	e051      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 80058e4:	2304      	movs	r3, #4
 80058e6:	e04f      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d111      	bne.n	8005914 <HAL_I2C_Init+0x168>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1e58      	subs	r0, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	440b      	add	r3, r1
 80058fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005902:	3301      	adds	r3, #1
 8005904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf0c      	ite	eq
 800590c:	2301      	moveq	r3, #1
 800590e:	2300      	movne	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	e012      	b.n	800593a <HAL_I2C_Init+0x18e>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1e58      	subs	r0, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	0099      	lsls	r1, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	fbb0 f3f3 	udiv	r3, r0, r3
 800592a:	3301      	adds	r3, #1
 800592c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_I2C_Init+0x196>
 800593e:	2301      	movs	r3, #1
 8005940:	e022      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10e      	bne.n	8005968 <HAL_I2C_Init+0x1bc>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1e58      	subs	r0, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	440b      	add	r3, r1
 8005958:	fbb0 f3f3 	udiv	r3, r0, r3
 800595c:	3301      	adds	r3, #1
 800595e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005966:	e00f      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1e58      	subs	r0, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	0099      	lsls	r1, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	fbb0 f3f3 	udiv	r3, r0, r3
 800597e:	3301      	adds	r3, #1
 8005980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005984:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	6809      	ldr	r1, [r1, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6911      	ldr	r1, [r2, #16]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68d2      	ldr	r2, [r2, #12]
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	000186a0 	.word	0x000186a0
 8005a24:	001e847f 	.word	0x001e847f
 8005a28:	003d08ff 	.word	0x003d08ff
 8005a2c:	431bde83 	.word	0x431bde83
 8005a30:	10624dd3 	.word	0x10624dd3

08005a34 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e0bf      	b.n	8005bc6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fb fd98 	bl	8001590 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005a76:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6999      	ldr	r1, [r3, #24]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a8c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6899      	ldr	r1, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd0 <HAL_LTDC_Init+0x19c>)
 8005aa8:	400b      	ands	r3, r1
 8005aaa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6899      	ldr	r1, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68d9      	ldr	r1, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd0 <HAL_LTDC_Init+0x19c>)
 8005ad6:	400b      	ands	r3, r1
 8005ad8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	041b      	lsls	r3, r3, #16
 8005ae0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68d9      	ldr	r1, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1a      	ldr	r2, [r3, #32]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6919      	ldr	r1, [r3, #16]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b33      	ldr	r3, [pc, #204]	@ (8005bd0 <HAL_LTDC_Init+0x19c>)
 8005b04:	400b      	ands	r3, r1
 8005b06:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0c:	041b      	lsls	r3, r3, #16
 8005b0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6919      	ldr	r1, [r3, #16]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6959      	ldr	r1, [r3, #20]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b27      	ldr	r3, [pc, #156]	@ (8005bd0 <HAL_LTDC_Init+0x19c>)
 8005b32:	400b      	ands	r3, r1
 8005b34:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	041b      	lsls	r3, r3, #16
 8005b3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6959      	ldr	r1, [r3, #20]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005b64:	041b      	lsls	r3, r3, #16
 8005b66:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0206 	orr.w	r2, r2, #6
 8005ba2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	f000f800 	.word	0xf000f800

08005bd4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d023      	beq.n	8005c3e <HAL_LTDC_IRQHandler+0x6a>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01e      	beq.n	8005c3e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0204 	bic.w	r2, r2, #4
 8005c0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2204      	movs	r2, #4
 8005c16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f86f 	bl	8005d1c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d023      	beq.n	8005c90 <HAL_LTDC_IRQHandler+0xbc>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d01e      	beq.n	8005c90 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0202 	bic.w	r2, r2, #2
 8005c60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2202      	movs	r2, #2
 8005c68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c70:	f043 0202 	orr.w	r2, r3, #2
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f846 	bl	8005d1c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01b      	beq.n	8005cd2 <HAL_LTDC_IRQHandler+0xfe>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d016      	beq.n	8005cd2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f82f 	bl	8005d30 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01b      	beq.n	8005d14 <HAL_LTDC_IRQHandler+0x140>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d016      	beq.n	8005d14 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0208 	bic.w	r2, r2, #8
 8005cf4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f818 	bl	8005d44 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d58:	b5b0      	push	{r4, r5, r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_LTDC_ConfigLayer+0x1a>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e02c      	b.n	8005dcc <HAL_LTDC_ConfigLayer+0x74>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2134      	movs	r1, #52	@ 0x34
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4614      	mov	r4, r2
 8005d96:	461d      	mov	r5, r3
 8005d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f811 	bl	8005dd4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2201      	movs	r2, #1
 8005db8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bdb0      	pop	{r4, r5, r7, pc}

08005dd4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b089      	sub	sp, #36	@ 0x24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	0c1b      	lsrs	r3, r3, #16
 8005dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df0:	4413      	add	r3, r2
 8005df2:	041b      	lsls	r3, r3, #16
 8005df4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	01db      	lsls	r3, r3, #7
 8005e00:	4413      	add	r3, r2
 8005e02:	3384      	adds	r3, #132	@ 0x84
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	01d2      	lsls	r2, r2, #7
 8005e10:	440a      	add	r2, r1
 8005e12:	3284      	adds	r2, #132	@ 0x84
 8005e14:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005e18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	0c1b      	lsrs	r3, r3, #16
 8005e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e2a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e2c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4619      	mov	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	01db      	lsls	r3, r3, #7
 8005e38:	440b      	add	r3, r1
 8005e3a:	3384      	adds	r3, #132	@ 0x84
 8005e3c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e52:	4413      	add	r3, r2
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	01db      	lsls	r3, r3, #7
 8005e62:	4413      	add	r3, r2
 8005e64:	3384      	adds	r3, #132	@ 0x84
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	01d2      	lsls	r2, r2, #7
 8005e72:	440a      	add	r2, r1
 8005e74:	3284      	adds	r2, #132	@ 0x84
 8005e76:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005e7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e8a:	4413      	add	r3, r2
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	01db      	lsls	r3, r3, #7
 8005e98:	440b      	add	r3, r1
 8005e9a:	3384      	adds	r3, #132	@ 0x84
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	01db      	lsls	r3, r3, #7
 8005eae:	4413      	add	r3, r2
 8005eb0:	3384      	adds	r3, #132	@ 0x84
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	01d2      	lsls	r2, r2, #7
 8005ebe:	440a      	add	r2, r1
 8005ec0:	3284      	adds	r2, #132	@ 0x84
 8005ec2:	f023 0307 	bic.w	r3, r3, #7
 8005ec6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	01db      	lsls	r3, r3, #7
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3384      	adds	r3, #132	@ 0x84
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005eee:	041b      	lsls	r3, r3, #16
 8005ef0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	061b      	lsls	r3, r3, #24
 8005ef8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	01db      	lsls	r3, r3, #7
 8005f04:	4413      	add	r3, r2
 8005f06:	3384      	adds	r3, #132	@ 0x84
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	01db      	lsls	r3, r3, #7
 8005f14:	4413      	add	r3, r2
 8005f16:	3384      	adds	r3, #132	@ 0x84
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005f24:	461a      	mov	r2, r3
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	01db      	lsls	r3, r3, #7
 8005f38:	440b      	add	r3, r1
 8005f3a:	3384      	adds	r3, #132	@ 0x84
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	01db      	lsls	r3, r3, #7
 8005f4e:	4413      	add	r3, r2
 8005f50:	3384      	adds	r3, #132	@ 0x84
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	6812      	ldr	r2, [r2, #0]
 8005f58:	4611      	mov	r1, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	01d2      	lsls	r2, r2, #7
 8005f5e:	440a      	add	r2, r1
 8005f60:	3284      	adds	r2, #132	@ 0x84
 8005f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	01db      	lsls	r3, r3, #7
 8005f72:	4413      	add	r3, r2
 8005f74:	3384      	adds	r3, #132	@ 0x84
 8005f76:	461a      	mov	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	01db      	lsls	r3, r3, #7
 8005f88:	4413      	add	r3, r2
 8005f8a:	3384      	adds	r3, #132	@ 0x84
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	6812      	ldr	r2, [r2, #0]
 8005f92:	4611      	mov	r1, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	01d2      	lsls	r2, r2, #7
 8005f98:	440a      	add	r2, r1
 8005f9a:	3284      	adds	r2, #132	@ 0x84
 8005f9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005fa0:	f023 0307 	bic.w	r3, r3, #7
 8005fa4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	68f9      	ldr	r1, [r7, #12]
 8005fb0:	6809      	ldr	r1, [r1, #0]
 8005fb2:	4608      	mov	r0, r1
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	01c9      	lsls	r1, r1, #7
 8005fb8:	4401      	add	r1, r0
 8005fba:	3184      	adds	r1, #132	@ 0x84
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	01db      	lsls	r3, r3, #7
 8005fca:	4413      	add	r3, r2
 8005fcc:	3384      	adds	r3, #132	@ 0x84
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	01db      	lsls	r3, r3, #7
 8005fda:	4413      	add	r3, r2
 8005fdc:	3384      	adds	r3, #132	@ 0x84
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	01db      	lsls	r3, r3, #7
 8005fee:	4413      	add	r3, r2
 8005ff0:	3384      	adds	r3, #132	@ 0x84
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d102      	bne.n	8006008 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006002:	2304      	movs	r3, #4
 8006004:	61fb      	str	r3, [r7, #28]
 8006006:	e01b      	b.n	8006040 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d102      	bne.n	8006016 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006010:	2303      	movs	r3, #3
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	e014      	b.n	8006040 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b04      	cmp	r3, #4
 800601c:	d00b      	beq.n	8006036 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006022:	2b02      	cmp	r3, #2
 8006024:	d007      	beq.n	8006036 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800602a:	2b03      	cmp	r3, #3
 800602c:	d003      	beq.n	8006036 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006032:	2b07      	cmp	r3, #7
 8006034:	d102      	bne.n	800603c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006036:	2302      	movs	r3, #2
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	e001      	b.n	8006040 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800603c:	2301      	movs	r3, #1
 800603e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	01db      	lsls	r3, r3, #7
 800604a:	4413      	add	r3, r2
 800604c:	3384      	adds	r3, #132	@ 0x84
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	4611      	mov	r1, r2
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	01d2      	lsls	r2, r2, #7
 800605a:	440a      	add	r2, r1
 800605c:	3284      	adds	r2, #132	@ 0x84
 800605e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006062:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6859      	ldr	r1, [r3, #4]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	1acb      	subs	r3, r1, r3
 800607a:	69f9      	ldr	r1, [r7, #28]
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	6809      	ldr	r1, [r1, #0]
 8006086:	4608      	mov	r0, r1
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	01c9      	lsls	r1, r1, #7
 800608c:	4401      	add	r1, r0
 800608e:	3184      	adds	r1, #132	@ 0x84
 8006090:	4313      	orrs	r3, r2
 8006092:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	01db      	lsls	r3, r3, #7
 800609e:	4413      	add	r3, r2
 80060a0:	3384      	adds	r3, #132	@ 0x84
 80060a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	4611      	mov	r1, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	01d2      	lsls	r2, r2, #7
 80060ae:	440a      	add	r2, r1
 80060b0:	3284      	adds	r2, #132	@ 0x84
 80060b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80060b6:	f023 0307 	bic.w	r3, r3, #7
 80060ba:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	01db      	lsls	r3, r3, #7
 80060c6:	4413      	add	r3, r2
 80060c8:	3384      	adds	r3, #132	@ 0x84
 80060ca:	461a      	mov	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	01db      	lsls	r3, r3, #7
 80060dc:	4413      	add	r3, r2
 80060de:	3384      	adds	r3, #132	@ 0x84
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	4611      	mov	r1, r2
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	01d2      	lsls	r2, r2, #7
 80060ec:	440a      	add	r2, r1
 80060ee:	3284      	adds	r2, #132	@ 0x84
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6013      	str	r3, [r2, #0]
}
 80060f6:	bf00      	nop
 80060f8:	3724      	adds	r7, #36	@ 0x24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800610e:	2300      	movs	r3, #0
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	4b20      	ldr	r3, [pc, #128]	@ (8006194 <HAL_PWREx_EnableOverDrive+0x90>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	4a1f      	ldr	r2, [pc, #124]	@ (8006194 <HAL_PWREx_EnableOverDrive+0x90>)
 8006118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800611c:	6413      	str	r3, [r2, #64]	@ 0x40
 800611e:	4b1d      	ldr	r3, [pc, #116]	@ (8006194 <HAL_PWREx_EnableOverDrive+0x90>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800612a:	4b1b      	ldr	r3, [pc, #108]	@ (8006198 <HAL_PWREx_EnableOverDrive+0x94>)
 800612c:	2201      	movs	r2, #1
 800612e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006130:	f7fb fe5c 	bl	8001dec <HAL_GetTick>
 8006134:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006136:	e009      	b.n	800614c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006138:	f7fb fe58 	bl	8001dec <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006146:	d901      	bls.n	800614c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e01f      	b.n	800618c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800614c:	4b13      	ldr	r3, [pc, #76]	@ (800619c <HAL_PWREx_EnableOverDrive+0x98>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006158:	d1ee      	bne.n	8006138 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800615a:	4b11      	ldr	r3, [pc, #68]	@ (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006160:	f7fb fe44 	bl	8001dec <HAL_GetTick>
 8006164:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006166:	e009      	b.n	800617c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006168:	f7fb fe40 	bl	8001dec <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006176:	d901      	bls.n	800617c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e007      	b.n	800618c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800617c:	4b07      	ldr	r3, [pc, #28]	@ (800619c <HAL_PWREx_EnableOverDrive+0x98>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006184:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006188:	d1ee      	bne.n	8006168 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40023800 	.word	0x40023800
 8006198:	420e0040 	.word	0x420e0040
 800619c:	40007000 	.word	0x40007000
 80061a0:	420e0044 	.word	0x420e0044

080061a4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80061ac:	f7fb fe1e 	bl	8001dec <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e069      	b.n	8006290 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fb fa05 	bl	80015e0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80061d6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f85e 	bl	800629c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	021a      	lsls	r2, r3, #8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	2120      	movs	r1, #32
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f856 	bl	80062b8 <QSPI_WaitFlagStateUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006210:	7afb      	ldrb	r3, [r7, #11]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d137      	bne.n	8006286 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006220:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6852      	ldr	r2, [r2, #4]
 8006228:	0611      	lsls	r1, r2, #24
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	68d2      	ldr	r2, [r2, #12]
 800622e:	4311      	orrs	r1, r2
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	69d2      	ldr	r2, [r2, #28]
 8006234:	4311      	orrs	r1, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6a12      	ldr	r2, [r2, #32]
 800623a:	4311      	orrs	r1, r2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6812      	ldr	r2, [r2, #0]
 8006240:	430b      	orrs	r3, r1
 8006242:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <HAL_QSPI_Init+0xf4>)
 800624c:	4013      	ands	r3, r2
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	6912      	ldr	r2, [r2, #16]
 8006252:	0411      	lsls	r1, r2, #16
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6952      	ldr	r2, [r2, #20]
 8006258:	4311      	orrs	r1, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6992      	ldr	r2, [r2, #24]
 800625e:	4311      	orrs	r1, r2
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	430b      	orrs	r3, r1
 8006266:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800628e:	7afb      	ldrb	r3, [r7, #11]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	ffe0f8fe 	.word	0xffe0f8fe

0800629c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80062c8:	e01a      	b.n	8006300 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d016      	beq.n	8006300 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d2:	f7fb fd8b 	bl	8001dec <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10b      	bne.n	8006300 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2204      	movs	r2, #4
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f4:	f043 0201 	orr.w	r2, r3, #1
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e00e      	b.n	800631e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4013      	ands	r3, r2
 800630a:	2b00      	cmp	r3, #0
 800630c:	bf14      	ite	ne
 800630e:	2301      	movne	r3, #1
 8006310:	2300      	moveq	r3, #0
 8006312:	b2db      	uxtb	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	429a      	cmp	r2, r3
 800631a:	d1d6      	bne.n	80062ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0cc      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800633c:	4b68      	ldr	r3, [pc, #416]	@ (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d90c      	bls.n	8006364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634a:	4b65      	ldr	r3, [pc, #404]	@ (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006352:	4b63      	ldr	r3, [pc, #396]	@ (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d001      	beq.n	8006364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0b8      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d020      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800637c:	4b59      	ldr	r3, [pc, #356]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	4a58      	ldr	r2, [pc, #352]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006386:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006394:	4b53      	ldr	r3, [pc, #332]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4a52      	ldr	r2, [pc, #328]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800639e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063a0:	4b50      	ldr	r3, [pc, #320]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	494d      	ldr	r1, [pc, #308]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d044      	beq.n	8006448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d107      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c6:	4b47      	ldr	r3, [pc, #284]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d119      	bne.n	8006406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e07f      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d003      	beq.n	80063e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d107      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e6:	4b3f      	ldr	r3, [pc, #252]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e06f      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f6:	4b3b      	ldr	r3, [pc, #236]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e067      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006406:	4b37      	ldr	r3, [pc, #220]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f023 0203 	bic.w	r2, r3, #3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4934      	ldr	r1, [pc, #208]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006414:	4313      	orrs	r3, r2
 8006416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006418:	f7fb fce8 	bl	8001dec <HAL_GetTick>
 800641c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641e:	e00a      	b.n	8006436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006420:	f7fb fce4 	bl	8001dec <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800642e:	4293      	cmp	r3, r2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e04f      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006436:	4b2b      	ldr	r3, [pc, #172]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 020c 	and.w	r2, r3, #12
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	429a      	cmp	r2, r3
 8006446:	d1eb      	bne.n	8006420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006448:	4b25      	ldr	r3, [pc, #148]	@ (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d20c      	bcs.n	8006470 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b22      	ldr	r3, [pc, #136]	@ (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b20      	ldr	r3, [pc, #128]	@ (80064e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e032      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800647c:	4b19      	ldr	r3, [pc, #100]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	4916      	ldr	r1, [pc, #88]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	4313      	orrs	r3, r2
 800648c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800649a:	4b12      	ldr	r3, [pc, #72]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	490e      	ldr	r1, [pc, #56]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064ae:	f000 f821 	bl	80064f4 <HAL_RCC_GetSysClockFreq>
 80064b2:	4602      	mov	r2, r0
 80064b4:	4b0b      	ldr	r3, [pc, #44]	@ (80064e4 <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	091b      	lsrs	r3, r3, #4
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	490a      	ldr	r1, [pc, #40]	@ (80064e8 <HAL_RCC_ClockConfig+0x1c0>)
 80064c0:	5ccb      	ldrb	r3, [r1, r3]
 80064c2:	fa22 f303 	lsr.w	r3, r2, r3
 80064c6:	4a09      	ldr	r2, [pc, #36]	@ (80064ec <HAL_RCC_ClockConfig+0x1c4>)
 80064c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80064ca:	4b09      	ldr	r3, [pc, #36]	@ (80064f0 <HAL_RCC_ClockConfig+0x1c8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fb fb1a 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40023c00 	.word	0x40023c00
 80064e4:	40023800 	.word	0x40023800
 80064e8:	0801132c 	.word	0x0801132c
 80064ec:	20000000 	.word	0x20000000
 80064f0:	20000004 	.word	0x20000004

080064f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f8:	b094      	sub	sp, #80	@ 0x50
 80064fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800650c:	4b79      	ldr	r3, [pc, #484]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 030c 	and.w	r3, r3, #12
 8006514:	2b08      	cmp	r3, #8
 8006516:	d00d      	beq.n	8006534 <HAL_RCC_GetSysClockFreq+0x40>
 8006518:	2b08      	cmp	r3, #8
 800651a:	f200 80e1 	bhi.w	80066e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_RCC_GetSysClockFreq+0x34>
 8006522:	2b04      	cmp	r3, #4
 8006524:	d003      	beq.n	800652e <HAL_RCC_GetSysClockFreq+0x3a>
 8006526:	e0db      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006528:	4b73      	ldr	r3, [pc, #460]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800652a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800652c:	e0db      	b.n	80066e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800652e:	4b73      	ldr	r3, [pc, #460]	@ (80066fc <HAL_RCC_GetSysClockFreq+0x208>)
 8006530:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006532:	e0d8      	b.n	80066e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006534:	4b6f      	ldr	r3, [pc, #444]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800653c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800653e:	4b6d      	ldr	r3, [pc, #436]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d063      	beq.n	8006612 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800654a:	4b6a      	ldr	r3, [pc, #424]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	099b      	lsrs	r3, r3, #6
 8006550:	2200      	movs	r2, #0
 8006552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006554:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655c:	633b      	str	r3, [r7, #48]	@ 0x30
 800655e:	2300      	movs	r3, #0
 8006560:	637b      	str	r3, [r7, #52]	@ 0x34
 8006562:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006566:	4622      	mov	r2, r4
 8006568:	462b      	mov	r3, r5
 800656a:	f04f 0000 	mov.w	r0, #0
 800656e:	f04f 0100 	mov.w	r1, #0
 8006572:	0159      	lsls	r1, r3, #5
 8006574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006578:	0150      	lsls	r0, r2, #5
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4621      	mov	r1, r4
 8006580:	1a51      	subs	r1, r2, r1
 8006582:	6139      	str	r1, [r7, #16]
 8006584:	4629      	mov	r1, r5
 8006586:	eb63 0301 	sbc.w	r3, r3, r1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006598:	4659      	mov	r1, fp
 800659a:	018b      	lsls	r3, r1, #6
 800659c:	4651      	mov	r1, sl
 800659e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065a2:	4651      	mov	r1, sl
 80065a4:	018a      	lsls	r2, r1, #6
 80065a6:	4651      	mov	r1, sl
 80065a8:	ebb2 0801 	subs.w	r8, r2, r1
 80065ac:	4659      	mov	r1, fp
 80065ae:	eb63 0901 	sbc.w	r9, r3, r1
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065c6:	4690      	mov	r8, r2
 80065c8:	4699      	mov	r9, r3
 80065ca:	4623      	mov	r3, r4
 80065cc:	eb18 0303 	adds.w	r3, r8, r3
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	462b      	mov	r3, r5
 80065d4:	eb49 0303 	adc.w	r3, r9, r3
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065e6:	4629      	mov	r1, r5
 80065e8:	024b      	lsls	r3, r1, #9
 80065ea:	4621      	mov	r1, r4
 80065ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065f0:	4621      	mov	r1, r4
 80065f2:	024a      	lsls	r2, r1, #9
 80065f4:	4610      	mov	r0, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065fa:	2200      	movs	r2, #0
 80065fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006600:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006604:	f7f9 fdfc 	bl	8000200 <__aeabi_uldivmod>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4613      	mov	r3, r2
 800660e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006610:	e058      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006612:	4b38      	ldr	r3, [pc, #224]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	2200      	movs	r2, #0
 800661a:	4618      	mov	r0, r3
 800661c:	4611      	mov	r1, r2
 800661e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006622:	623b      	str	r3, [r7, #32]
 8006624:	2300      	movs	r3, #0
 8006626:	627b      	str	r3, [r7, #36]	@ 0x24
 8006628:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	f04f 0000 	mov.w	r0, #0
 8006634:	f04f 0100 	mov.w	r1, #0
 8006638:	0159      	lsls	r1, r3, #5
 800663a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800663e:	0150      	lsls	r0, r2, #5
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4641      	mov	r1, r8
 8006646:	ebb2 0a01 	subs.w	sl, r2, r1
 800664a:	4649      	mov	r1, r9
 800664c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800665c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006660:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006664:	ebb2 040a 	subs.w	r4, r2, sl
 8006668:	eb63 050b 	sbc.w	r5, r3, fp
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	00eb      	lsls	r3, r5, #3
 8006676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800667a:	00e2      	lsls	r2, r4, #3
 800667c:	4614      	mov	r4, r2
 800667e:	461d      	mov	r5, r3
 8006680:	4643      	mov	r3, r8
 8006682:	18e3      	adds	r3, r4, r3
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	464b      	mov	r3, r9
 8006688:	eb45 0303 	adc.w	r3, r5, r3
 800668c:	607b      	str	r3, [r7, #4]
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800669a:	4629      	mov	r1, r5
 800669c:	028b      	lsls	r3, r1, #10
 800669e:	4621      	mov	r1, r4
 80066a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066a4:	4621      	mov	r1, r4
 80066a6:	028a      	lsls	r2, r1, #10
 80066a8:	4610      	mov	r0, r2
 80066aa:	4619      	mov	r1, r3
 80066ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ae:	2200      	movs	r2, #0
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	61fa      	str	r2, [r7, #28]
 80066b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066b8:	f7f9 fda2 	bl	8000200 <__aeabi_uldivmod>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4613      	mov	r3, r2
 80066c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80066c4:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	0c1b      	lsrs	r3, r3, #16
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	3301      	adds	r3, #1
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80066d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066de:	e002      	b.n	80066e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066e0:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80066e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3750      	adds	r7, #80	@ 0x50
 80066ec:	46bd      	mov	sp, r7
 80066ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800
 80066f8:	00f42400 	.word	0x00f42400
 80066fc:	007a1200 	.word	0x007a1200

08006700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006704:	4b03      	ldr	r3, [pc, #12]	@ (8006714 <HAL_RCC_GetHCLKFreq+0x14>)
 8006706:	681b      	ldr	r3, [r3, #0]
}
 8006708:	4618      	mov	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000000 	.word	0x20000000

08006718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800671c:	f7ff fff0 	bl	8006700 <HAL_RCC_GetHCLKFreq>
 8006720:	4602      	mov	r2, r0
 8006722:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	0a9b      	lsrs	r3, r3, #10
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	4903      	ldr	r1, [pc, #12]	@ (800673c <HAL_RCC_GetPCLK1Freq+0x24>)
 800672e:	5ccb      	ldrb	r3, [r1, r3]
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006734:	4618      	mov	r0, r3
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40023800 	.word	0x40023800
 800673c:	0801133c 	.word	0x0801133c

08006740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006744:	f7ff ffdc 	bl	8006700 <HAL_RCC_GetHCLKFreq>
 8006748:	4602      	mov	r2, r0
 800674a:	4b05      	ldr	r3, [pc, #20]	@ (8006760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	0b5b      	lsrs	r3, r3, #13
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	4903      	ldr	r1, [pc, #12]	@ (8006764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006756:	5ccb      	ldrb	r3, [r1, r3]
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40023800 	.word	0x40023800
 8006764:	0801133c 	.word	0x0801133c

08006768 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	220f      	movs	r2, #15
 8006776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006778:	4b12      	ldr	r3, [pc, #72]	@ (80067c4 <HAL_RCC_GetClockConfig+0x5c>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 0203 	and.w	r2, r3, #3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006784:	4b0f      	ldr	r3, [pc, #60]	@ (80067c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006790:	4b0c      	ldr	r3, [pc, #48]	@ (80067c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800679c:	4b09      	ldr	r3, [pc, #36]	@ (80067c4 <HAL_RCC_GetClockConfig+0x5c>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	08db      	lsrs	r3, r3, #3
 80067a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80067aa:	4b07      	ldr	r3, [pc, #28]	@ (80067c8 <HAL_RCC_GetClockConfig+0x60>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	601a      	str	r2, [r3, #0]
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	40023c00 	.word	0x40023c00

080067cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067f4:	4b66      	ldr	r3, [pc, #408]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80067f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067fa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006802:	4963      	ldr	r1, [pc, #396]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006804:	4313      	orrs	r3, r2
 8006806:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006816:	4b5e      	ldr	r3, [pc, #376]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800681c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006824:	495a      	ldr	r1, [pc, #360]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800684c:	2b00      	cmp	r3, #0
 800684e:	d075      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006850:	4b50      	ldr	r3, [pc, #320]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006856:	f7fb fac9 	bl	8001dec <HAL_GetTick>
 800685a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800685c:	e008      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800685e:	f7fb fac5 	bl	8001dec <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e1dc      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006870:	4b47      	ldr	r3, [pc, #284]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f0      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	019a      	lsls	r2, r3, #6
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	071b      	lsls	r3, r3, #28
 8006894:	493e      	ldr	r1, [pc, #248]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01f      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068a8:	4b39      	ldr	r3, [pc, #228]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80068aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ae:	0f1b      	lsrs	r3, r3, #28
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	019a      	lsls	r2, r3, #6
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	061b      	lsls	r3, r3, #24
 80068c2:	431a      	orrs	r2, r3
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	071b      	lsls	r3, r3, #28
 80068c8:	4931      	ldr	r1, [pc, #196]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80068d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80068d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068d6:	f023 021f 	bic.w	r2, r3, #31
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	3b01      	subs	r3, #1
 80068e0:	492b      	ldr	r1, [pc, #172]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00d      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	019a      	lsls	r2, r3, #6
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	061b      	lsls	r3, r3, #24
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	071b      	lsls	r3, r3, #28
 8006908:	4921      	ldr	r1, [pc, #132]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006910:	4b20      	ldr	r3, [pc, #128]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006916:	f7fb fa69 	bl	8001dec <HAL_GetTick>
 800691a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800691c:	e008      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800691e:	f7fb fa65 	bl	8001dec <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e17c      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006930:	4b17      	ldr	r3, [pc, #92]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	d112      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10c      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80ce 	beq.w	8006afe <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800696a:	f040 80c8 	bne.w	8006afe <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800696e:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006974:	f7fb fa3a 	bl	8001dec <HAL_GetTick>
 8006978:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800697a:	e00f      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800697c:	f7fb fa36 	bl	8001dec <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d908      	bls.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e14d      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800698e:	bf00      	nop
 8006990:	40023800 	.word	0x40023800
 8006994:	42470068 	.word	0x42470068
 8006998:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800699c:	4ba5      	ldr	r3, [pc, #660]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069a8:	d0e8      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d02e      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80069b6:	4b9f      	ldr	r3, [pc, #636]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	3301      	adds	r3, #1
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80069c8:	4b9a      	ldr	r3, [pc, #616]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ce:	0f1b      	lsrs	r3, r3, #28
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	019a      	lsls	r2, r3, #6
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	3b01      	subs	r3, #1
 80069e2:	041b      	lsls	r3, r3, #16
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	061b      	lsls	r3, r3, #24
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	071b      	lsls	r3, r3, #28
 80069f2:	4990      	ldr	r1, [pc, #576]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80069fa:	4b8e      	ldr	r3, [pc, #568]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80069fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a00:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	4989      	ldr	r1, [pc, #548]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d02c      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006a20:	4b84      	ldr	r3, [pc, #528]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a32:	4b80      	ldr	r3, [pc, #512]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a38:	0e1b      	lsrs	r3, r3, #24
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	019a      	lsls	r2, r3, #6
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	085b      	lsrs	r3, r3, #1
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	041b      	lsls	r3, r3, #16
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	061b      	lsls	r3, r3, #24
 8006a54:	431a      	orrs	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	071b      	lsls	r3, r3, #28
 8006a5c:	4975      	ldr	r1, [pc, #468]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006a64:	4b73      	ldr	r3, [pc, #460]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	4970      	ldr	r1, [pc, #448]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d024      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a8e:	d11f      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a90:	4b68      	ldr	r3, [pc, #416]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a96:	0e1b      	lsrs	r3, r3, #24
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a9e:	4b65      	ldr	r3, [pc, #404]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa4:	0f1b      	lsrs	r3, r3, #28
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	019a      	lsls	r2, r3, #6
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	061b      	lsls	r3, r3, #24
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	071b      	lsls	r3, r3, #28
 8006ac8:	495a      	ldr	r1, [pc, #360]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ad0:	4b59      	ldr	r3, [pc, #356]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ad6:	f7fb f989 	bl	8001dec <HAL_GetTick>
 8006ada:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006adc:	e008      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ade:	f7fb f985 	bl	8001dec <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e09c      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006af0:	4b50      	ldr	r3, [pc, #320]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006af8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006afc:	d1ef      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 8083 	beq.w	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	4b48      	ldr	r3, [pc, #288]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b14:	4a47      	ldr	r2, [pc, #284]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b1c:	4b45      	ldr	r3, [pc, #276]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b28:	4b44      	ldr	r3, [pc, #272]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a43      	ldr	r2, [pc, #268]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b32:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b34:	f7fb f95a 	bl	8001dec <HAL_GetTick>
 8006b38:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b3c:	f7fb f956 	bl	8001dec <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e06d      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b5a:	4b36      	ldr	r3, [pc, #216]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b62:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d02f      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d028      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b78:	4b2e      	ldr	r3, [pc, #184]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b80:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b82:	4b2f      	ldr	r3, [pc, #188]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b88:	4b2d      	ldr	r3, [pc, #180]	@ (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b8e:	4a29      	ldr	r2, [pc, #164]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b94:	4b27      	ldr	r3, [pc, #156]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d114      	bne.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ba0:	f7fb f924 	bl	8001dec <HAL_GetTick>
 8006ba4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba6:	e00a      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ba8:	f7fb f920 	bl	8001dec <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e035      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0ee      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd6:	d10d      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006bd8:	4b16      	ldr	r3, [pc, #88]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bec:	4911      	ldr	r1, [pc, #68]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
 8006bf2:	e005      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bfa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006bfe:	6093      	str	r3, [r2, #8]
 8006c00:	4b0c      	ldr	r3, [pc, #48]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c0c:	4909      	ldr	r1, [pc, #36]	@ (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006c24:	4b07      	ldr	r3, [pc, #28]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006c26:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40023800 	.word	0x40023800
 8006c38:	42470070 	.word	0x42470070
 8006c3c:	40007000 	.word	0x40007000
 8006c40:	42470e40 	.word	0x42470e40
 8006c44:	424711e0 	.word	0x424711e0

08006c48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e273      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d075      	beq.n	8006d52 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006c66:	4b88      	ldr	r3, [pc, #544]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 030c 	and.w	r3, r3, #12
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d00c      	beq.n	8006c8c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c72:	4b85      	ldr	r3, [pc, #532]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 030c 	and.w	r3, r3, #12
        || \
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	d112      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c7e:	4b82      	ldr	r3, [pc, #520]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c8a:	d10b      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d05b      	beq.n	8006d50 <HAL_RCC_OscConfig+0x108>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d157      	bne.n	8006d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e24e      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cac:	d106      	bne.n	8006cbc <HAL_RCC_OscConfig+0x74>
 8006cae:	4b76      	ldr	r3, [pc, #472]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a75      	ldr	r2, [pc, #468]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	e01d      	b.n	8006cf8 <HAL_RCC_OscConfig+0xb0>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cc4:	d10c      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x98>
 8006cc6:	4b70      	ldr	r3, [pc, #448]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a6f      	ldr	r2, [pc, #444]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a6c      	ldr	r2, [pc, #432]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	e00b      	b.n	8006cf8 <HAL_RCC_OscConfig+0xb0>
 8006ce0:	4b69      	ldr	r3, [pc, #420]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a68      	ldr	r2, [pc, #416]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	4b66      	ldr	r3, [pc, #408]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a65      	ldr	r2, [pc, #404]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d013      	beq.n	8006d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d00:	f7fb f874 	bl	8001dec <HAL_GetTick>
 8006d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d08:	f7fb f870 	bl	8001dec <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b64      	cmp	r3, #100	@ 0x64
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e213      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f0      	beq.n	8006d08 <HAL_RCC_OscConfig+0xc0>
 8006d26:	e014      	b.n	8006d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fb f860 	bl	8001dec <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d30:	f7fb f85c 	bl	8001dec <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b64      	cmp	r3, #100	@ 0x64
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e1ff      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d42:	4b51      	ldr	r3, [pc, #324]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0xe8>
 8006d4e:	e000      	b.n	8006d52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d063      	beq.n	8006e26 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d6a:	4b47      	ldr	r3, [pc, #284]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 030c 	and.w	r3, r3, #12
        || \
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d11c      	bne.n	8006db0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d76:	4b44      	ldr	r3, [pc, #272]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d116      	bne.n	8006db0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d82:	4b41      	ldr	r3, [pc, #260]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <HAL_RCC_OscConfig+0x152>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d001      	beq.n	8006d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e1d3      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4937      	ldr	r1, [pc, #220]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dae:	e03a      	b.n	8006e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d020      	beq.n	8006dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006db8:	4b34      	ldr	r3, [pc, #208]	@ (8006e8c <HAL_RCC_OscConfig+0x244>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dbe:	f7fb f815 	bl	8001dec <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dc6:	f7fb f811 	bl	8001dec <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e1b4      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0f0      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de4:	4b28      	ldr	r3, [pc, #160]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	4925      	ldr	r1, [pc, #148]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	600b      	str	r3, [r1, #0]
 8006df8:	e015      	b.n	8006e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dfa:	4b24      	ldr	r3, [pc, #144]	@ (8006e8c <HAL_RCC_OscConfig+0x244>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e00:	f7fa fff4 	bl	8001dec <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e08:	f7fa fff0 	bl	8001dec <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e193      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f0      	bne.n	8006e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d036      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d016      	beq.n	8006e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e3a:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <HAL_RCC_OscConfig+0x248>)
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e40:	f7fa ffd4 	bl	8001dec <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e48:	f7fa ffd0 	bl	8001dec <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e173      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e88 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f0      	beq.n	8006e48 <HAL_RCC_OscConfig+0x200>
 8006e66:	e01b      	b.n	8006ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e68:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <HAL_RCC_OscConfig+0x248>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e6e:	f7fa ffbd 	bl	8001dec <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e74:	e00e      	b.n	8006e94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e76:	f7fa ffb9 	bl	8001dec <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d907      	bls.n	8006e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e15c      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	42470000 	.word	0x42470000
 8006e90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e94:	4b8a      	ldr	r3, [pc, #552]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ea      	bne.n	8006e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8097 	beq.w	8006fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eb2:	4b83      	ldr	r3, [pc, #524]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10f      	bne.n	8006ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ece:	4b7c      	ldr	r3, [pc, #496]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed6:	60bb      	str	r3, [r7, #8]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eda:	2301      	movs	r3, #1
 8006edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ede:	4b79      	ldr	r3, [pc, #484]	@ (80070c4 <HAL_RCC_OscConfig+0x47c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d118      	bne.n	8006f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eea:	4b76      	ldr	r3, [pc, #472]	@ (80070c4 <HAL_RCC_OscConfig+0x47c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a75      	ldr	r2, [pc, #468]	@ (80070c4 <HAL_RCC_OscConfig+0x47c>)
 8006ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ef6:	f7fa ff79 	bl	8001dec <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006efe:	f7fa ff75 	bl	8001dec <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e118      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f10:	4b6c      	ldr	r3, [pc, #432]	@ (80070c4 <HAL_RCC_OscConfig+0x47c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f0      	beq.n	8006efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d106      	bne.n	8006f32 <HAL_RCC_OscConfig+0x2ea>
 8006f24:	4b66      	ldr	r3, [pc, #408]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f28:	4a65      	ldr	r2, [pc, #404]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f2a:	f043 0301 	orr.w	r3, r3, #1
 8006f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f30:	e01c      	b.n	8006f6c <HAL_RCC_OscConfig+0x324>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	2b05      	cmp	r3, #5
 8006f38:	d10c      	bne.n	8006f54 <HAL_RCC_OscConfig+0x30c>
 8006f3a:	4b61      	ldr	r3, [pc, #388]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3e:	4a60      	ldr	r2, [pc, #384]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f40:	f043 0304 	orr.w	r3, r3, #4
 8006f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f46:	4b5e      	ldr	r3, [pc, #376]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4a:	4a5d      	ldr	r2, [pc, #372]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f4c:	f043 0301 	orr.w	r3, r3, #1
 8006f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f52:	e00b      	b.n	8006f6c <HAL_RCC_OscConfig+0x324>
 8006f54:	4b5a      	ldr	r3, [pc, #360]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f58:	4a59      	ldr	r2, [pc, #356]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f5a:	f023 0301 	bic.w	r3, r3, #1
 8006f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f60:	4b57      	ldr	r3, [pc, #348]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f64:	4a56      	ldr	r2, [pc, #344]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f66:	f023 0304 	bic.w	r3, r3, #4
 8006f6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d015      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f74:	f7fa ff3a 	bl	8001dec <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f7a:	e00a      	b.n	8006f92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f7c:	f7fa ff36 	bl	8001dec <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e0d7      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f92:	4b4b      	ldr	r3, [pc, #300]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ee      	beq.n	8006f7c <HAL_RCC_OscConfig+0x334>
 8006f9e:	e014      	b.n	8006fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa0:	f7fa ff24 	bl	8001dec <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fa6:	e00a      	b.n	8006fbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fa8:	f7fa ff20 	bl	8001dec <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e0c1      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fbe:	4b40      	ldr	r3, [pc, #256]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1ee      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d105      	bne.n	8006fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd4:	4a3a      	ldr	r2, [pc, #232]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80ad 	beq.w	8007140 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fe6:	4b36      	ldr	r3, [pc, #216]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 030c 	and.w	r3, r3, #12
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d060      	beq.n	80070b4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d145      	bne.n	8007086 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ffa:	4b33      	ldr	r3, [pc, #204]	@ (80070c8 <HAL_RCC_OscConfig+0x480>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007000:	f7fa fef4 	bl	8001dec <HAL_GetTick>
 8007004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007006:	e008      	b.n	800701a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007008:	f7fa fef0 	bl	8001dec <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b02      	cmp	r3, #2
 8007014:	d901      	bls.n	800701a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e093      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800701a:	4b29      	ldr	r3, [pc, #164]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1f0      	bne.n	8007008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69da      	ldr	r2, [r3, #28]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007034:	019b      	lsls	r3, r3, #6
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	085b      	lsrs	r3, r3, #1
 800703e:	3b01      	subs	r3, #1
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007048:	061b      	lsls	r3, r3, #24
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007050:	071b      	lsls	r3, r3, #28
 8007052:	491b      	ldr	r1, [pc, #108]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 8007054:	4313      	orrs	r3, r2
 8007056:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007058:	4b1b      	ldr	r3, [pc, #108]	@ (80070c8 <HAL_RCC_OscConfig+0x480>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705e:	f7fa fec5 	bl	8001dec <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007066:	f7fa fec1 	bl	8001dec <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e064      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007078:	4b11      	ldr	r3, [pc, #68]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0f0      	beq.n	8007066 <HAL_RCC_OscConfig+0x41e>
 8007084:	e05c      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007086:	4b10      	ldr	r3, [pc, #64]	@ (80070c8 <HAL_RCC_OscConfig+0x480>)
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708c:	f7fa feae 	bl	8001dec <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007094:	f7fa feaa 	bl	8001dec <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e04d      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a6:	4b06      	ldr	r3, [pc, #24]	@ (80070c0 <HAL_RCC_OscConfig+0x478>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1f0      	bne.n	8007094 <HAL_RCC_OscConfig+0x44c>
 80070b2:	e045      	b.n	8007140 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d107      	bne.n	80070cc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e040      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
 80070c0:	40023800 	.word	0x40023800
 80070c4:	40007000 	.word	0x40007000
 80070c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070cc:	4b1f      	ldr	r3, [pc, #124]	@ (800714c <HAL_RCC_OscConfig+0x504>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d030      	beq.n	800713c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d129      	bne.n	800713c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d122      	bne.n	800713c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80070fc:	4013      	ands	r3, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007104:	4293      	cmp	r3, r2
 8007106:	d119      	bne.n	800713c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	3b01      	subs	r3, #1
 8007116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007118:	429a      	cmp	r2, r3
 800711a:	d10f      	bne.n	800713c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007128:	429a      	cmp	r2, r3
 800712a:	d107      	bne.n	800713c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007136:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007138:	429a      	cmp	r2, r3
 800713a:	d001      	beq.n	8007140 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	40023800 	.word	0x40023800

08007150 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e10c      	b.n	800738c <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fa fc5e 	bl	8001a48 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f903 	bl	80073a0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f938 	bl	8007410 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d030      	beq.n	800720a <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f957 	bl	800745c <SAI_GetInputClock>
 80071ae:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	461a      	mov	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	025b      	lsls	r3, r3, #9
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4a72      	ldr	r2, [pc, #456]	@ (8007394 <HAL_SAI_Init+0x244>)
 80071cc:	fba2 2303 	umull	r2, r3, r2, r3
 80071d0:	08da      	lsrs	r2, r3, #3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	4b6e      	ldr	r3, [pc, #440]	@ (8007394 <HAL_SAI_Init+0x244>)
 80071da:	fba3 2301 	umull	r2, r3, r3, r1
 80071de:	08da      	lsrs	r2, r3, #3
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	1aca      	subs	r2, r1, r3
 80071ea:	2a08      	cmp	r2, #8
 80071ec:	d904      	bls.n	80071f8 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d104      	bne.n	800720a <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	085a      	lsrs	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_SAI_Init+0xca>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2b02      	cmp	r3, #2
 8007218:	d109      	bne.n	800722e <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_SAI_Init+0xd6>
 8007222:	2300      	movs	r3, #0
 8007224:	e001      	b.n	800722a <HAL_SAI_Init+0xda>
 8007226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	e008      	b.n	8007240 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007232:	2b01      	cmp	r3, #1
 8007234:	d102      	bne.n	800723c <HAL_SAI_Init+0xec>
 8007236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800723a:	e000      	b.n	800723e <HAL_SAI_Init+0xee>
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2b03      	cmp	r3, #3
 8007246:	d811      	bhi.n	800726c <HAL_SAI_Init+0x11c>
 8007248:	2b02      	cmp	r3, #2
 800724a:	d20b      	bcs.n	8007264 <HAL_SAI_Init+0x114>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_SAI_Init+0x106>
 8007250:	2b01      	cmp	r3, #1
 8007252:	d003      	beq.n	800725c <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007254:	e00a      	b.n	800726c <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	613b      	str	r3, [r7, #16]
    break;
 800725a:	e008      	b.n	800726e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800725c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007260:	613b      	str	r3, [r7, #16]
    break;
 8007262:	e004      	b.n	800726e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007264:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007268:	613b      	str	r3, [r7, #16]
    break;
 800726a:	e000      	b.n	800726e <HAL_SAI_Init+0x11e>
      break;
 800726c:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6819      	ldr	r1, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4b47      	ldr	r3, [pc, #284]	@ (8007398 <HAL_SAI_Init+0x248>)
 800727a:	400b      	ands	r3, r1
 800727c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800728c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007292:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007298:	431a      	orrs	r2, r3
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 80072a6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80072b2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b8:	051b      	lsls	r3, r3, #20
 80072ba:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80072d2:	f023 030f 	bic.w	r3, r3, #15
 80072d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6859      	ldr	r1, [r3, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6899      	ldr	r1, [r3, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4b26      	ldr	r3, [pc, #152]	@ (800739c <HAL_SAI_Init+0x24c>)
 8007302:	400b      	ands	r3, r1
 8007304:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6899      	ldr	r1, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007310:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007316:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 800731c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007322:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007328:	3b01      	subs	r3, #1
 800732a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800732c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68d9      	ldr	r1, [r3, #12]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007344:	400b      	ands	r3, r1
 8007346:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68d9      	ldr	r1, [r3, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007356:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800735c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800735e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007364:	3b01      	subs	r3, #1
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	cccccccd 	.word	0xcccccccd
 8007398:	ff05c010 	.word	0xff05c010
 800739c:	fff88000 	.word	0xfff88000

080073a0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80073a8:	4b17      	ldr	r3, [pc, #92]	@ (8007408 <SAI_Disable+0x68>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a17      	ldr	r2, [pc, #92]	@ (800740c <SAI_Disable+0x6c>)
 80073ae:	fba2 2303 	umull	r2, r3, r2, r3
 80073b2:	0b1b      	lsrs	r3, r3, #12
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80073ca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	1e5a      	subs	r2, r3, #1
 80073d0:	60fa      	str	r2, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	72fb      	strb	r3, [r7, #11]
      break;
 80073ea:	e006      	b.n	80073fa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e8      	bne.n	80073cc <SAI_Disable+0x2c>

  return status;
 80073fa:	7afb      	ldrb	r3, [r7, #11]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	20000000 	.word	0x20000000
 800740c:	95cbec1b 	.word	0x95cbec1b

08007410 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d00c      	beq.n	800743a <SAI_BlockSynchroConfig+0x2a>
 8007420:	2b02      	cmp	r3, #2
 8007422:	d80d      	bhi.n	8007440 <SAI_BlockSynchroConfig+0x30>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <SAI_BlockSynchroConfig+0x1e>
 8007428:	2b01      	cmp	r3, #1
 800742a:	d003      	beq.n	8007434 <SAI_BlockSynchroConfig+0x24>
 800742c:	e008      	b.n	8007440 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
      break;
 8007432:	e008      	b.n	8007446 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007434:	2310      	movs	r3, #16
 8007436:	60fb      	str	r3, [r7, #12]
      break;
 8007438:	e005      	b.n	8007446 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800743a:	2320      	movs	r3, #32
 800743c:	60fb      	str	r3, [r7, #12]
      break;
 800743e:	e002      	b.n	8007446 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
      break;
 8007444:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007446:	4a04      	ldr	r2, [pc, #16]	@ (8007458 <SAI_BlockSynchroConfig+0x48>)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800744c:	bf00      	nop
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40015800 	.word	0x40015800

0800745c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a46      	ldr	r2, [pc, #280]	@ (8007590 <SAI_GetInputClock+0x134>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d10b      	bne.n	8007492 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800747a:	4b46      	ldr	r3, [pc, #280]	@ (8007594 <SAI_GetInputClock+0x138>)
 800747c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007480:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	4942      	ldr	r1, [pc, #264]	@ (8007594 <SAI_GetInputClock+0x138>)
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007490:	e00b      	b.n	80074aa <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8007492:	4b40      	ldr	r3, [pc, #256]	@ (8007594 <SAI_GetInputClock+0x138>)
 8007494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007498:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	493c      	ldr	r1, [pc, #240]	@ (8007594 <SAI_GetInputClock+0x138>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80074aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007594 <SAI_GetInputClock+0x138>)
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d108      	bne.n	80074c8 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074b6:	4b37      	ldr	r3, [pc, #220]	@ (8007594 <SAI_GetInputClock+0x138>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074be:	4a36      	ldr	r2, [pc, #216]	@ (8007598 <SAI_GetInputClock+0x13c>)
 80074c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	e007      	b.n	80074d8 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80074c8:	4b32      	ldr	r3, [pc, #200]	@ (8007594 <SAI_GetInputClock+0x138>)
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074d0:	4a32      	ldr	r2, [pc, #200]	@ (800759c <SAI_GetInputClock+0x140>)
 80074d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d6:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d121      	bne.n	8007524 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80074e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007594 <SAI_GetInputClock+0x138>)
 80074e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e6:	0e1b      	lsrs	r3, r3, #24
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 80074ee:	4b29      	ldr	r3, [pc, #164]	@ (8007594 <SAI_GetInputClock+0x138>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f4:	099b      	lsrs	r3, r3, #6
 80074f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	fb03 f202 	mul.w	r2, r3, r2
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	fbb2 f3f3 	udiv	r3, r2, r3
 8007506:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8007508:	4b22      	ldr	r3, [pc, #136]	@ (8007594 <SAI_GetInputClock+0x138>)
 800750a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800750e:	0a1b      	lsrs	r3, r3, #8
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	e02d      	b.n	8007580 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800752c:	d120      	bne.n	8007570 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800752e:	4b19      	ldr	r3, [pc, #100]	@ (8007594 <SAI_GetInputClock+0x138>)
 8007530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800753c:	4b15      	ldr	r3, [pc, #84]	@ (8007594 <SAI_GetInputClock+0x138>)
 800753e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007542:	099b      	lsrs	r3, r3, #6
 8007544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	fb03 f202 	mul.w	r2, r3, r2
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	fbb2 f3f3 	udiv	r3, r2, r3
 8007554:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8007556:	4b0f      	ldr	r3, [pc, #60]	@ (8007594 <SAI_GetInputClock+0x138>)
 8007558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800755c:	f003 031f 	and.w	r3, r3, #31
 8007560:	3301      	adds	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	fbb2 f3f3 	udiv	r3, r2, r3
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	e007      	b.n	8007580 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8007570:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <SAI_GetInputClock+0x138>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	4a07      	ldr	r2, [pc, #28]	@ (8007594 <SAI_GetInputClock+0x138>)
 8007576:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800757a:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 800757c:	4b08      	ldr	r3, [pc, #32]	@ (80075a0 <SAI_GetInputClock+0x144>)
 800757e:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8007580:	697b      	ldr	r3, [r7, #20]
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40015804 	.word	0x40015804
 8007594:	40023800 	.word	0x40023800
 8007598:	00f42400 	.word	0x00f42400
 800759c:	007a1200 	.word	0x007a1200
 80075a0:	00bb8000 	.word	0x00bb8000

080075a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e022      	b.n	80075fc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d105      	bne.n	80075ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7fa f883 	bl	80016d4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2203      	movs	r2, #3
 80075d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f814 	bl	8007604 <HAL_SD_InitCard>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e00a      	b.n	80075fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007604:	b5b0      	push	{r4, r5, r7, lr}
 8007606:	b08e      	sub	sp, #56	@ 0x38
 8007608:	af04      	add	r7, sp, #16
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800760c:	2300      	movs	r3, #0
 800760e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800761c:	2300      	movs	r3, #0
 800761e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007620:	2376      	movs	r3, #118	@ 0x76
 8007622:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681d      	ldr	r5, [r3, #0]
 8007628:	466c      	mov	r4, sp
 800762a:	f107 0314 	add.w	r3, r7, #20
 800762e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800763c:	4628      	mov	r0, r5
 800763e:	f002 f9bf 	bl	80099c0 <SDIO_Init>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e04f      	b.n	80076f4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007654:	4b29      	ldr	r3, [pc, #164]	@ (80076fc <HAL_SD_InitCard+0xf8>)
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f002 f9e6 	bl	8009a30 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007664:	4b25      	ldr	r3, [pc, #148]	@ (80076fc <HAL_SD_InitCard+0xf8>)
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800766a:	2002      	movs	r0, #2
 800766c:	f7fa fbca 	bl	8001e04 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fe0b 	bl	800828c <SD_PowerON>
 8007676:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e02e      	b.n	80076f4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fd2a 	bl	80080f0 <SD_InitCard>
 800769c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e01b      	b.n	80076f4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076c4:	4618      	mov	r0, r3
 80076c6:	f002 fa45 	bl	8009b54 <SDMMC_CmdBlockLength>
 80076ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00f      	beq.n	80076f2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007700 <HAL_SD_InitCard+0xfc>)
 80076d8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3728      	adds	r7, #40	@ 0x28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bdb0      	pop	{r4, r5, r7, pc}
 80076fc:	422580a0 	.word	0x422580a0
 8007700:	004005ff 	.word	0x004005ff

08007704 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08c      	sub	sp, #48	@ 0x30
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d107      	bne.n	800772c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007720:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0be      	b.n	80078aa <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b01      	cmp	r3, #1
 8007736:	f040 80b7 	bne.w	80078a8 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	441a      	add	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774a:	429a      	cmp	r2, r3
 800774c:	d907      	bls.n	800775e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007752:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e0a5      	b.n	80078aa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2203      	movs	r2, #3
 8007762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2200      	movs	r2, #0
 800776c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800777c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007782:	4a4c      	ldr	r2, [pc, #304]	@ (80078b4 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007784:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778a:	4a4b      	ldr	r2, [pc, #300]	@ (80078b8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800778c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007792:	2200      	movs	r2, #0
 8007794:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3380      	adds	r3, #128	@ 0x80
 80077c4:	4619      	mov	r1, r3
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	025b      	lsls	r3, r3, #9
 80077cc:	089b      	lsrs	r3, r3, #2
 80077ce:	f7fa fc3b 	bl	8002048 <HAL_DMA_Start_IT>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d017      	beq.n	8007808 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80077e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a33      	ldr	r2, [pc, #204]	@ (80078bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80077ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e050      	b.n	80078aa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007808:	4b2d      	ldr	r3, [pc, #180]	@ (80078c0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800780a:	2201      	movs	r2, #1
 800780c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007812:	2b01      	cmp	r3, #1
 8007814:	d002      	beq.n	800781c <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007818:	025b      	lsls	r3, r3, #9
 800781a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800781c:	f04f 33ff 	mov.w	r3, #4294967295
 8007820:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	025b      	lsls	r3, r3, #9
 8007826:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007828:	2390      	movs	r3, #144	@ 0x90
 800782a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800782c:	2302      	movs	r3, #2
 800782e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007830:	2300      	movs	r3, #0
 8007832:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007834:	2301      	movs	r3, #1
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f107 0210 	add.w	r2, r7, #16
 8007840:	4611      	mov	r1, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f002 f95a 	bl	8009afc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d90a      	bls.n	8007864 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2282      	movs	r2, #130	@ 0x82
 8007852:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800785a:	4618      	mov	r0, r3
 800785c:	f002 f9be 	bl	8009bdc <SDMMC_CmdReadMultiBlock>
 8007860:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007862:	e009      	b.n	8007878 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2281      	movs	r2, #129	@ 0x81
 8007868:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007870:	4618      	mov	r0, r3
 8007872:	f002 f991 	bl	8009b98 <SDMMC_CmdReadSingleBlock>
 8007876:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d012      	beq.n	80078a4 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a0e      	ldr	r2, [pc, #56]	@ (80078bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007884:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800788a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788c:	431a      	orrs	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e002      	b.n	80078aa <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3730      	adds	r7, #48	@ 0x30
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	08007fdb 	.word	0x08007fdb
 80078b8:	0800804d 	.word	0x0800804d
 80078bc:	004005ff 	.word	0x004005ff
 80078c0:	4225858c 	.word	0x4225858c

080078c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08c      	sub	sp, #48	@ 0x30
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d107      	bne.n	80078ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e0c1      	b.n	8007a70 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	f040 80ba 	bne.w	8007a6e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	441a      	add	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790a:	429a      	cmp	r2, r3
 800790c:	d907      	bls.n	800791e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007912:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e0a8      	b.n	8007a70 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2203      	movs	r2, #3
 8007922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2200      	movs	r2, #0
 800792c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 021a 	orr.w	r2, r2, #26
 800793c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007942:	4a4d      	ldr	r2, [pc, #308]	@ (8007a78 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007944:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794a:	4a4c      	ldr	r2, [pc, #304]	@ (8007a7c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800794c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007952:	2200      	movs	r2, #0
 8007954:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795a:	2b01      	cmp	r3, #1
 800795c:	d002      	beq.n	8007964 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800795e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007960:	025b      	lsls	r3, r3, #9
 8007962:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d90a      	bls.n	8007980 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	22a0      	movs	r2, #160	@ 0xa0
 800796e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007976:	4618      	mov	r0, r3
 8007978:	f002 f974 	bl	8009c64 <SDMMC_CmdWriteMultiBlock>
 800797c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800797e:	e009      	b.n	8007994 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2290      	movs	r2, #144	@ 0x90
 8007984:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800798c:	4618      	mov	r0, r3
 800798e:	f002 f947 	bl	8009c20 <SDMMC_CmdWriteSingleBlock>
 8007992:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d012      	beq.n	80079c0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a38      	ldr	r2, [pc, #224]	@ (8007a80 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80079a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a8:	431a      	orrs	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e057      	b.n	8007a70 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80079c0:	4b30      	ldr	r3, [pc, #192]	@ (8007a84 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80079c2:	2201      	movs	r2, #1
 80079c4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ca:	2240      	movs	r2, #64	@ 0x40
 80079cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3380      	adds	r3, #128	@ 0x80
 80079f6:	461a      	mov	r2, r3
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	025b      	lsls	r3, r3, #9
 80079fc:	089b      	lsrs	r3, r3, #2
 80079fe:	f7fa fb23 	bl	8002048 <HAL_DMA_Start_IT>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01a      	beq.n	8007a3e <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 021a 	bic.w	r2, r2, #26
 8007a16:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a18      	ldr	r2, [pc, #96]	@ (8007a80 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007a1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e018      	b.n	8007a70 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a42:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	025b      	lsls	r3, r3, #9
 8007a48:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007a4a:	2390      	movs	r3, #144	@ 0x90
 8007a4c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007a56:	2301      	movs	r3, #1
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f107 0210 	add.w	r2, r7, #16
 8007a62:	4611      	mov	r1, r2
 8007a64:	4618      	mov	r0, r3
 8007a66:	f002 f849 	bl	8009afc <SDIO_ConfigData>

      return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e000      	b.n	8007a70 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007a6e:	2302      	movs	r3, #2
  }
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3730      	adds	r7, #48	@ 0x30
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	08007fb1 	.word	0x08007fb1
 8007a7c:	0800804d 	.word	0x0800804d
 8007a80:	004005ff 	.word	0x004005ff
 8007a84:	4225858c 	.word	0x4225858c

08007a88 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aaa:	0f9b      	lsrs	r3, r3, #30
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab6:	0e9b      	lsrs	r3, r3, #26
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ac8:	0e1b      	lsrs	r3, r3, #24
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f003 0303 	and.w	r3, r3, #3
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ada:	0c1b      	lsrs	r3, r3, #16
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ae6:	0a1b      	lsrs	r3, r3, #8
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b08:	0c1b      	lsrs	r3, r3, #16
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 030f 	and.w	r3, r3, #15
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b1a:	0bdb      	lsrs	r3, r3, #15
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b2c:	0b9b      	lsrs	r3, r3, #14
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b3e:	0b5b      	lsrs	r3, r3, #13
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b50:	0b1b      	lsrs	r3, r3, #12
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2200      	movs	r2, #0
 8007b62:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d163      	bne.n	8007c34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b70:	009a      	lsls	r2, r3, #2
 8007b72:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007b76:	4013      	ands	r3, r2
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007b7c:	0f92      	lsrs	r2, r2, #30
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b88:	0edb      	lsrs	r3, r3, #27
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b9a:	0e1b      	lsrs	r3, r3, #24
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bac:	0d5b      	lsrs	r3, r3, #21
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bbe:	0c9b      	lsrs	r3, r3, #18
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bd0:	0bdb      	lsrs	r3, r3, #15
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 0307 	and.w	r3, r3, #7
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	7e1b      	ldrb	r3, [r3, #24]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007bfe:	fb03 f202 	mul.w	r2, r3, r2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	7a1b      	ldrb	r3, [r3, #8]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	2201      	movs	r2, #1
 8007c12:	409a      	lsls	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007c20:	0a52      	lsrs	r2, r2, #9
 8007c22:	fb03 f202 	mul.w	r2, r3, r2
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c30:	661a      	str	r2, [r3, #96]	@ 0x60
 8007c32:	e031      	b.n	8007c98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d11d      	bne.n	8007c78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c4a:	0c1b      	lsrs	r3, r3, #16
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	3301      	adds	r3, #1
 8007c58:	029a      	lsls	r2, r3, #10
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c6c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	661a      	str	r2, [r3, #96]	@ 0x60
 8007c76:	e00f      	b.n	8007c98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a58      	ldr	r2, [pc, #352]	@ (8007de0 <HAL_SD_GetCardCSD+0x344>)
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e09d      	b.n	8007dd4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c9c:	0b9b      	lsrs	r3, r3, #14
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cae:	09db      	lsrs	r3, r3, #7
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd0:	0fdb      	lsrs	r3, r3, #31
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cdc:	0f5b      	lsrs	r3, r3, #29
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cee:	0e9b      	lsrs	r3, r3, #26
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d00:	0d9b      	lsrs	r3, r3, #22
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f003 030f 	and.w	r3, r3, #15
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d12:	0d5b      	lsrs	r3, r3, #21
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2e:	0c1b      	lsrs	r3, r3, #16
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d42:	0bdb      	lsrs	r3, r3, #15
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d56:	0b9b      	lsrs	r3, r3, #14
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6a:	0b5b      	lsrs	r3, r3, #13
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d7e:	0b1b      	lsrs	r3, r3, #12
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d92:	0a9b      	lsrs	r3, r3, #10
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	004005ff 	.word	0x004005ff

08007de4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007e3c:	b5b0      	push	{r4, r5, r7, lr}
 8007e3e:	b08e      	sub	sp, #56	@ 0x38
 8007e40:	af04      	add	r7, sp, #16
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2203      	movs	r2, #3
 8007e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d02e      	beq.n	8007eba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e62:	d106      	bne.n	8007e72 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e70:	e029      	b.n	8007ec6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e78:	d10a      	bne.n	8007e90 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fabc 	bl	80083f8 <SD_WideBus_Enable>
 8007e80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e8e:	e01a      	b.n	8007ec6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 faf9 	bl	800848e <SD_WideBus_Disable>
 8007e9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007eaa:	e00c      	b.n	8007ec6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8007eb8:	e005      	b.n	8007ec6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00b      	beq.n	8007ee6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a26      	ldr	r2, [pc, #152]	@ (8007f6c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007ed4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ee4:	e01f      	b.n	8007f26 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681d      	ldr	r5, [r3, #0]
 8007f0c:	466c      	mov	r4, sp
 8007f0e:	f107 0314 	add.w	r3, r7, #20
 8007f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f1a:	f107 0308 	add.w	r3, r7, #8
 8007f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f20:	4628      	mov	r0, r5
 8007f22:	f001 fd4d 	bl	80099c0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 fe10 	bl	8009b54 <SDMMC_CmdBlockLength>
 8007f34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00c      	beq.n	8007f56 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a0a      	ldr	r2, [pc, #40]	@ (8007f6c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007f42:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8007f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3728      	adds	r7, #40	@ 0x28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bdb0      	pop	{r4, r5, r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	004005ff 	.word	0x004005ff

08007f70 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007f7c:	f107 030c 	add.w	r3, r7, #12
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fa10 	bl	80083a8 <SD_SendStatus>
 8007f88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	0a5b      	lsrs	r3, r3, #9
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007fa6:	693b      	ldr	r3, [r7, #16]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007fce:	bf00      	nop
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fec:	2b82      	cmp	r3, #130	@ 0x82
 8007fee:	d111      	bne.n	8008014 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 fe57 	bl	8009ca8 <SDMMC_CmdStopTransfer>
 8007ffa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d008      	beq.n	8008014 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	431a      	orrs	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7ff fd3a 	bl	8007a88 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0208 	bic.w	r2, r2, #8
 8008022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f240 523a 	movw	r2, #1338	@ 0x53a
 800802c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f003 fc0d 	bl	800b85c <HAL_SD_RxCpltCallback>
#endif
}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008058:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fa f84c 	bl	80020f8 <HAL_DMA_GetError>
 8008060:	4603      	mov	r3, r0
 8008062:	2b02      	cmp	r3, #2
 8008064:	d03e      	beq.n	80080e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008074:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d002      	beq.n	8008082 <SD_DMAError+0x36>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d12d      	bne.n	80080de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a19      	ldr	r2, [pc, #100]	@ (80080ec <SD_DMAError+0xa0>)
 8008088:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008098:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80080a6:	6978      	ldr	r0, [r7, #20]
 80080a8:	f7ff ff62 	bl	8007f70 <HAL_SD_GetCardState>
 80080ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b06      	cmp	r3, #6
 80080b2:	d002      	beq.n	80080ba <SD_DMAError+0x6e>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d10a      	bne.n	80080d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 fdf2 	bl	8009ca8 <SDMMC_CmdStopTransfer>
 80080c4:	4602      	mov	r2, r0
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ca:	431a      	orrs	r2, r3
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2200      	movs	r2, #0
 80080dc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80080de:	6978      	ldr	r0, [r7, #20]
 80080e0:	f7ff fcd2 	bl	8007a88 <HAL_SD_ErrorCallback>
#endif
  }
}
 80080e4:	bf00      	nop
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	004005ff 	.word	0x004005ff

080080f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080f0:	b5b0      	push	{r4, r5, r7, lr}
 80080f2:	b094      	sub	sp, #80	@ 0x50
 80080f4:	af04      	add	r7, sp, #16
 80080f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80080f8:	2301      	movs	r3, #1
 80080fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f001 fca3 	bl	8009a4c <SDIO_GetPowerState>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800810c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008110:	e0b8      	b.n	8008284 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008116:	2b03      	cmp	r3, #3
 8008118:	d02f      	beq.n	800817a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f001 fecc 	bl	8009ebc <SDMMC_CmdSendCID>
 8008124:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <SD_InitCard+0x40>
    {
      return errorstate;
 800812c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800812e:	e0a9      	b.n	8008284 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f001 fccd 	bl	8009ad6 <SDIO_GetResponse>
 800813c:	4602      	mov	r2, r0
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2104      	movs	r1, #4
 8008148:	4618      	mov	r0, r3
 800814a:	f001 fcc4 	bl	8009ad6 <SDIO_GetResponse>
 800814e:	4602      	mov	r2, r0
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2108      	movs	r1, #8
 800815a:	4618      	mov	r0, r3
 800815c:	f001 fcbb 	bl	8009ad6 <SDIO_GetResponse>
 8008160:	4602      	mov	r2, r0
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	210c      	movs	r1, #12
 800816c:	4618      	mov	r0, r3
 800816e:	f001 fcb2 	bl	8009ad6 <SDIO_GetResponse>
 8008172:	4602      	mov	r2, r0
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800817e:	2b03      	cmp	r3, #3
 8008180:	d00d      	beq.n	800819e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f107 020e 	add.w	r2, r7, #14
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f001 fed2 	bl	8009f36 <SDMMC_CmdSetRelAdd>
 8008192:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <SD_InitCard+0xae>
    {
      return errorstate;
 800819a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800819c:	e072      	b.n	8008284 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d036      	beq.n	8008214 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80081a6:	89fb      	ldrh	r3, [r7, #14]
 80081a8:	461a      	mov	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081b6:	041b      	lsls	r3, r3, #16
 80081b8:	4619      	mov	r1, r3
 80081ba:	4610      	mov	r0, r2
 80081bc:	f001 fe9c 	bl	8009ef8 <SDMMC_CmdSendCSD>
 80081c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80081c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ca:	e05b      	b.n	8008284 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2100      	movs	r1, #0
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 fc7f 	bl	8009ad6 <SDIO_GetResponse>
 80081d8:	4602      	mov	r2, r0
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2104      	movs	r1, #4
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 fc76 	bl	8009ad6 <SDIO_GetResponse>
 80081ea:	4602      	mov	r2, r0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2108      	movs	r1, #8
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 fc6d 	bl	8009ad6 <SDIO_GetResponse>
 80081fc:	4602      	mov	r2, r0
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	210c      	movs	r1, #12
 8008208:	4618      	mov	r0, r3
 800820a:	f001 fc64 	bl	8009ad6 <SDIO_GetResponse>
 800820e:	4602      	mov	r2, r0
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2104      	movs	r1, #4
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fc5b 	bl	8009ad6 <SDIO_GetResponse>
 8008220:	4603      	mov	r3, r0
 8008222:	0d1a      	lsrs	r2, r3, #20
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008228:	f107 0310 	add.w	r3, r7, #16
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fc34 	bl	8007a9c <HAL_SD_GetCardCSD>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800823a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800823e:	e021      	b.n	8008284 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6819      	ldr	r1, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008248:	041b      	lsls	r3, r3, #16
 800824a:	2200      	movs	r2, #0
 800824c:	461c      	mov	r4, r3
 800824e:	4615      	mov	r5, r2
 8008250:	4622      	mov	r2, r4
 8008252:	462b      	mov	r3, r5
 8008254:	4608      	mov	r0, r1
 8008256:	f001 fd49 	bl	8009cec <SDMMC_CmdSelDesel>
 800825a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800825c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <SD_InitCard+0x176>
  {
    return errorstate;
 8008262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008264:	e00e      	b.n	8008284 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681d      	ldr	r5, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	466c      	mov	r4, sp
 800826e:	f103 0210 	add.w	r2, r3, #16
 8008272:	ca07      	ldmia	r2, {r0, r1, r2}
 8008274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008278:	3304      	adds	r3, #4
 800827a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800827c:	4628      	mov	r0, r5
 800827e:	f001 fb9f 	bl	80099c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3740      	adds	r7, #64	@ 0x40
 8008288:	46bd      	mov	sp, r7
 800828a:	bdb0      	pop	{r4, r5, r7, pc}

0800828c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	2300      	movs	r3, #0
 800829e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fd44 	bl	8009d32 <SDMMC_CmdGoIdleState>
 80082aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	e072      	b.n	800839c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fd57 	bl	8009d6e <SDMMC_CmdOperCond>
 80082c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00d      	beq.n	80082e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 fd2d 	bl	8009d32 <SDMMC_CmdGoIdleState>
 80082d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	e05b      	b.n	800839c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d137      	bne.n	8008362 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2100      	movs	r1, #0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 fd57 	bl	8009dac <SDMMC_CmdAppCommand>
 80082fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d02d      	beq.n	8008362 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008306:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800830a:	e047      	b.n	800839c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fd4a 	bl	8009dac <SDMMC_CmdAppCommand>
 8008318:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <SD_PowerON+0x98>
    {
      return errorstate;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	e03b      	b.n	800839c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	491e      	ldr	r1, [pc, #120]	@ (80083a4 <SD_PowerON+0x118>)
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fd60 	bl	8009df0 <SDMMC_CmdAppOperCommand>
 8008330:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008338:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800833c:	e02e      	b.n	800839c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2100      	movs	r1, #0
 8008344:	4618      	mov	r0, r3
 8008346:	f001 fbc6 	bl	8009ad6 <SDIO_GetResponse>
 800834a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	0fdb      	lsrs	r3, r3, #31
 8008350:	2b01      	cmp	r3, #1
 8008352:	d101      	bne.n	8008358 <SD_PowerON+0xcc>
 8008354:	2301      	movs	r3, #1
 8008356:	e000      	b.n	800835a <SD_PowerON+0xce>
 8008358:	2300      	movs	r3, #0
 800835a:	613b      	str	r3, [r7, #16]

    count++;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	3301      	adds	r3, #1
 8008360:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008368:	4293      	cmp	r3, r2
 800836a:	d802      	bhi.n	8008372 <SD_PowerON+0xe6>
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0cc      	beq.n	800830c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008378:	4293      	cmp	r3, r2
 800837a:	d902      	bls.n	8008382 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800837c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008380:	e00c      	b.n	800839c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	645a      	str	r2, [r3, #68]	@ 0x44
 8008392:	e002      	b.n	800839a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	c1100000 	.word	0xc1100000

080083a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80083b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80083bc:	e018      	b.n	80083f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f001 fdd4 	bl	8009f78 <SDMMC_CmdSendStatus>
 80083d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	e009      	b.n	80083f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2100      	movs	r1, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 fb77 	bl	8009ad6 <SDIO_GetResponse>
 80083e8:	4602      	mov	r2, r0
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	2300      	movs	r3, #0
 8008406:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f001 fb61 	bl	8009ad6 <SDIO_GetResponse>
 8008414:	4603      	mov	r3, r0
 8008416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800841a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800841e:	d102      	bne.n	8008426 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008420:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008424:	e02f      	b.n	8008486 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008426:	f107 030c 	add.w	r3, r7, #12
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f879 	bl	8008524 <SD_FindSCR>
 8008432:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	e023      	b.n	8008486 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01c      	beq.n	8008482 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008450:	041b      	lsls	r3, r3, #16
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f001 fca9 	bl	8009dac <SDMMC_CmdAppCommand>
 800845a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	e00f      	b.n	8008486 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2102      	movs	r1, #2
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fce2 	bl	8009e36 <SDMMC_CmdBusWidth>
 8008472:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	e003      	b.n	8008486 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800847e:	2300      	movs	r3, #0
 8008480:	e001      	b.n	8008486 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008482:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b086      	sub	sp, #24
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	2300      	movs	r3, #0
 800849c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2100      	movs	r1, #0
 80084a4:	4618      	mov	r0, r3
 80084a6:	f001 fb16 	bl	8009ad6 <SDIO_GetResponse>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084b4:	d102      	bne.n	80084bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084ba:	e02f      	b.n	800851c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80084bc:	f107 030c 	add.w	r3, r7, #12
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f82e 	bl	8008524 <SD_FindSCR>
 80084c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	e023      	b.n	800851c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d01c      	beq.n	8008518 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	4619      	mov	r1, r3
 80084ea:	4610      	mov	r0, r2
 80084ec:	f001 fc5e 	bl	8009dac <SDMMC_CmdAppCommand>
 80084f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	e00f      	b.n	800851c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2100      	movs	r1, #0
 8008502:	4618      	mov	r0, r3
 8008504:	f001 fc97 	bl	8009e36 <SDMMC_CmdBusWidth>
 8008508:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	e003      	b.n	800851c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008514:	2300      	movs	r3, #0
 8008516:	e001      	b.n	800851c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008518:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b08f      	sub	sp, #60	@ 0x3c
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800852e:	f7f9 fc5d 	bl	8001dec <HAL_GetTick>
 8008532:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008538:	2300      	movs	r3, #0
 800853a:	60bb      	str	r3, [r7, #8]
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2108      	movs	r1, #8
 800854a:	4618      	mov	r0, r3
 800854c:	f001 fb02 	bl	8009b54 <SDMMC_CmdBlockLength>
 8008550:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855a:	e0b2      	b.n	80086c2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008564:	041b      	lsls	r3, r3, #16
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f001 fc1f 	bl	8009dac <SDMMC_CmdAppCommand>
 800856e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008578:	e0a3      	b.n	80086c2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800857a:	f04f 33ff 	mov.w	r3, #4294967295
 800857e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008580:	2308      	movs	r3, #8
 8008582:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008584:	2330      	movs	r3, #48	@ 0x30
 8008586:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008588:	2302      	movs	r3, #2
 800858a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800858c:	2300      	movs	r3, #0
 800858e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008590:	2301      	movs	r3, #1
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f107 0210 	add.w	r2, r7, #16
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 faac 	bl	8009afc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 fc66 	bl	8009e7a <SDMMC_CmdSendSCR>
 80085ae:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d02a      	beq.n	800860c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80085b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b8:	e083      	b.n	80086c2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00f      	beq.n	80085e8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6819      	ldr	r1, [r3, #0]
 80085cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	f107 0208 	add.w	r2, r7, #8
 80085d4:	18d4      	adds	r4, r2, r3
 80085d6:	4608      	mov	r0, r1
 80085d8:	f001 fa1d 	bl	8009a16 <SDIO_ReadFIFO>
 80085dc:	4603      	mov	r3, r0
 80085de:	6023      	str	r3, [r4, #0]
      index++;
 80085e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e2:	3301      	adds	r3, #1
 80085e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e6:	e006      	b.n	80085f6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d012      	beq.n	800861c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80085f6:	f7f9 fbf9 	bl	8001dec <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d102      	bne.n	800860c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008606:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800860a:	e05a      	b.n	80086c2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008612:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0cf      	beq.n	80085ba <SD_FindSCR+0x96>
 800861a:	e000      	b.n	800861e <SD_FindSCR+0xfa>
      break;
 800861c:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008624:	f003 0308 	and.w	r3, r3, #8
 8008628:	2b00      	cmp	r3, #0
 800862a:	d005      	beq.n	8008638 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2208      	movs	r2, #8
 8008632:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008634:	2308      	movs	r3, #8
 8008636:	e044      	b.n	80086c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d005      	beq.n	8008652 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2202      	movs	r2, #2
 800864c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800864e:	2302      	movs	r3, #2
 8008650:	e037      	b.n	80086c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2220      	movs	r2, #32
 8008666:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008668:	2320      	movs	r3, #32
 800866a:	e02a      	b.n	80086c2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008674:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	061a      	lsls	r2, r3, #24
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008682:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800868c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	0e1b      	lsrs	r3, r3, #24
 8008692:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008696:	601a      	str	r2, [r3, #0]
    scr++;
 8008698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869a:	3304      	adds	r3, #4
 800869c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	061a      	lsls	r2, r3, #24
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80086aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	0e1b      	lsrs	r3, r3, #24
 80086ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	373c      	adds	r7, #60	@ 0x3c
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd90      	pop	{r4, r7, pc}

080086ca <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e025      	b.n	800872a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d106      	bne.n	80086f8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7f9 f99e 	bl	8001a34 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3304      	adds	r3, #4
 8008708:	4619      	mov	r1, r3
 800870a:	4610      	mov	r0, r2
 800870c:	f001 f892 	bl	8009834 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	461a      	mov	r2, r3
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	f001 f8e7 	bl	80098ee <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e041      	b.n	80087c8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d106      	bne.n	800875e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7f9 f823 	bl	80017a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2202      	movs	r2, #2
 8008762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3304      	adds	r3, #4
 800876e:	4619      	mov	r1, r3
 8008770:	4610      	mov	r0, r2
 8008772:	f000 fa7d 	bl	8008c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d001      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e04e      	b.n	8008886 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0201 	orr.w	r2, r2, #1
 80087fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a23      	ldr	r2, [pc, #140]	@ (8008894 <HAL_TIM_Base_Start_IT+0xc4>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d022      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008812:	d01d      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a1f      	ldr	r2, [pc, #124]	@ (8008898 <HAL_TIM_Base_Start_IT+0xc8>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d018      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1e      	ldr	r2, [pc, #120]	@ (800889c <HAL_TIM_Base_Start_IT+0xcc>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d013      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a1c      	ldr	r2, [pc, #112]	@ (80088a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00e      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a1b      	ldr	r2, [pc, #108]	@ (80088a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a19      	ldr	r2, [pc, #100]	@ (80088a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a18      	ldr	r2, [pc, #96]	@ (80088ac <HAL_TIM_Base_Start_IT+0xdc>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d111      	bne.n	8008874 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b06      	cmp	r3, #6
 8008860:	d010      	beq.n	8008884 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f042 0201 	orr.w	r2, r2, #1
 8008870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008872:	e007      	b.n	8008884 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0201 	orr.w	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40010000 	.word	0x40010000
 8008898:	40000400 	.word	0x40000400
 800889c:	40000800 	.word	0x40000800
 80088a0:	40000c00 	.word	0x40000c00
 80088a4:	40010400 	.word	0x40010400
 80088a8:	40014000 	.word	0x40014000
 80088ac:	40001800 	.word	0x40001800

080088b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d020      	beq.n	8008914 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f003 0302 	and.w	r3, r3, #2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d01b      	beq.n	8008914 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f06f 0202 	mvn.w	r2, #2
 80088e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f003 0303 	and.w	r3, r3, #3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f999 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 8008900:	e005      	b.n	800890e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f98b 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f99c 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f003 0304 	and.w	r3, r3, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	d020      	beq.n	8008960 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01b      	beq.n	8008960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f06f 0204 	mvn.w	r2, #4
 8008930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2202      	movs	r2, #2
 8008936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f973 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 800894c:	e005      	b.n	800895a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f965 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f976 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d020      	beq.n	80089ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f003 0308 	and.w	r3, r3, #8
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01b      	beq.n	80089ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f06f 0208 	mvn.w	r2, #8
 800897c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2204      	movs	r2, #4
 8008982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f94d 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 8008998:	e005      	b.n	80089a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f93f 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f950 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f003 0310 	and.w	r3, r3, #16
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d020      	beq.n	80089f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f003 0310 	and.w	r3, r3, #16
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01b      	beq.n	80089f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f06f 0210 	mvn.w	r2, #16
 80089c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2208      	movs	r2, #8
 80089ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f927 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 80089e4:	e005      	b.n	80089f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f919 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f92a 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00c      	beq.n	8008a1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f06f 0201 	mvn.w	r2, #1
 8008a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7f8 fc5e 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00c      	beq.n	8008a40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d007      	beq.n	8008a40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fae4 	bl	8009008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00c      	beq.n	8008a64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d007      	beq.n	8008a64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f8fb 	bl	8008c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00c      	beq.n	8008a88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f003 0320 	and.w	r3, r3, #32
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f06f 0220 	mvn.w	r2, #32
 8008a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fab6 	bl	8008ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a88:	bf00      	nop
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d101      	bne.n	8008aac <HAL_TIM_ConfigClockSource+0x1c>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e0b4      	b.n	8008c16 <HAL_TIM_ConfigClockSource+0x186>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ae4:	d03e      	beq.n	8008b64 <HAL_TIM_ConfigClockSource+0xd4>
 8008ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aea:	f200 8087 	bhi.w	8008bfc <HAL_TIM_ConfigClockSource+0x16c>
 8008aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008af2:	f000 8086 	beq.w	8008c02 <HAL_TIM_ConfigClockSource+0x172>
 8008af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008afa:	d87f      	bhi.n	8008bfc <HAL_TIM_ConfigClockSource+0x16c>
 8008afc:	2b70      	cmp	r3, #112	@ 0x70
 8008afe:	d01a      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0xa6>
 8008b00:	2b70      	cmp	r3, #112	@ 0x70
 8008b02:	d87b      	bhi.n	8008bfc <HAL_TIM_ConfigClockSource+0x16c>
 8008b04:	2b60      	cmp	r3, #96	@ 0x60
 8008b06:	d050      	beq.n	8008baa <HAL_TIM_ConfigClockSource+0x11a>
 8008b08:	2b60      	cmp	r3, #96	@ 0x60
 8008b0a:	d877      	bhi.n	8008bfc <HAL_TIM_ConfigClockSource+0x16c>
 8008b0c:	2b50      	cmp	r3, #80	@ 0x50
 8008b0e:	d03c      	beq.n	8008b8a <HAL_TIM_ConfigClockSource+0xfa>
 8008b10:	2b50      	cmp	r3, #80	@ 0x50
 8008b12:	d873      	bhi.n	8008bfc <HAL_TIM_ConfigClockSource+0x16c>
 8008b14:	2b40      	cmp	r3, #64	@ 0x40
 8008b16:	d058      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x13a>
 8008b18:	2b40      	cmp	r3, #64	@ 0x40
 8008b1a:	d86f      	bhi.n	8008bfc <HAL_TIM_ConfigClockSource+0x16c>
 8008b1c:	2b30      	cmp	r3, #48	@ 0x30
 8008b1e:	d064      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0x15a>
 8008b20:	2b30      	cmp	r3, #48	@ 0x30
 8008b22:	d86b      	bhi.n	8008bfc <HAL_TIM_ConfigClockSource+0x16c>
 8008b24:	2b20      	cmp	r3, #32
 8008b26:	d060      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0x15a>
 8008b28:	2b20      	cmp	r3, #32
 8008b2a:	d867      	bhi.n	8008bfc <HAL_TIM_ConfigClockSource+0x16c>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d05c      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0x15a>
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	d05a      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0x15a>
 8008b34:	e062      	b.n	8008bfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b46:	f000 f9b9 	bl	8008ebc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	609a      	str	r2, [r3, #8]
      break;
 8008b62:	e04f      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b74:	f000 f9a2 	bl	8008ebc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b86:	609a      	str	r2, [r3, #8]
      break;
 8008b88:	e03c      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b96:	461a      	mov	r2, r3
 8008b98:	f000 f916 	bl	8008dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2150      	movs	r1, #80	@ 0x50
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 f96f 	bl	8008e86 <TIM_ITRx_SetConfig>
      break;
 8008ba8:	e02c      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f000 f935 	bl	8008e26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2160      	movs	r1, #96	@ 0x60
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f95f 	bl	8008e86 <TIM_ITRx_SetConfig>
      break;
 8008bc8:	e01c      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f000 f8f6 	bl	8008dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2140      	movs	r1, #64	@ 0x40
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f94f 	bl	8008e86 <TIM_ITRx_SetConfig>
      break;
 8008be8:	e00c      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	f000 f946 	bl	8008e86 <TIM_ITRx_SetConfig>
      break;
 8008bfa:	e003      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008c00:	e000      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b083      	sub	sp, #12
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a46      	ldr	r2, [pc, #280]	@ (8008d9c <TIM_Base_SetConfig+0x12c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d013      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c8e:	d00f      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a43      	ldr	r2, [pc, #268]	@ (8008da0 <TIM_Base_SetConfig+0x130>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00b      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a42      	ldr	r2, [pc, #264]	@ (8008da4 <TIM_Base_SetConfig+0x134>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d007      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a41      	ldr	r2, [pc, #260]	@ (8008da8 <TIM_Base_SetConfig+0x138>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a40      	ldr	r2, [pc, #256]	@ (8008dac <TIM_Base_SetConfig+0x13c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d108      	bne.n	8008cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a35      	ldr	r2, [pc, #212]	@ (8008d9c <TIM_Base_SetConfig+0x12c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d02b      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cd0:	d027      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a32      	ldr	r2, [pc, #200]	@ (8008da0 <TIM_Base_SetConfig+0x130>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d023      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a31      	ldr	r2, [pc, #196]	@ (8008da4 <TIM_Base_SetConfig+0x134>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d01f      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a30      	ldr	r2, [pc, #192]	@ (8008da8 <TIM_Base_SetConfig+0x138>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d01b      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a2f      	ldr	r2, [pc, #188]	@ (8008dac <TIM_Base_SetConfig+0x13c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d017      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8008db0 <TIM_Base_SetConfig+0x140>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d013      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8008db4 <TIM_Base_SetConfig+0x144>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00f      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a2c      	ldr	r2, [pc, #176]	@ (8008db8 <TIM_Base_SetConfig+0x148>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00b      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8008dbc <TIM_Base_SetConfig+0x14c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d007      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a2a      	ldr	r2, [pc, #168]	@ (8008dc0 <TIM_Base_SetConfig+0x150>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d003      	beq.n	8008d22 <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a29      	ldr	r2, [pc, #164]	@ (8008dc4 <TIM_Base_SetConfig+0x154>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d108      	bne.n	8008d34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a10      	ldr	r2, [pc, #64]	@ (8008d9c <TIM_Base_SetConfig+0x12c>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d003      	beq.n	8008d68 <TIM_Base_SetConfig+0xf8>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a12      	ldr	r2, [pc, #72]	@ (8008dac <TIM_Base_SetConfig+0x13c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d103      	bne.n	8008d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	691a      	ldr	r2, [r3, #16]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d105      	bne.n	8008d8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	f023 0201 	bic.w	r2, r3, #1
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	611a      	str	r2, [r3, #16]
  }
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40000400 	.word	0x40000400
 8008da4:	40000800 	.word	0x40000800
 8008da8:	40000c00 	.word	0x40000c00
 8008dac:	40010400 	.word	0x40010400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400
 8008db8:	40014800 	.word	0x40014800
 8008dbc:	40001800 	.word	0x40001800
 8008dc0:	40001c00 	.word	0x40001c00
 8008dc4:	40002000 	.word	0x40002000

08008dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	f023 0201 	bic.w	r2, r3, #1
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f023 030a 	bic.w	r3, r3, #10
 8008e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	621a      	str	r2, [r3, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b087      	sub	sp, #28
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	60b9      	str	r1, [r7, #8]
 8008e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	f023 0210 	bic.w	r2, r3, #16
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	031b      	lsls	r3, r3, #12
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	621a      	str	r2, [r3, #32]
}
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	f043 0307 	orr.w	r3, r3, #7
 8008ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	609a      	str	r2, [r3, #8]
}
 8008eb0:	bf00      	nop
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	021a      	lsls	r2, r3, #8
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	609a      	str	r2, [r3, #8]
}
 8008ef0:	bf00      	nop
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e05a      	b.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a21      	ldr	r2, [pc, #132]	@ (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d022      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f60:	d01d      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a1d      	ldr	r2, [pc, #116]	@ (8008fdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d018      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1b      	ldr	r2, [pc, #108]	@ (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d013      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00e      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a18      	ldr	r2, [pc, #96]	@ (8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d009      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a17      	ldr	r2, [pc, #92]	@ (8008fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d004      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a15      	ldr	r2, [pc, #84]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	40010000 	.word	0x40010000
 8008fdc:	40000400 	.word	0x40000400
 8008fe0:	40000800 	.word	0x40000800
 8008fe4:	40000c00 	.word	0x40000c00
 8008fe8:	40010400 	.word	0x40010400
 8008fec:	40014000 	.word	0x40014000
 8008ff0:	40001800 	.word	0x40001800

08008ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e042      	b.n	80090b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d106      	bne.n	8009048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7f8 fbd0 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2224      	movs	r2, #36	@ 0x24
 800904c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68da      	ldr	r2, [r3, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800905e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f973 	bl	800934c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695a      	ldr	r2, [r3, #20]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2220      	movs	r2, #32
 80090a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08a      	sub	sp, #40	@ 0x28
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	603b      	str	r3, [r7, #0]
 80090c8:	4613      	mov	r3, r2
 80090ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b20      	cmp	r3, #32
 80090da:	d175      	bne.n	80091c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_UART_Transmit+0x2c>
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e06e      	b.n	80091ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2221      	movs	r2, #33	@ 0x21
 80090f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090fa:	f7f8 fe77 	bl	8001dec <HAL_GetTick>
 80090fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	88fa      	ldrh	r2, [r7, #6]
 8009104:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	88fa      	ldrh	r2, [r7, #6]
 800910a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009114:	d108      	bne.n	8009128 <HAL_UART_Transmit+0x6c>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d104      	bne.n	8009128 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800911e:	2300      	movs	r3, #0
 8009120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	61bb      	str	r3, [r7, #24]
 8009126:	e003      	b.n	8009130 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800912c:	2300      	movs	r3, #0
 800912e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009130:	e02e      	b.n	8009190 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2200      	movs	r2, #0
 800913a:	2180      	movs	r1, #128	@ 0x80
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 f848 	bl	80091d2 <UART_WaitOnFlagUntilTimeout>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2220      	movs	r2, #32
 800914c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e03a      	b.n	80091ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009168:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	3302      	adds	r3, #2
 800916e:	61bb      	str	r3, [r7, #24]
 8009170:	e007      	b.n	8009182 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	781a      	ldrb	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	3301      	adds	r3, #1
 8009180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009186:	b29b      	uxth	r3, r3
 8009188:	3b01      	subs	r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1cb      	bne.n	8009132 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2200      	movs	r2, #0
 80091a2:	2140      	movs	r1, #64	@ 0x40
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f814 	bl	80091d2 <UART_WaitOnFlagUntilTimeout>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e006      	b.n	80091ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2220      	movs	r2, #32
 80091c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	e000      	b.n	80091ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80091c8:	2302      	movs	r3, #2
  }
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3720      	adds	r7, #32
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	4613      	mov	r3, r2
 80091e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e2:	e03b      	b.n	800925c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d037      	beq.n	800925c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ec:	f7f8 fdfe 	bl	8001dec <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	6a3a      	ldr	r2, [r7, #32]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d302      	bcc.n	8009202 <UART_WaitOnFlagUntilTimeout+0x30>
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e03a      	b.n	800927c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d023      	beq.n	800925c <UART_WaitOnFlagUntilTimeout+0x8a>
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b80      	cmp	r3, #128	@ 0x80
 8009218:	d020      	beq.n	800925c <UART_WaitOnFlagUntilTimeout+0x8a>
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2b40      	cmp	r3, #64	@ 0x40
 800921e:	d01d      	beq.n	800925c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0308 	and.w	r3, r3, #8
 800922a:	2b08      	cmp	r3, #8
 800922c:	d116      	bne.n	800925c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f81d 	bl	8009284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2208      	movs	r2, #8
 800924e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e00f      	b.n	800927c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	4013      	ands	r3, r2
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	429a      	cmp	r2, r3
 800926a:	bf0c      	ite	eq
 800926c:	2301      	moveq	r3, #1
 800926e:	2300      	movne	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	429a      	cmp	r2, r3
 8009278:	d0b4      	beq.n	80091e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009284:	b480      	push	{r7}
 8009286:	b095      	sub	sp, #84	@ 0x54
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	330c      	adds	r3, #12
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800929c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	330c      	adds	r3, #12
 80092aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80092ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092b4:	e841 2300 	strex	r3, r2, [r1]
 80092b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e5      	bne.n	800928c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3314      	adds	r3, #20
 80092c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	f023 0301 	bic.w	r3, r3, #1
 80092d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3314      	adds	r3, #20
 80092de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e5      	bne.n	80092c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d119      	bne.n	8009330 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	330c      	adds	r3, #12
 8009302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	e853 3f00 	ldrex	r3, [r3]
 800930a:	60bb      	str	r3, [r7, #8]
   return(result);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	f023 0310 	bic.w	r3, r3, #16
 8009312:	647b      	str	r3, [r7, #68]	@ 0x44
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	330c      	adds	r3, #12
 800931a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800931c:	61ba      	str	r2, [r7, #24]
 800931e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009320:	6979      	ldr	r1, [r7, #20]
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	e841 2300 	strex	r3, r2, [r1]
 8009328:	613b      	str	r3, [r7, #16]
   return(result);
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e5      	bne.n	80092fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2220      	movs	r2, #32
 8009334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800933e:	bf00      	nop
 8009340:	3754      	adds	r7, #84	@ 0x54
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
	...

0800934c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800934c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009350:	b0c0      	sub	sp, #256	@ 0x100
 8009352:	af00      	add	r7, sp, #0
 8009354:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009368:	68d9      	ldr	r1, [r3, #12]
 800936a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	ea40 0301 	orr.w	r3, r0, r1
 8009374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	431a      	orrs	r2, r3
 8009384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	431a      	orrs	r2, r3
 800938c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	4313      	orrs	r3, r2
 8009394:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80093a4:	f021 010c 	bic.w	r1, r1, #12
 80093a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80093b2:	430b      	orrs	r3, r1
 80093b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80093c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c6:	6999      	ldr	r1, [r3, #24]
 80093c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	ea40 0301 	orr.w	r3, r0, r1
 80093d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	4b8f      	ldr	r3, [pc, #572]	@ (8009618 <UART_SetConfig+0x2cc>)
 80093dc:	429a      	cmp	r2, r3
 80093de:	d005      	beq.n	80093ec <UART_SetConfig+0xa0>
 80093e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	4b8d      	ldr	r3, [pc, #564]	@ (800961c <UART_SetConfig+0x2d0>)
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d104      	bne.n	80093f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80093ec:	f7fd f9a8 	bl	8006740 <HAL_RCC_GetPCLK2Freq>
 80093f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80093f4:	e003      	b.n	80093fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093f6:	f7fd f98f 	bl	8006718 <HAL_RCC_GetPCLK1Freq>
 80093fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009408:	f040 810c 	bne.w	8009624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800940c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009410:	2200      	movs	r2, #0
 8009412:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009416:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800941a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800941e:	4622      	mov	r2, r4
 8009420:	462b      	mov	r3, r5
 8009422:	1891      	adds	r1, r2, r2
 8009424:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009426:	415b      	adcs	r3, r3
 8009428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800942a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800942e:	4621      	mov	r1, r4
 8009430:	eb12 0801 	adds.w	r8, r2, r1
 8009434:	4629      	mov	r1, r5
 8009436:	eb43 0901 	adc.w	r9, r3, r1
 800943a:	f04f 0200 	mov.w	r2, #0
 800943e:	f04f 0300 	mov.w	r3, #0
 8009442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800944a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800944e:	4690      	mov	r8, r2
 8009450:	4699      	mov	r9, r3
 8009452:	4623      	mov	r3, r4
 8009454:	eb18 0303 	adds.w	r3, r8, r3
 8009458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800945c:	462b      	mov	r3, r5
 800945e:	eb49 0303 	adc.w	r3, r9, r3
 8009462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009472:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800947a:	460b      	mov	r3, r1
 800947c:	18db      	adds	r3, r3, r3
 800947e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009480:	4613      	mov	r3, r2
 8009482:	eb42 0303 	adc.w	r3, r2, r3
 8009486:	657b      	str	r3, [r7, #84]	@ 0x54
 8009488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800948c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009490:	f7f6 feb6 	bl	8000200 <__aeabi_uldivmod>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4b61      	ldr	r3, [pc, #388]	@ (8009620 <UART_SetConfig+0x2d4>)
 800949a:	fba3 2302 	umull	r2, r3, r3, r2
 800949e:	095b      	lsrs	r3, r3, #5
 80094a0:	011c      	lsls	r4, r3, #4
 80094a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80094b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80094b4:	4642      	mov	r2, r8
 80094b6:	464b      	mov	r3, r9
 80094b8:	1891      	adds	r1, r2, r2
 80094ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80094bc:	415b      	adcs	r3, r3
 80094be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80094c4:	4641      	mov	r1, r8
 80094c6:	eb12 0a01 	adds.w	sl, r2, r1
 80094ca:	4649      	mov	r1, r9
 80094cc:	eb43 0b01 	adc.w	fp, r3, r1
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	f04f 0300 	mov.w	r3, #0
 80094d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094e4:	4692      	mov	sl, r2
 80094e6:	469b      	mov	fp, r3
 80094e8:	4643      	mov	r3, r8
 80094ea:	eb1a 0303 	adds.w	r3, sl, r3
 80094ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094f2:	464b      	mov	r3, r9
 80094f4:	eb4b 0303 	adc.w	r3, fp, r3
 80094f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80094fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009508:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800950c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009510:	460b      	mov	r3, r1
 8009512:	18db      	adds	r3, r3, r3
 8009514:	643b      	str	r3, [r7, #64]	@ 0x40
 8009516:	4613      	mov	r3, r2
 8009518:	eb42 0303 	adc.w	r3, r2, r3
 800951c:	647b      	str	r3, [r7, #68]	@ 0x44
 800951e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009526:	f7f6 fe6b 	bl	8000200 <__aeabi_uldivmod>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4611      	mov	r1, r2
 8009530:	4b3b      	ldr	r3, [pc, #236]	@ (8009620 <UART_SetConfig+0x2d4>)
 8009532:	fba3 2301 	umull	r2, r3, r3, r1
 8009536:	095b      	lsrs	r3, r3, #5
 8009538:	2264      	movs	r2, #100	@ 0x64
 800953a:	fb02 f303 	mul.w	r3, r2, r3
 800953e:	1acb      	subs	r3, r1, r3
 8009540:	00db      	lsls	r3, r3, #3
 8009542:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009546:	4b36      	ldr	r3, [pc, #216]	@ (8009620 <UART_SetConfig+0x2d4>)
 8009548:	fba3 2302 	umull	r2, r3, r3, r2
 800954c:	095b      	lsrs	r3, r3, #5
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009554:	441c      	add	r4, r3
 8009556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800955a:	2200      	movs	r2, #0
 800955c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009560:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009568:	4642      	mov	r2, r8
 800956a:	464b      	mov	r3, r9
 800956c:	1891      	adds	r1, r2, r2
 800956e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009570:	415b      	adcs	r3, r3
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009578:	4641      	mov	r1, r8
 800957a:	1851      	adds	r1, r2, r1
 800957c:	6339      	str	r1, [r7, #48]	@ 0x30
 800957e:	4649      	mov	r1, r9
 8009580:	414b      	adcs	r3, r1
 8009582:	637b      	str	r3, [r7, #52]	@ 0x34
 8009584:	f04f 0200 	mov.w	r2, #0
 8009588:	f04f 0300 	mov.w	r3, #0
 800958c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009590:	4659      	mov	r1, fp
 8009592:	00cb      	lsls	r3, r1, #3
 8009594:	4651      	mov	r1, sl
 8009596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800959a:	4651      	mov	r1, sl
 800959c:	00ca      	lsls	r2, r1, #3
 800959e:	4610      	mov	r0, r2
 80095a0:	4619      	mov	r1, r3
 80095a2:	4603      	mov	r3, r0
 80095a4:	4642      	mov	r2, r8
 80095a6:	189b      	adds	r3, r3, r2
 80095a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095ac:	464b      	mov	r3, r9
 80095ae:	460a      	mov	r2, r1
 80095b0:	eb42 0303 	adc.w	r3, r2, r3
 80095b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80095c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80095cc:	460b      	mov	r3, r1
 80095ce:	18db      	adds	r3, r3, r3
 80095d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095d2:	4613      	mov	r3, r2
 80095d4:	eb42 0303 	adc.w	r3, r2, r3
 80095d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80095de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80095e2:	f7f6 fe0d 	bl	8000200 <__aeabi_uldivmod>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009620 <UART_SetConfig+0x2d4>)
 80095ec:	fba3 1302 	umull	r1, r3, r3, r2
 80095f0:	095b      	lsrs	r3, r3, #5
 80095f2:	2164      	movs	r1, #100	@ 0x64
 80095f4:	fb01 f303 	mul.w	r3, r1, r3
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	3332      	adds	r3, #50	@ 0x32
 80095fe:	4a08      	ldr	r2, [pc, #32]	@ (8009620 <UART_SetConfig+0x2d4>)
 8009600:	fba2 2303 	umull	r2, r3, r2, r3
 8009604:	095b      	lsrs	r3, r3, #5
 8009606:	f003 0207 	and.w	r2, r3, #7
 800960a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4422      	add	r2, r4
 8009612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009614:	e106      	b.n	8009824 <UART_SetConfig+0x4d8>
 8009616:	bf00      	nop
 8009618:	40011000 	.word	0x40011000
 800961c:	40011400 	.word	0x40011400
 8009620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009628:	2200      	movs	r2, #0
 800962a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800962e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009636:	4642      	mov	r2, r8
 8009638:	464b      	mov	r3, r9
 800963a:	1891      	adds	r1, r2, r2
 800963c:	6239      	str	r1, [r7, #32]
 800963e:	415b      	adcs	r3, r3
 8009640:	627b      	str	r3, [r7, #36]	@ 0x24
 8009642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009646:	4641      	mov	r1, r8
 8009648:	1854      	adds	r4, r2, r1
 800964a:	4649      	mov	r1, r9
 800964c:	eb43 0501 	adc.w	r5, r3, r1
 8009650:	f04f 0200 	mov.w	r2, #0
 8009654:	f04f 0300 	mov.w	r3, #0
 8009658:	00eb      	lsls	r3, r5, #3
 800965a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800965e:	00e2      	lsls	r2, r4, #3
 8009660:	4614      	mov	r4, r2
 8009662:	461d      	mov	r5, r3
 8009664:	4643      	mov	r3, r8
 8009666:	18e3      	adds	r3, r4, r3
 8009668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800966c:	464b      	mov	r3, r9
 800966e:	eb45 0303 	adc.w	r3, r5, r3
 8009672:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009682:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009692:	4629      	mov	r1, r5
 8009694:	008b      	lsls	r3, r1, #2
 8009696:	4621      	mov	r1, r4
 8009698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800969c:	4621      	mov	r1, r4
 800969e:	008a      	lsls	r2, r1, #2
 80096a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80096a4:	f7f6 fdac 	bl	8000200 <__aeabi_uldivmod>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4b60      	ldr	r3, [pc, #384]	@ (8009830 <UART_SetConfig+0x4e4>)
 80096ae:	fba3 2302 	umull	r2, r3, r3, r2
 80096b2:	095b      	lsrs	r3, r3, #5
 80096b4:	011c      	lsls	r4, r3, #4
 80096b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80096c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80096c8:	4642      	mov	r2, r8
 80096ca:	464b      	mov	r3, r9
 80096cc:	1891      	adds	r1, r2, r2
 80096ce:	61b9      	str	r1, [r7, #24]
 80096d0:	415b      	adcs	r3, r3
 80096d2:	61fb      	str	r3, [r7, #28]
 80096d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096d8:	4641      	mov	r1, r8
 80096da:	1851      	adds	r1, r2, r1
 80096dc:	6139      	str	r1, [r7, #16]
 80096de:	4649      	mov	r1, r9
 80096e0:	414b      	adcs	r3, r1
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	f04f 0300 	mov.w	r3, #0
 80096ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096f0:	4659      	mov	r1, fp
 80096f2:	00cb      	lsls	r3, r1, #3
 80096f4:	4651      	mov	r1, sl
 80096f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096fa:	4651      	mov	r1, sl
 80096fc:	00ca      	lsls	r2, r1, #3
 80096fe:	4610      	mov	r0, r2
 8009700:	4619      	mov	r1, r3
 8009702:	4603      	mov	r3, r0
 8009704:	4642      	mov	r2, r8
 8009706:	189b      	adds	r3, r3, r2
 8009708:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800970c:	464b      	mov	r3, r9
 800970e:	460a      	mov	r2, r1
 8009710:	eb42 0303 	adc.w	r3, r2, r3
 8009714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009722:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009724:	f04f 0200 	mov.w	r2, #0
 8009728:	f04f 0300 	mov.w	r3, #0
 800972c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009730:	4649      	mov	r1, r9
 8009732:	008b      	lsls	r3, r1, #2
 8009734:	4641      	mov	r1, r8
 8009736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800973a:	4641      	mov	r1, r8
 800973c:	008a      	lsls	r2, r1, #2
 800973e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009742:	f7f6 fd5d 	bl	8000200 <__aeabi_uldivmod>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	4611      	mov	r1, r2
 800974c:	4b38      	ldr	r3, [pc, #224]	@ (8009830 <UART_SetConfig+0x4e4>)
 800974e:	fba3 2301 	umull	r2, r3, r3, r1
 8009752:	095b      	lsrs	r3, r3, #5
 8009754:	2264      	movs	r2, #100	@ 0x64
 8009756:	fb02 f303 	mul.w	r3, r2, r3
 800975a:	1acb      	subs	r3, r1, r3
 800975c:	011b      	lsls	r3, r3, #4
 800975e:	3332      	adds	r3, #50	@ 0x32
 8009760:	4a33      	ldr	r2, [pc, #204]	@ (8009830 <UART_SetConfig+0x4e4>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	095b      	lsrs	r3, r3, #5
 8009768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800976c:	441c      	add	r4, r3
 800976e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009772:	2200      	movs	r2, #0
 8009774:	673b      	str	r3, [r7, #112]	@ 0x70
 8009776:	677a      	str	r2, [r7, #116]	@ 0x74
 8009778:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800977c:	4642      	mov	r2, r8
 800977e:	464b      	mov	r3, r9
 8009780:	1891      	adds	r1, r2, r2
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	415b      	adcs	r3, r3
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800978c:	4641      	mov	r1, r8
 800978e:	1851      	adds	r1, r2, r1
 8009790:	6039      	str	r1, [r7, #0]
 8009792:	4649      	mov	r1, r9
 8009794:	414b      	adcs	r3, r1
 8009796:	607b      	str	r3, [r7, #4]
 8009798:	f04f 0200 	mov.w	r2, #0
 800979c:	f04f 0300 	mov.w	r3, #0
 80097a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097a4:	4659      	mov	r1, fp
 80097a6:	00cb      	lsls	r3, r1, #3
 80097a8:	4651      	mov	r1, sl
 80097aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097ae:	4651      	mov	r1, sl
 80097b0:	00ca      	lsls	r2, r1, #3
 80097b2:	4610      	mov	r0, r2
 80097b4:	4619      	mov	r1, r3
 80097b6:	4603      	mov	r3, r0
 80097b8:	4642      	mov	r2, r8
 80097ba:	189b      	adds	r3, r3, r2
 80097bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80097be:	464b      	mov	r3, r9
 80097c0:	460a      	mov	r2, r1
 80097c2:	eb42 0303 	adc.w	r3, r2, r3
 80097c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80097c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80097d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	f04f 0300 	mov.w	r3, #0
 80097dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80097e0:	4649      	mov	r1, r9
 80097e2:	008b      	lsls	r3, r1, #2
 80097e4:	4641      	mov	r1, r8
 80097e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097ea:	4641      	mov	r1, r8
 80097ec:	008a      	lsls	r2, r1, #2
 80097ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80097f2:	f7f6 fd05 	bl	8000200 <__aeabi_uldivmod>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009830 <UART_SetConfig+0x4e4>)
 80097fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009800:	095b      	lsrs	r3, r3, #5
 8009802:	2164      	movs	r1, #100	@ 0x64
 8009804:	fb01 f303 	mul.w	r3, r1, r3
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	011b      	lsls	r3, r3, #4
 800980c:	3332      	adds	r3, #50	@ 0x32
 800980e:	4a08      	ldr	r2, [pc, #32]	@ (8009830 <UART_SetConfig+0x4e4>)
 8009810:	fba2 2303 	umull	r2, r3, r2, r3
 8009814:	095b      	lsrs	r3, r3, #5
 8009816:	f003 020f 	and.w	r2, r3, #15
 800981a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4422      	add	r2, r4
 8009822:	609a      	str	r2, [r3, #8]
}
 8009824:	bf00      	nop
 8009826:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800982a:	46bd      	mov	sp, r7
 800982c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009830:	51eb851f 	.word	0x51eb851f

08009834 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d123      	bne.n	800988e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800984e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	6851      	ldr	r1, [r2, #4]
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	6892      	ldr	r2, [r2, #8]
 800985a:	4311      	orrs	r1, r2
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	68d2      	ldr	r2, [r2, #12]
 8009860:	4311      	orrs	r1, r2
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	6912      	ldr	r2, [r2, #16]
 8009866:	4311      	orrs	r1, r2
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	6952      	ldr	r2, [r2, #20]
 800986c:	4311      	orrs	r1, r2
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	6992      	ldr	r2, [r2, #24]
 8009872:	4311      	orrs	r1, r2
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	69d2      	ldr	r2, [r2, #28]
 8009878:	4311      	orrs	r1, r2
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	6a12      	ldr	r2, [r2, #32]
 800987e:	4311      	orrs	r1, r2
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009884:	430a      	orrs	r2, r1
 8009886:	431a      	orrs	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	e028      	b.n	80098e0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	69d9      	ldr	r1, [r3, #28]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	4319      	orrs	r1, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a4:	430b      	orrs	r3, r1
 80098a6:	431a      	orrs	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80098b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	6851      	ldr	r1, [r2, #4]
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	6892      	ldr	r2, [r2, #8]
 80098c0:	4311      	orrs	r1, r2
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	68d2      	ldr	r2, [r2, #12]
 80098c6:	4311      	orrs	r1, r2
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	6912      	ldr	r2, [r2, #16]
 80098cc:	4311      	orrs	r1, r2
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	6952      	ldr	r2, [r2, #20]
 80098d2:	4311      	orrs	r1, r2
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	6992      	ldr	r2, [r2, #24]
 80098d8:	430a      	orrs	r2, r1
 80098da:	431a      	orrs	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d128      	bne.n	8009952 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	1e59      	subs	r1, r3, #1
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	3b01      	subs	r3, #1
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	4319      	orrs	r1, r3
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	3b01      	subs	r3, #1
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	4319      	orrs	r1, r3
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	3b01      	subs	r3, #1
 8009928:	031b      	lsls	r3, r3, #12
 800992a:	4319      	orrs	r1, r3
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	3b01      	subs	r3, #1
 8009932:	041b      	lsls	r3, r3, #16
 8009934:	4319      	orrs	r1, r3
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	3b01      	subs	r3, #1
 800993c:	051b      	lsls	r3, r3, #20
 800993e:	4319      	orrs	r1, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	3b01      	subs	r3, #1
 8009946:	061b      	lsls	r3, r3, #24
 8009948:	430b      	orrs	r3, r1
 800994a:	431a      	orrs	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	609a      	str	r2, [r3, #8]
 8009950:	e02f      	b.n	80099b2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800995a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	68d2      	ldr	r2, [r2, #12]
 8009962:	3a01      	subs	r2, #1
 8009964:	0311      	lsls	r1, r2, #12
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	6952      	ldr	r2, [r2, #20]
 800996a:	3a01      	subs	r2, #1
 800996c:	0512      	lsls	r2, r2, #20
 800996e:	430a      	orrs	r2, r1
 8009970:	431a      	orrs	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	1e59      	subs	r1, r3, #1
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	3b01      	subs	r3, #1
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	4319      	orrs	r1, r3
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	3b01      	subs	r3, #1
 8009994:	021b      	lsls	r3, r3, #8
 8009996:	4319      	orrs	r1, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	3b01      	subs	r3, #1
 800999e:	041b      	lsls	r3, r3, #16
 80099a0:	4319      	orrs	r1, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	061b      	lsls	r3, r3, #24
 80099aa:	430b      	orrs	r3, r1
 80099ac:	431a      	orrs	r2, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80099c0:	b084      	sub	sp, #16
 80099c2:	b480      	push	{r7}
 80099c4:	b085      	sub	sp, #20
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	f107 001c 	add.w	r0, r7, #28
 80099ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80099d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80099d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80099da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80099dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80099de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80099e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80099e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80099e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80099e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80099ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80099fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	431a      	orrs	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	b004      	add	sp, #16
 8009a14:	4770      	bx	lr

08009a16 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2203      	movs	r2, #3
 8009a3c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0303 	and.w	r3, r3, #3
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a86:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009a8c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009a92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009aa2:	f023 030f 	bic.w	r3, r3, #15
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	b2db      	uxtb	r3, r3
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b085      	sub	sp, #20
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3314      	adds	r3, #20
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	4413      	add	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
}  
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b22:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009b28:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009b2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0

}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009b62:	2310      	movs	r3, #16
 8009b64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b66:	2340      	movs	r3, #64	@ 0x40
 8009b68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b74:	f107 0308 	add.w	r3, r7, #8
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff ff74 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b84:	2110      	movs	r1, #16
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa18 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009b8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3720      	adds	r7, #32
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009ba6:	2311      	movs	r3, #17
 8009ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009baa:	2340      	movs	r3, #64	@ 0x40
 8009bac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bb8:	f107 0308 	add.w	r3, r7, #8
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff ff52 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bc8:	2111      	movs	r1, #17
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f9f6 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd2:	69fb      	ldr	r3, [r7, #28]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009bea:	2312      	movs	r3, #18
 8009bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bee:	2340      	movs	r3, #64	@ 0x40
 8009bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bfc:	f107 0308 	add.w	r3, r7, #8
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff ff30 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c0c:	2112      	movs	r1, #18
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f9d4 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009c2e:	2318      	movs	r3, #24
 8009c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c32:	2340      	movs	r3, #64	@ 0x40
 8009c34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c36:	2300      	movs	r3, #0
 8009c38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c40:	f107 0308 	add.w	r3, r7, #8
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff ff0e 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c50:	2118      	movs	r1, #24
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9b2 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c5a:	69fb      	ldr	r3, [r7, #28]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009c72:	2319      	movs	r3, #25
 8009c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c76:	2340      	movs	r3, #64	@ 0x40
 8009c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c84:	f107 0308 	add.w	r3, r7, #8
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff feec 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c94:	2119      	movs	r1, #25
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f990 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3720      	adds	r7, #32
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009cb4:	230c      	movs	r3, #12
 8009cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cb8:	2340      	movs	r3, #64	@ 0x40
 8009cba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cc6:	f107 0308 	add.w	r3, r7, #8
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff fecb 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009cd2:	4a05      	ldr	r2, [pc, #20]	@ (8009ce8 <SDMMC_CmdStopTransfer+0x40>)
 8009cd4:	210c      	movs	r1, #12
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f970 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cde:	69fb      	ldr	r3, [r7, #28]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3720      	adds	r7, #32
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	05f5e100 	.word	0x05f5e100

08009cec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08a      	sub	sp, #40	@ 0x28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009cfc:	2307      	movs	r3, #7
 8009cfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d00:	2340      	movs	r3, #64	@ 0x40
 8009d02:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d04:	2300      	movs	r3, #0
 8009d06:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d0c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d0e:	f107 0310 	add.w	r3, r7, #16
 8009d12:	4619      	mov	r1, r3
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f7ff fea7 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d1e:	2107      	movs	r1, #7
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 f94b 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009d26:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3728      	adds	r7, #40	@ 0x28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b088      	sub	sp, #32
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009d42:	2300      	movs	r3, #0
 8009d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d46:	2300      	movs	r3, #0
 8009d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d50:	f107 0308 	add.w	r3, r7, #8
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff fe86 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fb65 	bl	800a42c <SDMMC_GetCmdError>
 8009d62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d64:	69fb      	ldr	r3, [r7, #28]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b088      	sub	sp, #32
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009d76:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009d7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d7c:	2308      	movs	r3, #8
 8009d7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d80:	2340      	movs	r3, #64	@ 0x40
 8009d82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d8e:	f107 0308 	add.w	r3, r7, #8
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff fe67 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 faf8 	bl	800a390 <SDMMC_GetCmdResp7>
 8009da0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009da2:	69fb      	ldr	r3, [r7, #28]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3720      	adds	r7, #32
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009dba:	2337      	movs	r3, #55	@ 0x37
 8009dbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009dbe:	2340      	movs	r3, #64	@ 0x40
 8009dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dcc:	f107 0308 	add.w	r3, r7, #8
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7ff fe48 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ddc:	2137      	movs	r1, #55	@ 0x37
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f8ec 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009de4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009de6:	69fb      	ldr	r3, [r7, #28]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3720      	adds	r7, #32
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b088      	sub	sp, #32
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009e00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009e06:	2329      	movs	r3, #41	@ 0x29
 8009e08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e0a:	2340      	movs	r3, #64	@ 0x40
 8009e0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e18:	f107 0308 	add.w	r3, r7, #8
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff fe22 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f9ff 	bl	800a228 <SDMMC_GetCmdResp3>
 8009e2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e2c:	69fb      	ldr	r3, [r7, #28]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3720      	adds	r7, #32
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b088      	sub	sp, #32
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009e44:	2306      	movs	r3, #6
 8009e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e48:	2340      	movs	r3, #64	@ 0x40
 8009e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e56:	f107 0308 	add.w	r3, r7, #8
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff fe03 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e66:	2106      	movs	r1, #6
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f8a7 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e70:	69fb      	ldr	r3, [r7, #28]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3720      	adds	r7, #32
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b088      	sub	sp, #32
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e82:	2300      	movs	r3, #0
 8009e84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e86:	2333      	movs	r3, #51	@ 0x33
 8009e88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e8a:	2340      	movs	r3, #64	@ 0x40
 8009e8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e98:	f107 0308 	add.w	r3, r7, #8
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff fde2 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ea8:	2133      	movs	r1, #51	@ 0x33
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f886 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eb2:	69fb      	ldr	r3, [r7, #28]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3720      	adds	r7, #32
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b088      	sub	sp, #32
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009ecc:	23c0      	movs	r3, #192	@ 0xc0
 8009ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ed8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009eda:	f107 0308 	add.w	r3, r7, #8
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff fdc1 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f956 	bl	800a198 <SDMMC_GetCmdResp2>
 8009eec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eee:	69fb      	ldr	r3, [r7, #28]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3720      	adds	r7, #32
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b088      	sub	sp, #32
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009f06:	2309      	movs	r3, #9
 8009f08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009f0a:	23c0      	movs	r3, #192	@ 0xc0
 8009f0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f18:	f107 0308 	add.w	r3, r7, #8
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff fda2 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f937 	bl	800a198 <SDMMC_GetCmdResp2>
 8009f2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f2c:	69fb      	ldr	r3, [r7, #28]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b088      	sub	sp, #32
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009f44:	2303      	movs	r3, #3
 8009f46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f48:	2340      	movs	r3, #64	@ 0x40
 8009f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f56:	f107 0308 	add.w	r3, r7, #8
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff fd83 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	2103      	movs	r1, #3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f99c 	bl	800a2a4 <SDMMC_GetCmdResp6>
 8009f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f6e:	69fb      	ldr	r3, [r7, #28]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3720      	adds	r7, #32
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f86:	230d      	movs	r3, #13
 8009f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f8a:	2340      	movs	r3, #64	@ 0x40
 8009f8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f98:	f107 0308 	add.w	r3, r7, #8
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff fd62 	bl	8009a68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fa8:	210d      	movs	r1, #13
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f806 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009fb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fb2:	69fb      	ldr	r3, [r7, #28]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3720      	adds	r7, #32
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009fca:	4b70      	ldr	r3, [pc, #448]	@ (800a18c <SDMMC_GetCmdResp1+0x1d0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a70      	ldr	r2, [pc, #448]	@ (800a190 <SDMMC_GetCmdResp1+0x1d4>)
 8009fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd4:	0a5a      	lsrs	r2, r3, #9
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	fb02 f303 	mul.w	r3, r2, r3
 8009fdc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	1e5a      	subs	r2, r3, #1
 8009fe2:	61fa      	str	r2, [r7, #28]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fe8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fec:	e0c9      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ff2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0ef      	beq.n	8009fde <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1ea      	bne.n	8009fde <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a00c:	f003 0304 	and.w	r3, r3, #4
 800a010:	2b00      	cmp	r3, #0
 800a012:	d004      	beq.n	800a01e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2204      	movs	r2, #4
 800a018:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a01a:	2304      	movs	r3, #4
 800a01c:	e0b1      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	d004      	beq.n	800a034 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2201      	movs	r2, #1
 800a02e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a030:	2301      	movs	r3, #1
 800a032:	e0a6      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	22c5      	movs	r2, #197	@ 0xc5
 800a038:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7ff fd3e 	bl	8009abc <SDIO_GetCommandResponse>
 800a040:	4603      	mov	r3, r0
 800a042:	461a      	mov	r2, r3
 800a044:	7afb      	ldrb	r3, [r7, #11]
 800a046:	4293      	cmp	r3, r2
 800a048:	d001      	beq.n	800a04e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e099      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a04e:	2100      	movs	r1, #0
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7ff fd40 	bl	8009ad6 <SDIO_GetResponse>
 800a056:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	4b4e      	ldr	r3, [pc, #312]	@ (800a194 <SDMMC_GetCmdResp1+0x1d8>)
 800a05c:	4013      	ands	r3, r2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a062:	2300      	movs	r3, #0
 800a064:	e08d      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	da02      	bge.n	800a072 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a06c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a070:	e087      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a07c:	2340      	movs	r3, #64	@ 0x40
 800a07e:	e080      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a08a:	2380      	movs	r3, #128	@ 0x80
 800a08c:	e079      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a098:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a09c:	e071      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0ac:	e069      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a0b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0bc:	e061      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0cc:	e059      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0dc:	e051      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a0ec:	e049      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a0f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a0fc:	e041      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a108:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a10c:	e039      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a118:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a11c:	e031      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a128:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a12c:	e029      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a138:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a13c:	e021      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a148:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a14c:	e019      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a158:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a15c:	e011      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a168:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a16c:	e009      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f003 0308 	and.w	r3, r3, #8
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a178:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a17c:	e001      	b.n	800a182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a17e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a182:	4618      	mov	r0, r3
 800a184:	3720      	adds	r7, #32
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000000 	.word	0x20000000
 800a190:	10624dd3 	.word	0x10624dd3
 800a194:	fdffe008 	.word	0xfdffe008

0800a198 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1a0:	4b1f      	ldr	r3, [pc, #124]	@ (800a220 <SDMMC_GetCmdResp2+0x88>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a224 <SDMMC_GetCmdResp2+0x8c>)
 800a1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1aa:	0a5b      	lsrs	r3, r3, #9
 800a1ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	1e5a      	subs	r2, r3, #1
 800a1ba:	60fa      	str	r2, [r7, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d102      	bne.n	800a1c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1c4:	e026      	b.n	800a214 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0ef      	beq.n	800a1b6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1ea      	bne.n	800a1b6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d004      	beq.n	800a1f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2204      	movs	r2, #4
 800a1f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1f2:	2304      	movs	r3, #4
 800a1f4:	e00e      	b.n	800a214 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a208:	2301      	movs	r3, #1
 800a20a:	e003      	b.n	800a214 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	22c5      	movs	r2, #197	@ 0xc5
 800a210:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	20000000 	.word	0x20000000
 800a224:	10624dd3 	.word	0x10624dd3

0800a228 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a230:	4b1a      	ldr	r3, [pc, #104]	@ (800a29c <SDMMC_GetCmdResp3+0x74>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a1a      	ldr	r2, [pc, #104]	@ (800a2a0 <SDMMC_GetCmdResp3+0x78>)
 800a236:	fba2 2303 	umull	r2, r3, r2, r3
 800a23a:	0a5b      	lsrs	r3, r3, #9
 800a23c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a240:	fb02 f303 	mul.w	r3, r2, r3
 800a244:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	1e5a      	subs	r2, r3, #1
 800a24a:	60fa      	str	r2, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a250:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a254:	e01b      	b.n	800a28e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a25a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0ef      	beq.n	800a246 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1ea      	bne.n	800a246 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a274:	f003 0304 	and.w	r3, r3, #4
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d004      	beq.n	800a286 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2204      	movs	r2, #4
 800a280:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a282:	2304      	movs	r3, #4
 800a284:	e003      	b.n	800a28e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	22c5      	movs	r2, #197	@ 0xc5
 800a28a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000000 	.word	0x20000000
 800a2a0:	10624dd3 	.word	0x10624dd3

0800a2a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b088      	sub	sp, #32
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2b2:	4b35      	ldr	r3, [pc, #212]	@ (800a388 <SDMMC_GetCmdResp6+0xe4>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a35      	ldr	r2, [pc, #212]	@ (800a38c <SDMMC_GetCmdResp6+0xe8>)
 800a2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2bc:	0a5b      	lsrs	r3, r3, #9
 800a2be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2c2:	fb02 f303 	mul.w	r3, r2, r3
 800a2c6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	1e5a      	subs	r2, r3, #1
 800a2cc:	61fa      	str	r2, [r7, #28]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2d2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a2d6:	e052      	b.n	800a37e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2dc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0ef      	beq.n	800a2c8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1ea      	bne.n	800a2c8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f6:	f003 0304 	and.w	r3, r3, #4
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2204      	movs	r2, #4
 800a302:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a304:	2304      	movs	r3, #4
 800a306:	e03a      	b.n	800a37e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	2b00      	cmp	r3, #0
 800a312:	d004      	beq.n	800a31e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2201      	movs	r2, #1
 800a318:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e02f      	b.n	800a37e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7ff fbcc 	bl	8009abc <SDIO_GetCommandResponse>
 800a324:	4603      	mov	r3, r0
 800a326:	461a      	mov	r2, r3
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d001      	beq.n	800a332 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a32e:	2301      	movs	r3, #1
 800a330:	e025      	b.n	800a37e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	22c5      	movs	r2, #197	@ 0xc5
 800a336:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a338:	2100      	movs	r1, #0
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f7ff fbcb 	bl	8009ad6 <SDIO_GetResponse>
 800a340:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d106      	bne.n	800a35a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	0c1b      	lsrs	r3, r3, #16
 800a350:	b29a      	uxth	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a356:	2300      	movs	r3, #0
 800a358:	e011      	b.n	800a37e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a364:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a368:	e009      	b.n	800a37e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a378:	e001      	b.n	800a37e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a37a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3720      	adds	r7, #32
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000000 	.word	0x20000000
 800a38c:	10624dd3 	.word	0x10624dd3

0800a390 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a398:	4b22      	ldr	r3, [pc, #136]	@ (800a424 <SDMMC_GetCmdResp7+0x94>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a22      	ldr	r2, [pc, #136]	@ (800a428 <SDMMC_GetCmdResp7+0x98>)
 800a39e:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a2:	0a5b      	lsrs	r3, r3, #9
 800a3a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3a8:	fb02 f303 	mul.w	r3, r2, r3
 800a3ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	1e5a      	subs	r2, r3, #1
 800a3b2:	60fa      	str	r2, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d102      	bne.n	800a3be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3bc:	e02c      	b.n	800a418 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0ef      	beq.n	800a3ae <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1ea      	bne.n	800a3ae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3dc:	f003 0304 	and.w	r3, r3, #4
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d004      	beq.n	800a3ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2204      	movs	r2, #4
 800a3e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3ea:	2304      	movs	r3, #4
 800a3ec:	e014      	b.n	800a418 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d004      	beq.n	800a404 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a400:	2301      	movs	r3, #1
 800a402:	e009      	b.n	800a418 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2240      	movs	r2, #64	@ 0x40
 800a414:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a416:	2300      	movs	r3, #0
  
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3714      	adds	r7, #20
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr
 800a424:	20000000 	.word	0x20000000
 800a428:	10624dd3 	.word	0x10624dd3

0800a42c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a434:	4b11      	ldr	r3, [pc, #68]	@ (800a47c <SDMMC_GetCmdError+0x50>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a11      	ldr	r2, [pc, #68]	@ (800a480 <SDMMC_GetCmdError+0x54>)
 800a43a:	fba2 2303 	umull	r2, r3, r2, r3
 800a43e:	0a5b      	lsrs	r3, r3, #9
 800a440:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a444:	fb02 f303 	mul.w	r3, r2, r3
 800a448:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	1e5a      	subs	r2, r3, #1
 800a44e:	60fa      	str	r2, [r7, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d102      	bne.n	800a45a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a454:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a458:	e009      	b.n	800a46e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a45e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a462:	2b00      	cmp	r3, #0
 800a464:	d0f1      	beq.n	800a44a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	22c5      	movs	r2, #197	@ 0xc5
 800a46a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	20000000 	.word	0x20000000
 800a480:	10624dd3 	.word	0x10624dd3

0800a484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a484:	b084      	sub	sp, #16
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	f107 001c 	add.w	r0, r7, #28
 800a492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a496:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d123      	bne.n	800a4e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a4b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d105      	bne.n	800a4da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f9dc 	bl	800a898 <USB_CoreReset>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73fb      	strb	r3, [r7, #15]
 800a4e4:	e01b      	b.n	800a51e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f9d0 	bl	800a898 <USB_CoreReset>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a4fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a500:	2b00      	cmp	r3, #0
 800a502:	d106      	bne.n	800a512 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a508:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a510:	e005      	b.n	800a51e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a516:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a51e:	7fbb      	ldrb	r3, [r7, #30]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d10b      	bne.n	800a53c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f043 0206 	orr.w	r2, r3, #6
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f043 0220 	orr.w	r2, r3, #32
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a548:	b004      	add	sp, #16
 800a54a:	4770      	bx	lr

0800a54c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f043 0201 	orr.w	r2, r3, #1
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a56e:	b480      	push	{r7}
 800a570:	b083      	sub	sp, #12
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f023 0201 	bic.w	r2, r3, #1
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5ac:	78fb      	ldrb	r3, [r7, #3]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d115      	bne.n	800a5de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5be:	200a      	movs	r0, #10
 800a5c0:	f7f7 fc20 	bl	8001e04 <HAL_Delay>
      ms += 10U;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	330a      	adds	r3, #10
 800a5c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f956 	bl	800a87c <USB_GetMode>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d01e      	beq.n	800a614 <USB_SetCurrentMode+0x84>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2bc7      	cmp	r3, #199	@ 0xc7
 800a5da:	d9f0      	bls.n	800a5be <USB_SetCurrentMode+0x2e>
 800a5dc:	e01a      	b.n	800a614 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d115      	bne.n	800a610 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5f0:	200a      	movs	r0, #10
 800a5f2:	f7f7 fc07 	bl	8001e04 <HAL_Delay>
      ms += 10U;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	330a      	adds	r3, #10
 800a5fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f93d 	bl	800a87c <USB_GetMode>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d005      	beq.n	800a614 <USB_SetCurrentMode+0x84>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a60c:	d9f0      	bls.n	800a5f0 <USB_SetCurrentMode+0x60>
 800a60e:	e001      	b.n	800a614 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e005      	b.n	800a620 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2bc8      	cmp	r3, #200	@ 0xc8
 800a618:	d101      	bne.n	800a61e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a632:	2300      	movs	r3, #0
 800a634:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3301      	adds	r3, #1
 800a63a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a642:	d901      	bls.n	800a648 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e01b      	b.n	800a680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	daf2      	bge.n	800a636 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	019b      	lsls	r3, r3, #6
 800a658:	f043 0220 	orr.w	r2, r3, #32
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	3301      	adds	r3, #1
 800a664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a66c:	d901      	bls.n	800a672 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e006      	b.n	800a680 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	f003 0320 	and.w	r3, r3, #32
 800a67a:	2b20      	cmp	r3, #32
 800a67c:	d0f0      	beq.n	800a660 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3301      	adds	r3, #1
 800a69c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6a4:	d901      	bls.n	800a6aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e018      	b.n	800a6dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	daf2      	bge.n	800a698 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2210      	movs	r2, #16
 800a6ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6c8:	d901      	bls.n	800a6ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e006      	b.n	800a6dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b10      	cmp	r3, #16
 800a6d8:	d0f0      	beq.n	800a6bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b089      	sub	sp, #36	@ 0x24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	71fb      	strb	r3, [r7, #7]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a706:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d123      	bne.n	800a756 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a70e:	88bb      	ldrh	r3, [r7, #4]
 800a710:	3303      	adds	r3, #3
 800a712:	089b      	lsrs	r3, r3, #2
 800a714:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a716:	2300      	movs	r3, #0
 800a718:	61bb      	str	r3, [r7, #24]
 800a71a:	e018      	b.n	800a74e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	031a      	lsls	r2, r3, #12
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	4413      	add	r3, r2
 800a724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a728:	461a      	mov	r2, r3
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	3301      	adds	r3, #1
 800a734:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	3301      	adds	r3, #1
 800a73a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	3301      	adds	r3, #1
 800a740:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	3301      	adds	r3, #1
 800a746:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	3301      	adds	r3, #1
 800a74c:	61bb      	str	r3, [r7, #24]
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	429a      	cmp	r2, r3
 800a754:	d3e2      	bcc.n	800a71c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3724      	adds	r7, #36	@ 0x24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a764:	b480      	push	{r7}
 800a766:	b08b      	sub	sp, #44	@ 0x2c
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	4613      	mov	r3, r2
 800a770:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a77a:	88fb      	ldrh	r3, [r7, #6]
 800a77c:	089b      	lsrs	r3, r3, #2
 800a77e:	b29b      	uxth	r3, r3
 800a780:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a782:	88fb      	ldrh	r3, [r7, #6]
 800a784:	f003 0303 	and.w	r3, r3, #3
 800a788:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a78a:	2300      	movs	r3, #0
 800a78c:	623b      	str	r3, [r7, #32]
 800a78e:	e014      	b.n	800a7ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79e:	3301      	adds	r3, #1
 800a7a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	623b      	str	r3, [r7, #32]
 800a7ba:	6a3a      	ldr	r2, [r7, #32]
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d3e6      	bcc.n	800a790 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a7c2:	8bfb      	ldrh	r3, [r7, #30]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d01e      	beq.n	800a806 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f107 0310 	add.w	r3, r7, #16
 800a7d8:	6812      	ldr	r2, [r2, #0]
 800a7da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	6a3b      	ldr	r3, [r7, #32]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ec:	701a      	strb	r2, [r3, #0]
      i++;
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a7fa:	8bfb      	ldrh	r3, [r7, #30]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a800:	8bfb      	ldrh	r3, [r7, #30]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1ea      	bne.n	800a7dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a808:	4618      	mov	r0, r3
 800a80a:	372c      	adds	r7, #44	@ 0x2c
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	4013      	ands	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a82c:	68fb      	ldr	r3, [r7, #12]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b085      	sub	sp, #20
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	015a      	lsls	r2, r3, #5
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	4413      	add	r3, r2
 800a852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a85a:	78fb      	ldrb	r3, [r7, #3]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4413      	add	r3, r2
 800a862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	4013      	ands	r3, r2
 800a86c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a86e:	68bb      	ldr	r3, [r7, #8]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	f003 0301 	and.w	r3, r3, #1
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8b0:	d901      	bls.n	800a8b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e01b      	b.n	800a8ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	daf2      	bge.n	800a8a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	f043 0201 	orr.w	r2, r3, #1
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8da:	d901      	bls.n	800a8e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e006      	b.n	800a8ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d0f0      	beq.n	800a8ce <USB_CoreReset+0x36>

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
	...

0800a8fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b086      	sub	sp, #24
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a91c:	461a      	mov	r2, r3
 800a91e:	2300      	movs	r3, #0
 800a920:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a926:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a936:	2b00      	cmp	r3, #0
 800a938:	d119      	bne.n	800a96e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a93a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d10a      	bne.n	800a958 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a950:	f043 0304 	orr.w	r3, r3, #4
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	e014      	b.n	800a982 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a966:	f023 0304 	bic.w	r3, r3, #4
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	e009      	b.n	800a982 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a97c:	f023 0304 	bic.w	r3, r3, #4
 800a980:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a982:	2110      	movs	r1, #16
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff fe4f 	bl	800a628 <USB_FlushTxFifo>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7ff fe79 	bl	800a68c <USB_FlushRxFifo>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	613b      	str	r3, [r7, #16]
 800a9a8:	e015      	b.n	800a9d6 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9bc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	613b      	str	r3, [r7, #16]
 800a9d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a9da:	461a      	mov	r2, r3
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d3e3      	bcc.n	800a9aa <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ee:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a18      	ldr	r2, [pc, #96]	@ (800aa54 <USB_HostInit+0x158>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d10b      	bne.n	800aa10 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9fe:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a15      	ldr	r2, [pc, #84]	@ (800aa58 <USB_HostInit+0x15c>)
 800aa04:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a14      	ldr	r2, [pc, #80]	@ (800aa5c <USB_HostInit+0x160>)
 800aa0a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800aa0e:	e009      	b.n	800aa24 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2280      	movs	r2, #128	@ 0x80
 800aa14:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a11      	ldr	r2, [pc, #68]	@ (800aa60 <USB_HostInit+0x164>)
 800aa1a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a11      	ldr	r2, [pc, #68]	@ (800aa64 <USB_HostInit+0x168>)
 800aa20:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d105      	bne.n	800aa38 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	f043 0210 	orr.w	r2, r3, #16
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	699a      	ldr	r2, [r3, #24]
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa68 <USB_HostInit+0x16c>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800aa44:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3718      	adds	r7, #24
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa50:	b004      	add	sp, #16
 800aa52:	4770      	bx	lr
 800aa54:	40040000 	.word	0x40040000
 800aa58:	01000200 	.word	0x01000200
 800aa5c:	00e00300 	.word	0x00e00300
 800aa60:	00600080 	.word	0x00600080
 800aa64:	004000e0 	.word	0x004000e0
 800aa68:	a3200008 	.word	0xa3200008

0800aa6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa8a:	f023 0303 	bic.w	r3, r3, #3
 800aa8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	78fb      	ldrb	r3, [r7, #3]
 800aa9a:	f003 0303 	and.w	r3, r3, #3
 800aa9e:	68f9      	ldr	r1, [r7, #12]
 800aaa0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d107      	bne.n	800aabe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aab4:	461a      	mov	r2, r3
 800aab6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800aaba:	6053      	str	r3, [r2, #4]
 800aabc:	e00c      	b.n	800aad8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d107      	bne.n	800aad4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aaca:	461a      	mov	r2, r3
 800aacc:	f241 7370 	movw	r3, #6000	@ 0x1770
 800aad0:	6053      	str	r3, [r2, #4]
 800aad2:	e001      	b.n	800aad8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	e000      	b.n	800aada <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b084      	sub	sp, #16
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ab06:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ab10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab14:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ab16:	2064      	movs	r0, #100	@ 0x64
 800ab18:	f7f7 f974 	bl	8001e04 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ab24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab28:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ab2a:	200a      	movs	r0, #10
 800ab2c:	f7f7 f96a 	bl	8001e04 <HAL_Delay>

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b085      	sub	sp, #20
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	460b      	mov	r3, r1
 800ab44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ab5e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <USB_DriveVbus+0x44>
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d106      	bne.n	800ab7e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ab78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ab7c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab88:	d109      	bne.n	800ab9e <USB_DriveVbus+0x64>
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ab98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab9c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	0c5b      	lsrs	r3, r3, #17
 800abca:	f003 0303 	and.w	r3, r3, #3
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800abda:	b480      	push	{r7}
 800abdc:	b085      	sub	sp, #20
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	b29b      	uxth	r3, r3
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	4608      	mov	r0, r1
 800ac06:	4611      	mov	r1, r2
 800ac08:	461a      	mov	r2, r3
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	70fb      	strb	r3, [r7, #3]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70bb      	strb	r3, [r7, #2]
 800ac12:	4613      	mov	r3, r2
 800ac14:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800ac1e:	78fb      	ldrb	r3, [r7, #3]
 800ac20:	015a      	lsls	r2, r3, #5
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	4413      	add	r3, r2
 800ac26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac30:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ac32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	d87c      	bhi.n	800ad34 <USB_HC_Init+0x138>
 800ac3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac40 <USB_HC_Init+0x44>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800ac51 	.word	0x0800ac51
 800ac44:	0800acf7 	.word	0x0800acf7
 800ac48:	0800ac51 	.word	0x0800ac51
 800ac4c:	0800acb9 	.word	0x0800acb9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac50:	78fb      	ldrb	r3, [r7, #3]
 800ac52:	015a      	lsls	r2, r3, #5
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800ac62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ac64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	da10      	bge.n	800ac8e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	78fa      	ldrb	r2, [r7, #3]
 800ac7c:	0151      	lsls	r1, r2, #5
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	440a      	add	r2, r1
 800ac82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac8a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800ac8c:	e055      	b.n	800ad3a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a6f      	ldr	r2, [pc, #444]	@ (800ae50 <USB_HC_Init+0x254>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d151      	bne.n	800ad3a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ac96:	78fb      	ldrb	r3, [r7, #3]
 800ac98:	015a      	lsls	r2, r3, #5
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	78fa      	ldrb	r2, [r7, #3]
 800aca6:	0151      	lsls	r1, r2, #5
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	440a      	add	r2, r1
 800acac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800acb0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800acb4:	60d3      	str	r3, [r2, #12]
      break;
 800acb6:	e040      	b.n	800ad3a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acc4:	461a      	mov	r2, r3
 800acc6:	f240 639d 	movw	r3, #1693	@ 0x69d
 800acca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800accc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	da34      	bge.n	800ad3e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800acd4:	78fb      	ldrb	r3, [r7, #3]
 800acd6:	015a      	lsls	r2, r3, #5
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	4413      	add	r3, r2
 800acdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	78fa      	ldrb	r2, [r7, #3]
 800ace4:	0151      	lsls	r1, r2, #5
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	440a      	add	r2, r1
 800acea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800acee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acf2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800acf4:	e023      	b.n	800ad3e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800acf6:	78fb      	ldrb	r3, [r7, #3]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad02:	461a      	mov	r2, r3
 800ad04:	f240 2325 	movw	r3, #549	@ 0x225
 800ad08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ad0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	da17      	bge.n	800ad42 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	015a      	lsls	r2, r3, #5
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	4413      	add	r3, r2
 800ad1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	78fa      	ldrb	r2, [r7, #3]
 800ad22:	0151      	lsls	r1, r2, #5
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	440a      	add	r2, r1
 800ad28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad2c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800ad30:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ad32:	e006      	b.n	800ad42 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	77fb      	strb	r3, [r7, #31]
      break;
 800ad38:	e004      	b.n	800ad44 <USB_HC_Init+0x148>
      break;
 800ad3a:	bf00      	nop
 800ad3c:	e002      	b.n	800ad44 <USB_HC_Init+0x148>
      break;
 800ad3e:	bf00      	nop
 800ad40:	e000      	b.n	800ad44 <USB_HC_Init+0x148>
      break;
 800ad42:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad50:	461a      	mov	r2, r3
 800ad52:	2300      	movs	r3, #0
 800ad54:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	78fa      	ldrb	r2, [r7, #3]
 800ad66:	0151      	lsls	r1, r2, #5
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	440a      	add	r2, r1
 800ad6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad70:	f043 0302 	orr.w	r3, r3, #2
 800ad74:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	78fb      	ldrb	r3, [r7, #3]
 800ad80:	f003 030f 	and.w	r3, r3, #15
 800ad84:	2101      	movs	r1, #1
 800ad86:	fa01 f303 	lsl.w	r3, r1, r3
 800ad8a:	6939      	ldr	r1, [r7, #16]
 800ad8c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ad90:	4313      	orrs	r3, r2
 800ad92:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ada0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	da03      	bge.n	800adb0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ada8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adac:	61bb      	str	r3, [r7, #24]
 800adae:	e001      	b.n	800adb4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800adb0:	2300      	movs	r3, #0
 800adb2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff fef9 	bl	800abac <USB_GetHostSpeed>
 800adba:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800adbc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d106      	bne.n	800add2 <USB_HC_Init+0x1d6>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d003      	beq.n	800add2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800adca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800adce:	617b      	str	r3, [r7, #20]
 800add0:	e001      	b.n	800add6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800add6:	787b      	ldrb	r3, [r7, #1]
 800add8:	059b      	lsls	r3, r3, #22
 800adda:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800adde:	78bb      	ldrb	r3, [r7, #2]
 800ade0:	02db      	lsls	r3, r3, #11
 800ade2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ade6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ade8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800adec:	049b      	lsls	r3, r3, #18
 800adee:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800adf2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800adf4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800adf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800adfa:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	431a      	orrs	r2, r3
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae04:	78fa      	ldrb	r2, [r7, #3]
 800ae06:	0151      	lsls	r1, r2, #5
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	440a      	add	r2, r1
 800ae0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ae10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae14:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ae16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d003      	beq.n	800ae26 <USB_HC_Init+0x22a>
 800ae1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d10f      	bne.n	800ae46 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	78fa      	ldrb	r2, [r7, #3]
 800ae36:	0151      	lsls	r1, r2, #5
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	440a      	add	r2, r1
 800ae3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae44:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ae46:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	40040000 	.word	0x40040000

0800ae54 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b08c      	sub	sp, #48	@ 0x30
 800ae58:	af02      	add	r7, sp, #8
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	785b      	ldrb	r3, [r3, #1]
 800ae6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ae6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae70:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4a5d      	ldr	r2, [pc, #372]	@ (800afec <USB_HC_StartXfer+0x198>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d12f      	bne.n	800aeda <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800ae7a:	79fb      	ldrb	r3, [r7, #7]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d11c      	bne.n	800aeba <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	7c9b      	ldrb	r3, [r3, #18]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d003      	beq.n	800ae90 <USB_HC_StartXfer+0x3c>
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	7c9b      	ldrb	r3, [r3, #18]
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d124      	bne.n	800aeda <USB_HC_StartXfer+0x86>
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	799b      	ldrb	r3, [r3, #6]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d120      	bne.n	800aeda <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	69fa      	ldr	r2, [r7, #28]
 800aea8:	0151      	lsls	r1, r2, #5
 800aeaa:	6a3a      	ldr	r2, [r7, #32]
 800aeac:	440a      	add	r2, r1
 800aeae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aeb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeb6:	60d3      	str	r3, [r2, #12]
 800aeb8:	e00f      	b.n	800aeda <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	791b      	ldrb	r3, [r3, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10b      	bne.n	800aeda <USB_HC_StartXfer+0x86>
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	795b      	ldrb	r3, [r3, #5]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d107      	bne.n	800aeda <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	4619      	mov	r1, r3
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 fb6b 	bl	800b5ac <USB_DoPing>
        return HAL_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	e232      	b.n	800b340 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	799b      	ldrb	r3, [r3, #6]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d158      	bne.n	800af94 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800aee2:	2301      	movs	r3, #1
 800aee4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	78db      	ldrb	r3, [r3, #3]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d007      	beq.n	800aefe <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aeee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	8a92      	ldrh	r2, [r2, #20]
 800aef4:	fb03 f202 	mul.w	r2, r3, r2
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	61da      	str	r2, [r3, #28]
 800aefc:	e07c      	b.n	800aff8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	7c9b      	ldrb	r3, [r3, #18]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d130      	bne.n	800af68 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	2bbc      	cmp	r3, #188	@ 0xbc
 800af0c:	d918      	bls.n	800af40 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	8a9b      	ldrh	r3, [r3, #20]
 800af12:	461a      	mov	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	69da      	ldr	r2, [r3, #28]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d003      	beq.n	800af30 <USB_HC_StartXfer+0xdc>
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d103      	bne.n	800af38 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2202      	movs	r2, #2
 800af34:	60da      	str	r2, [r3, #12]
 800af36:	e05f      	b.n	800aff8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	2201      	movs	r2, #1
 800af3c:	60da      	str	r2, [r3, #12]
 800af3e:	e05b      	b.n	800aff8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6a1a      	ldr	r2, [r3, #32]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d007      	beq.n	800af60 <USB_HC_StartXfer+0x10c>
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	2b02      	cmp	r3, #2
 800af56:	d003      	beq.n	800af60 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	2204      	movs	r2, #4
 800af5c:	60da      	str	r2, [r3, #12]
 800af5e:	e04b      	b.n	800aff8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2203      	movs	r2, #3
 800af64:	60da      	str	r2, [r3, #12]
 800af66:	e047      	b.n	800aff8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d10d      	bne.n	800af8a <USB_HC_StartXfer+0x136>
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	8a92      	ldrh	r2, [r2, #20]
 800af76:	4293      	cmp	r3, r2
 800af78:	d907      	bls.n	800af8a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800af7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	8a92      	ldrh	r2, [r2, #20]
 800af80:	fb03 f202 	mul.w	r2, r3, r2
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	61da      	str	r2, [r3, #28]
 800af88:	e036      	b.n	800aff8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	6a1a      	ldr	r2, [r3, #32]
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	61da      	str	r2, [r3, #28]
 800af92:	e031      	b.n	800aff8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d018      	beq.n	800afce <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	6a1b      	ldr	r3, [r3, #32]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	8a92      	ldrh	r2, [r2, #20]
 800afa4:	4413      	add	r3, r2
 800afa6:	3b01      	subs	r3, #1
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	8a92      	ldrh	r2, [r2, #20]
 800afac:	fbb3 f3f2 	udiv	r3, r3, r2
 800afb0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800afb2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800afb4:	8b7b      	ldrh	r3, [r7, #26]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d90b      	bls.n	800afd2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800afba:	8b7b      	ldrh	r3, [r7, #26]
 800afbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800afbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	8a92      	ldrh	r2, [r2, #20]
 800afc4:	fb03 f202 	mul.w	r2, r3, r2
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	61da      	str	r2, [r3, #28]
 800afcc:	e001      	b.n	800afd2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800afce:	2301      	movs	r3, #1
 800afd0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	78db      	ldrb	r3, [r3, #3]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800afda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	8a92      	ldrh	r2, [r2, #20]
 800afe0:	fb03 f202 	mul.w	r2, r3, r2
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	61da      	str	r2, [r3, #28]
 800afe8:	e006      	b.n	800aff8 <USB_HC_StartXfer+0x1a4>
 800afea:	bf00      	nop
 800afec:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	6a1a      	ldr	r2, [r3, #32]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	69db      	ldr	r3, [r3, #28]
 800affc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b000:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b002:	04d9      	lsls	r1, r3, #19
 800b004:	4ba3      	ldr	r3, [pc, #652]	@ (800b294 <USB_HC_StartXfer+0x440>)
 800b006:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b008:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	7d9b      	ldrb	r3, [r3, #22]
 800b00e:	075b      	lsls	r3, r3, #29
 800b010:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b014:	69f9      	ldr	r1, [r7, #28]
 800b016:	0148      	lsls	r0, r1, #5
 800b018:	6a39      	ldr	r1, [r7, #32]
 800b01a:	4401      	add	r1, r0
 800b01c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b020:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b022:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b024:	79fb      	ldrb	r3, [r7, #7]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d009      	beq.n	800b03e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	6999      	ldr	r1, [r3, #24]
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	6a3b      	ldr	r3, [r7, #32]
 800b034:	4413      	add	r3, r2
 800b036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b03a:	460a      	mov	r2, r1
 800b03c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	bf0c      	ite	eq
 800b04e:	2301      	moveq	r3, #1
 800b050:	2300      	movne	r3, #0
 800b052:	b2db      	uxtb	r3, r3
 800b054:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	6a3b      	ldr	r3, [r7, #32]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	69fa      	ldr	r2, [r7, #28]
 800b066:	0151      	lsls	r1, r2, #5
 800b068:	6a3a      	ldr	r2, [r7, #32]
 800b06a:	440a      	add	r2, r1
 800b06c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b070:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b074:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	015a      	lsls	r2, r3, #5
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	4413      	add	r3, r2
 800b07e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	7e7b      	ldrb	r3, [r7, #25]
 800b086:	075b      	lsls	r3, r3, #29
 800b088:	69f9      	ldr	r1, [r7, #28]
 800b08a:	0148      	lsls	r0, r1, #5
 800b08c:	6a39      	ldr	r1, [r7, #32]
 800b08e:	4401      	add	r1, r0
 800b090:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b094:	4313      	orrs	r3, r2
 800b096:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	799b      	ldrb	r3, [r3, #6]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	f040 80c3 	bne.w	800b228 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	7c5b      	ldrb	r3, [r3, #17]
 800b0a6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	69fa      	ldr	r2, [r7, #28]
 800b0b0:	0151      	lsls	r1, r2, #5
 800b0b2:	6a3a      	ldr	r2, [r7, #32]
 800b0b4:	440a      	add	r2, r1
 800b0b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b0ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b0be:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	69fa      	ldr	r2, [r7, #28]
 800b0d0:	0151      	lsls	r1, r2, #5
 800b0d2:	6a3a      	ldr	r2, [r7, #32]
 800b0d4:	440a      	add	r2, r1
 800b0d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b0da:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b0de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	79db      	ldrb	r3, [r3, #7]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d123      	bne.n	800b130 <USB_HC_StartXfer+0x2dc>
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	78db      	ldrb	r3, [r3, #3]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d11f      	bne.n	800b130 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	69fa      	ldr	r2, [r7, #28]
 800b100:	0151      	lsls	r1, r2, #5
 800b102:	6a3a      	ldr	r2, [r7, #32]
 800b104:	440a      	add	r2, r1
 800b106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b10a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b10e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	6a3b      	ldr	r3, [r7, #32]
 800b116:	4413      	add	r3, r2
 800b118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	69fa      	ldr	r2, [r7, #28]
 800b120:	0151      	lsls	r1, r2, #5
 800b122:	6a3a      	ldr	r2, [r7, #32]
 800b124:	440a      	add	r2, r1
 800b126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b12a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b12e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	7c9b      	ldrb	r3, [r3, #18]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d003      	beq.n	800b140 <USB_HC_StartXfer+0x2ec>
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	7c9b      	ldrb	r3, [r3, #18]
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d117      	bne.n	800b170 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b144:	2b01      	cmp	r3, #1
 800b146:	d113      	bne.n	800b170 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	78db      	ldrb	r3, [r3, #3]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d10f      	bne.n	800b170 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	4413      	add	r3, r2
 800b158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	69fa      	ldr	r2, [r7, #28]
 800b160:	0151      	lsls	r1, r2, #5
 800b162:	6a3a      	ldr	r2, [r7, #32]
 800b164:	440a      	add	r2, r1
 800b166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b16a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b16e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	7c9b      	ldrb	r3, [r3, #18]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d162      	bne.n	800b23e <USB_HC_StartXfer+0x3ea>
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	78db      	ldrb	r3, [r3, #3]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d15e      	bne.n	800b23e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	3b01      	subs	r3, #1
 800b186:	2b03      	cmp	r3, #3
 800b188:	d858      	bhi.n	800b23c <USB_HC_StartXfer+0x3e8>
 800b18a:	a201      	add	r2, pc, #4	@ (adr r2, 800b190 <USB_HC_StartXfer+0x33c>)
 800b18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b190:	0800b1a1 	.word	0x0800b1a1
 800b194:	0800b1c3 	.word	0x0800b1c3
 800b198:	0800b1e5 	.word	0x0800b1e5
 800b19c:	0800b207 	.word	0x0800b207
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	69fa      	ldr	r2, [r7, #28]
 800b1b0:	0151      	lsls	r1, r2, #5
 800b1b2:	6a3a      	ldr	r2, [r7, #32]
 800b1b4:	440a      	add	r2, r1
 800b1b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1be:	6053      	str	r3, [r2, #4]
          break;
 800b1c0:	e03d      	b.n	800b23e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	0151      	lsls	r1, r2, #5
 800b1d4:	6a3a      	ldr	r2, [r7, #32]
 800b1d6:	440a      	add	r2, r1
 800b1d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1dc:	f043 030e 	orr.w	r3, r3, #14
 800b1e0:	6053      	str	r3, [r2, #4]
          break;
 800b1e2:	e02c      	b.n	800b23e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	0151      	lsls	r1, r2, #5
 800b1f6:	6a3a      	ldr	r2, [r7, #32]
 800b1f8:	440a      	add	r2, r1
 800b1fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b202:	6053      	str	r3, [r2, #4]
          break;
 800b204:	e01b      	b.n	800b23e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	015a      	lsls	r2, r3, #5
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	4413      	add	r3, r2
 800b20e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	69fa      	ldr	r2, [r7, #28]
 800b216:	0151      	lsls	r1, r2, #5
 800b218:	6a3a      	ldr	r2, [r7, #32]
 800b21a:	440a      	add	r2, r1
 800b21c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b220:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b224:	6053      	str	r3, [r2, #4]
          break;
 800b226:	e00a      	b.n	800b23e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	015a      	lsls	r2, r3, #5
 800b22c:	6a3b      	ldr	r3, [r7, #32]
 800b22e:	4413      	add	r3, r2
 800b230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b234:	461a      	mov	r2, r3
 800b236:	2300      	movs	r3, #0
 800b238:	6053      	str	r3, [r2, #4]
 800b23a:	e000      	b.n	800b23e <USB_HC_StartXfer+0x3ea>
          break;
 800b23c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	015a      	lsls	r2, r3, #5
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	4413      	add	r3, r2
 800b246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b254:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	78db      	ldrb	r3, [r3, #3]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b264:	613b      	str	r3, [r7, #16]
 800b266:	e003      	b.n	800b270 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b26e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b276:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b284:	461a      	mov	r2, r3
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b28a:	79fb      	ldrb	r3, [r7, #7]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d003      	beq.n	800b298 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	e055      	b.n	800b340 <USB_HC_StartXfer+0x4ec>
 800b294:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	78db      	ldrb	r3, [r3, #3]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d14e      	bne.n	800b33e <USB_HC_StartXfer+0x4ea>
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d04a      	beq.n	800b33e <USB_HC_StartXfer+0x4ea>
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	79db      	ldrb	r3, [r3, #7]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d146      	bne.n	800b33e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	7c9b      	ldrb	r3, [r3, #18]
 800b2b4:	2b03      	cmp	r3, #3
 800b2b6:	d831      	bhi.n	800b31c <USB_HC_StartXfer+0x4c8>
 800b2b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c0 <USB_HC_StartXfer+0x46c>)
 800b2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2be:	bf00      	nop
 800b2c0:	0800b2d1 	.word	0x0800b2d1
 800b2c4:	0800b2f5 	.word	0x0800b2f5
 800b2c8:	0800b2d1 	.word	0x0800b2d1
 800b2cc:	0800b2f5 	.word	0x0800b2f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	3303      	adds	r3, #3
 800b2d6:	089b      	lsrs	r3, r3, #2
 800b2d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b2da:	8afa      	ldrh	r2, [r7, #22]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d91c      	bls.n	800b320 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	f043 0220 	orr.w	r2, r3, #32
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	619a      	str	r2, [r3, #24]
        }
        break;
 800b2f2:	e015      	b.n	800b320 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	6a1b      	ldr	r3, [r3, #32]
 800b2f8:	3303      	adds	r3, #3
 800b2fa:	089b      	lsrs	r3, r3, #2
 800b2fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b2fe:	8afa      	ldrh	r2, [r7, #22]
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d90a      	bls.n	800b324 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	619a      	str	r2, [r3, #24]
        }
        break;
 800b31a:	e003      	b.n	800b324 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b31c:	bf00      	nop
 800b31e:	e002      	b.n	800b326 <USB_HC_StartXfer+0x4d2>
        break;
 800b320:	bf00      	nop
 800b322:	e000      	b.n	800b326 <USB_HC_StartXfer+0x4d2>
        break;
 800b324:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	6999      	ldr	r1, [r3, #24]
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	785a      	ldrb	r2, [r3, #1]
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	b29b      	uxth	r3, r3
 800b334:	2000      	movs	r0, #0
 800b336:	9000      	str	r0, [sp, #0]
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f7ff f9d5 	bl	800a6e8 <USB_WritePacket>
  }

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3728      	adds	r7, #40	@ 0x28
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	b29b      	uxth	r3, r3
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3714      	adds	r7, #20
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b36a:	b480      	push	{r7}
 800b36c:	b089      	sub	sp, #36	@ 0x24
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	460b      	mov	r3, r1
 800b374:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	0c9b      	lsrs	r3, r3, #18
 800b392:	f003 0303 	and.w	r3, r3, #3
 800b396:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	0fdb      	lsrs	r3, r3, #31
 800b3a8:	f003 0301 	and.w	r3, r3, #1
 800b3ac:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	0fdb      	lsrs	r3, r3, #31
 800b3be:	f003 0301 	and.w	r3, r3, #1
 800b3c2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f003 0320 	and.w	r3, r3, #32
 800b3cc:	2b20      	cmp	r3, #32
 800b3ce:	d10d      	bne.n	800b3ec <USB_HC_Halt+0x82>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10a      	bne.n	800b3ec <USB_HC_Halt+0x82>
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d002      	beq.n	800b3e8 <USB_HC_Halt+0x7e>
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2b03      	cmp	r3, #3
 800b3e6:	d101      	bne.n	800b3ec <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e0d8      	b.n	800b59e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <USB_HC_Halt+0x8e>
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d173      	bne.n	800b4e0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	015a      	lsls	r2, r3, #5
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	0151      	lsls	r1, r2, #5
 800b40a:	69fa      	ldr	r2, [r7, #28]
 800b40c:	440a      	add	r2, r1
 800b40e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b412:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b416:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	f003 0320 	and.w	r3, r3, #32
 800b420:	2b00      	cmp	r3, #0
 800b422:	d14a      	bne.n	800b4ba <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b428:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d133      	bne.n	800b498 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	4413      	add	r3, r2
 800b438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	0151      	lsls	r1, r2, #5
 800b442:	69fa      	ldr	r2, [r7, #28]
 800b444:	440a      	add	r2, r1
 800b446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b44a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b44e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	015a      	lsls	r2, r3, #5
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	4413      	add	r3, r2
 800b458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	69ba      	ldr	r2, [r7, #24]
 800b460:	0151      	lsls	r1, r2, #5
 800b462:	69fa      	ldr	r2, [r7, #28]
 800b464:	440a      	add	r2, r1
 800b466:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b46a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b46e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	3301      	adds	r3, #1
 800b474:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b47c:	d82e      	bhi.n	800b4dc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	4413      	add	r3, r2
 800b486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b494:	d0ec      	beq.n	800b470 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b496:	e081      	b.n	800b59c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69ba      	ldr	r2, [r7, #24]
 800b4a8:	0151      	lsls	r1, r2, #5
 800b4aa:	69fa      	ldr	r2, [r7, #28]
 800b4ac:	440a      	add	r2, r1
 800b4ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b4b6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b4b8:	e070      	b.n	800b59c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	015a      	lsls	r2, r3, #5
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	69ba      	ldr	r2, [r7, #24]
 800b4ca:	0151      	lsls	r1, r2, #5
 800b4cc:	69fa      	ldr	r2, [r7, #28]
 800b4ce:	440a      	add	r2, r1
 800b4d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b4d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b4da:	e05f      	b.n	800b59c <USB_HC_Halt+0x232>
            break;
 800b4dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b4de:	e05d      	b.n	800b59c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	69ba      	ldr	r2, [r7, #24]
 800b4f0:	0151      	lsls	r1, r2, #5
 800b4f2:	69fa      	ldr	r2, [r7, #28]
 800b4f4:	440a      	add	r2, r1
 800b4f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d133      	bne.n	800b578 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	4413      	add	r3, r2
 800b518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	0151      	lsls	r1, r2, #5
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	440a      	add	r2, r1
 800b526:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b52a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b52e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	4413      	add	r3, r2
 800b538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	69fa      	ldr	r2, [r7, #28]
 800b544:	440a      	add	r2, r1
 800b546:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b54a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b54e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	3301      	adds	r3, #1
 800b554:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b55c:	d81d      	bhi.n	800b59a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	015a      	lsls	r2, r3, #5
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	4413      	add	r3, r2
 800b566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b574:	d0ec      	beq.n	800b550 <USB_HC_Halt+0x1e6>
 800b576:	e011      	b.n	800b59c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	0151      	lsls	r1, r2, #5
 800b58a:	69fa      	ldr	r2, [r7, #28]
 800b58c:	440a      	add	r2, r1
 800b58e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b592:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b596:	6013      	str	r3, [r2, #0]
 800b598:	e000      	b.n	800b59c <USB_HC_Halt+0x232>
          break;
 800b59a:	bf00      	nop
    }
  }

  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3724      	adds	r7, #36	@ 0x24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
	...

0800b5ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b5bc:	78fb      	ldrb	r3, [r7, #3]
 800b5be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	04da      	lsls	r2, r3, #19
 800b5c8:	4b15      	ldr	r3, [pc, #84]	@ (800b620 <USB_DoPing+0x74>)
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	0151      	lsls	r1, r2, #5
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	440a      	add	r2, r1
 800b5d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b5dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	015a      	lsls	r2, r3, #5
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b5f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b5fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	015a      	lsls	r2, r3, #5
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	4413      	add	r3, r2
 800b606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b60a:	461a      	mov	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	371c      	adds	r7, #28
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	1ff80000 	.word	0x1ff80000

0800b624 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b088      	sub	sp, #32
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b634:	2300      	movs	r3, #0
 800b636:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7fe ff98 	bl	800a56e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b63e:	2110      	movs	r1, #16
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7fe fff1 	bl	800a628 <USB_FlushTxFifo>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7ff f81b 	bl	800a68c <USB_FlushRxFifo>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d001      	beq.n	800b660 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b660:	2300      	movs	r3, #0
 800b662:	61bb      	str	r3, [r7, #24]
 800b664:	e01f      	b.n	800b6a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	015a      	lsls	r2, r3, #5
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	4413      	add	r3, r2
 800b66e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b67c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b684:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b68c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	4413      	add	r3, r2
 800b696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b69a:	461a      	mov	r2, r3
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	61bb      	str	r3, [r7, #24]
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	2b0f      	cmp	r3, #15
 800b6aa:	d9dc      	bls.n	800b666 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	61bb      	str	r3, [r7, #24]
 800b6b0:	e034      	b.n	800b71c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	015a      	lsls	r2, r3, #5
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b6c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b6d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	015a      	lsls	r2, r3, #5
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b6f8:	d80c      	bhi.n	800b714 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	015a      	lsls	r2, r3, #5
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	4413      	add	r3, r2
 800b702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b70c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b710:	d0ec      	beq.n	800b6ec <USB_StopHost+0xc8>
 800b712:	e000      	b.n	800b716 <USB_StopHost+0xf2>
        break;
 800b714:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	3301      	adds	r3, #1
 800b71a:	61bb      	str	r3, [r7, #24]
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	2b0f      	cmp	r3, #15
 800b720:	d9c7      	bls.n	800b6b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b728:	461a      	mov	r2, r3
 800b72a:	f04f 33ff 	mov.w	r3, #4294967295
 800b72e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f04f 32ff 	mov.w	r2, #4294967295
 800b736:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7fe ff07 	bl	800a54c <USB_EnableGlobalInt>

  return ret;
 800b73e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3720      	adds	r7, #32
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b74c:	4904      	ldr	r1, [pc, #16]	@ (800b760 <MX_FATFS_Init+0x18>)
 800b74e:	4805      	ldr	r0, [pc, #20]	@ (800b764 <MX_FATFS_Init+0x1c>)
 800b750:	f002 fd74 	bl	800e23c <FATFS_LinkDriver>
 800b754:	4603      	mov	r3, r0
 800b756:	461a      	mov	r2, r3
 800b758:	4b03      	ldr	r3, [pc, #12]	@ (800b768 <MX_FATFS_Init+0x20>)
 800b75a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b75c:	bf00      	nop
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	200007bc 	.word	0x200007bc
 800b764:	08011344 	.word	0x08011344
 800b768:	200007b8 	.word	0x200007b8

0800b76c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b776:	f000 f87b 	bl	800b870 <BSP_SD_IsDetected>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d001      	beq.n	800b784 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	e012      	b.n	800b7aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b784:	480b      	ldr	r0, [pc, #44]	@ (800b7b4 <BSP_SD_Init+0x48>)
 800b786:	f7fb ff0d 	bl	80075a4 <HAL_SD_Init>
 800b78a:	4603      	mov	r3, r0
 800b78c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d109      	bne.n	800b7a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b794:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b798:	4806      	ldr	r0, [pc, #24]	@ (800b7b4 <BSP_SD_Init+0x48>)
 800b79a:	f7fc fb4f 	bl	8007e3c <HAL_SD_ConfigWideBusOperation>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b7a8:	79fb      	ldrb	r3, [r7, #7]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	200005c8 	.word	0x200005c8

0800b7b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	68f9      	ldr	r1, [r7, #12]
 800b7ce:	4806      	ldr	r0, [pc, #24]	@ (800b7e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b7d0:	f7fb ff98 	bl	8007704 <HAL_SD_ReadBlocks_DMA>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	200005c8 	.word	0x200005c8

0800b7ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	68f9      	ldr	r1, [r7, #12]
 800b802:	4806      	ldr	r0, [pc, #24]	@ (800b81c <BSP_SD_WriteBlocks_DMA+0x30>)
 800b804:	f7fc f85e 	bl	80078c4 <HAL_SD_WriteBlocks_DMA>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b812:	7dfb      	ldrb	r3, [r7, #23]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	200005c8 	.word	0x200005c8

0800b820 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b824:	4805      	ldr	r0, [pc, #20]	@ (800b83c <BSP_SD_GetCardState+0x1c>)
 800b826:	f7fc fba3 	bl	8007f70 <HAL_SD_GetCardState>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	bf14      	ite	ne
 800b830:	2301      	movne	r3, #1
 800b832:	2300      	moveq	r3, #0
 800b834:	b2db      	uxtb	r3, r3
}
 800b836:	4618      	mov	r0, r3
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	200005c8 	.word	0x200005c8

0800b840 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b848:	6879      	ldr	r1, [r7, #4]
 800b84a:	4803      	ldr	r0, [pc, #12]	@ (800b858 <BSP_SD_GetCardInfo+0x18>)
 800b84c:	f7fc faca 	bl	8007de4 <HAL_SD_GetCardInfo>
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	200005c8 	.word	0x200005c8

0800b85c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b864:	f000 f9b2 	bl	800bbcc <BSP_SD_ReadCpltCallback>
}
 800b868:	bf00      	nop
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b876:	2301      	movs	r3, #1
 800b878:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b87a:	f000 f80b 	bl	800b894 <BSP_PlatformIsDetected>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b884:	2300      	movs	r3, #0
 800b886:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b888:	79fb      	ldrb	r3, [r7, #7]
 800b88a:	b2db      	uxtb	r3, r3
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b89a:	2301      	movs	r3, #1
 800b89c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b89e:	2104      	movs	r1, #4
 800b8a0:	4806      	ldr	r0, [pc, #24]	@ (800b8bc <BSP_PlatformIsDetected+0x28>)
 800b8a2:	f7f7 fe03 	bl	80034ac <HAL_GPIO_ReadPin>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d001      	beq.n	800b8b0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b8b0:	79fb      	ldrb	r3, [r7, #7]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	40021800 	.word	0x40021800

0800b8c0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800b8c8:	f002 fd04 	bl	800e2d4 <osKernelSysTick>
 800b8cc:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800b8ce:	e006      	b.n	800b8de <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b8d0:	f7ff ffa6 	bl	800b820 <BSP_SD_GetCardState>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e009      	b.n	800b8f2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800b8de:	f002 fcf9 	bl	800e2d4 <osKernelSysTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d8f0      	bhi.n	800b8d0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b8ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	4603      	mov	r3, r0
 800b904:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b906:	4b0b      	ldr	r3, [pc, #44]	@ (800b934 <SD_CheckStatus+0x38>)
 800b908:	2201      	movs	r2, #1
 800b90a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b90c:	f7ff ff88 	bl	800b820 <BSP_SD_GetCardState>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d107      	bne.n	800b926 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b916:	4b07      	ldr	r3, [pc, #28]	@ (800b934 <SD_CheckStatus+0x38>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	f023 0301 	bic.w	r3, r3, #1
 800b920:	b2da      	uxtb	r2, r3
 800b922:	4b04      	ldr	r3, [pc, #16]	@ (800b934 <SD_CheckStatus+0x38>)
 800b924:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b926:	4b03      	ldr	r3, [pc, #12]	@ (800b934 <SD_CheckStatus+0x38>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	b2db      	uxtb	r3, r3
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	20000009 	.word	0x20000009

0800b938 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	4603      	mov	r3, r0
 800b940:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b942:	4b20      	ldr	r3, [pc, #128]	@ (800b9c4 <SD_initialize+0x8c>)
 800b944:	2201      	movs	r2, #1
 800b946:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800b948:	f002 fcb8 	bl	800e2bc <osKernelRunning>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d030      	beq.n	800b9b4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b952:	f7ff ff0b 	bl	800b76c <BSP_SD_Init>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d107      	bne.n	800b96c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b95c:	79fb      	ldrb	r3, [r7, #7]
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff ffcc 	bl	800b8fc <SD_CheckStatus>
 800b964:	4603      	mov	r3, r0
 800b966:	461a      	mov	r2, r3
 800b968:	4b16      	ldr	r3, [pc, #88]	@ (800b9c4 <SD_initialize+0x8c>)
 800b96a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b96c:	4b15      	ldr	r3, [pc, #84]	@ (800b9c4 <SD_initialize+0x8c>)
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b01      	cmp	r3, #1
 800b974:	d01e      	beq.n	800b9b4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800b976:	4b14      	ldr	r3, [pc, #80]	@ (800b9c8 <SD_initialize+0x90>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10e      	bne.n	800b99c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800b97e:	4b13      	ldr	r3, [pc, #76]	@ (800b9cc <SD_initialize+0x94>)
 800b980:	f107 0408 	add.w	r4, r7, #8
 800b984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800b98a:	f107 0308 	add.w	r3, r7, #8
 800b98e:	2100      	movs	r1, #0
 800b990:	4618      	mov	r0, r3
 800b992:	f002 fd0f 	bl	800e3b4 <osMessageCreate>
 800b996:	4603      	mov	r3, r0
 800b998:	4a0b      	ldr	r2, [pc, #44]	@ (800b9c8 <SD_initialize+0x90>)
 800b99a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800b99c:	4b0a      	ldr	r3, [pc, #40]	@ (800b9c8 <SD_initialize+0x90>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d107      	bne.n	800b9b4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800b9a4:	4b07      	ldr	r3, [pc, #28]	@ (800b9c4 <SD_initialize+0x8c>)
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	f043 0301 	orr.w	r3, r3, #1
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	4b04      	ldr	r3, [pc, #16]	@ (800b9c4 <SD_initialize+0x8c>)
 800b9b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b9b4:	4b03      	ldr	r3, [pc, #12]	@ (800b9c4 <SD_initialize+0x8c>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	b2db      	uxtb	r3, r3
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	371c      	adds	r7, #28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd90      	pop	{r4, r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20000009 	.word	0x20000009
 800b9c8:	200007c0 	.word	0x200007c0
 800b9cc:	080112d8 	.word	0x080112d8

0800b9d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b9da:	79fb      	ldrb	r3, [r7, #7]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff ff8d 	bl	800b8fc <SD_CheckStatus>
 800b9e2:	4603      	mov	r3, r0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08a      	sub	sp, #40	@ 0x28
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60b9      	str	r1, [r7, #8]
 800b9f4:	607a      	str	r2, [r7, #4]
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ba02:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ba06:	f7ff ff5b 	bl	800b8c0 <SD_CheckStatusWithTimeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	da02      	bge.n	800ba16 <SD_read+0x2a>
  {
    return res;
 800ba10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba14:	e032      	b.n	800ba7c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	6879      	ldr	r1, [r7, #4]
 800ba1a:	68b8      	ldr	r0, [r7, #8]
 800ba1c:	f7ff fecc 	bl	800b7b8 <BSP_SD_ReadBlocks_DMA>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800ba26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d124      	bne.n	800ba78 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ba2e:	4b15      	ldr	r3, [pc, #84]	@ (800ba84 <SD_read+0x98>)
 800ba30:	6819      	ldr	r1, [r3, #0]
 800ba32:	f107 0314 	add.w	r3, r7, #20
 800ba36:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f002 fd22 	bl	800e484 <osMessageGet>

    if (event.status == osEventMessage)
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b10      	cmp	r3, #16
 800ba44:	d118      	bne.n	800ba78 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d115      	bne.n	800ba78 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ba4c:	f002 fc42 	bl	800e2d4 <osKernelSysTick>
 800ba50:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ba52:	e008      	b.n	800ba66 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba54:	f7ff fee4 	bl	800b820 <BSP_SD_GetCardState>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d103      	bne.n	800ba66 <SD_read+0x7a>
              {
                res = RES_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ba64:	e008      	b.n	800ba78 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ba66:	f002 fc35 	bl	800e2d4 <osKernelSysTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d9ed      	bls.n	800ba54 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ba78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3728      	adds	r7, #40	@ 0x28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200007c0 	.word	0x200007c0

0800ba88 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08a      	sub	sp, #40	@ 0x28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60b9      	str	r1, [r7, #8]
 800ba90:	607a      	str	r2, [r7, #4]
 800ba92:	603b      	str	r3, [r7, #0]
 800ba94:	4603      	mov	r3, r0
 800ba96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ba9e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800baa2:	f7ff ff0d 	bl	800b8c0 <SD_CheckStatusWithTimeout>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	da02      	bge.n	800bab2 <SD_write+0x2a>
  {
    return res;
 800baac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bab0:	e02e      	b.n	800bb10 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	68b8      	ldr	r0, [r7, #8]
 800bab8:	f7ff fe98 	bl	800b7ec <BSP_SD_WriteBlocks_DMA>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d124      	bne.n	800bb0c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800bac2:	4b15      	ldr	r3, [pc, #84]	@ (800bb18 <SD_write+0x90>)
 800bac4:	6819      	ldr	r1, [r3, #0]
 800bac6:	f107 0314 	add.w	r3, r7, #20
 800baca:	f247 5230 	movw	r2, #30000	@ 0x7530
 800bace:	4618      	mov	r0, r3
 800bad0:	f002 fcd8 	bl	800e484 <osMessageGet>

    if (event.status == osEventMessage)
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	2b10      	cmp	r3, #16
 800bad8:	d118      	bne.n	800bb0c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	2b02      	cmp	r3, #2
 800bade:	d115      	bne.n	800bb0c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800bae0:	f002 fbf8 	bl	800e2d4 <osKernelSysTick>
 800bae4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bae6:	e008      	b.n	800bafa <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bae8:	f7ff fe9a 	bl	800b820 <BSP_SD_GetCardState>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d103      	bne.n	800bafa <SD_write+0x72>
          {
            res = RES_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800baf8:	e008      	b.n	800bb0c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800bafa:	f002 fbeb 	bl	800e2d4 <osKernelSysTick>
 800bafe:	4602      	mov	r2, r0
 800bb00:	6a3b      	ldr	r3, [r7, #32]
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	f247 522f 	movw	r2, #29999	@ 0x752f
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d9ed      	bls.n	800bae8 <SD_write+0x60>
    }

  }
#endif

  return res;
 800bb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3728      	adds	r7, #40	@ 0x28
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	200007c0 	.word	0x200007c0

0800bb1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08c      	sub	sp, #48	@ 0x30
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	603a      	str	r2, [r7, #0]
 800bb26:	71fb      	strb	r3, [r7, #7]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bb32:	4b25      	ldr	r3, [pc, #148]	@ (800bbc8 <SD_ioctl+0xac>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	f003 0301 	and.w	r3, r3, #1
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d001      	beq.n	800bb44 <SD_ioctl+0x28>
 800bb40:	2303      	movs	r3, #3
 800bb42:	e03c      	b.n	800bbbe <SD_ioctl+0xa2>

  switch (cmd)
 800bb44:	79bb      	ldrb	r3, [r7, #6]
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d834      	bhi.n	800bbb4 <SD_ioctl+0x98>
 800bb4a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb50 <SD_ioctl+0x34>)
 800bb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb50:	0800bb61 	.word	0x0800bb61
 800bb54:	0800bb69 	.word	0x0800bb69
 800bb58:	0800bb81 	.word	0x0800bb81
 800bb5c:	0800bb9b 	.word	0x0800bb9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bb66:	e028      	b.n	800bbba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb68:	f107 030c 	add.w	r3, r7, #12
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff fe67 	bl	800b840 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bb72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bb7e:	e01c      	b.n	800bbba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb80:	f107 030c 	add.w	r3, r7, #12
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff fe5b 	bl	800b840 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bb98:	e00f      	b.n	800bbba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb9a:	f107 030c 	add.w	r3, r7, #12
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff fe4e 	bl	800b840 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba6:	0a5a      	lsrs	r2, r3, #9
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bbb2:	e002      	b.n	800bbba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bbb4:	2304      	movs	r3, #4
 800bbb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800bbba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3730      	adds	r7, #48	@ 0x30
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000009 	.word	0x20000009

0800bbcc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800bbd0:	4b04      	ldr	r3, [pc, #16]	@ (800bbe4 <BSP_SD_ReadCpltCallback+0x18>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f002 fc13 	bl	800e404 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800bbde:	bf00      	nop
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	200007c0 	.word	0x200007c0

0800bbe8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bbe8:	b590      	push	{r4, r7, lr}
 800bbea:	b089      	sub	sp, #36	@ 0x24
 800bbec:	af04      	add	r7, sp, #16
 800bbee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	2102      	movs	r1, #2
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fcd7 	bl	800c5aa <USBH_FindInterface>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
 800bc02:	2bff      	cmp	r3, #255	@ 0xff
 800bc04:	d002      	beq.n	800bc0c <USBH_CDC_InterfaceInit+0x24>
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d901      	bls.n	800bc10 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	e13d      	b.n	800be8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fcac 	bl	800c572 <USBH_SelectInterface>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bc1e:	7bbb      	ldrb	r3, [r7, #14]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bc24:	2302      	movs	r3, #2
 800bc26:	e131      	b.n	800be8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800bc2e:	2050      	movs	r0, #80	@ 0x50
 800bc30:	f005 f954 	bl	8010edc <malloc>
 800bc34:	4603      	mov	r3, r0
 800bc36:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc3e:	69db      	ldr	r3, [r3, #28]
 800bc40:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e11f      	b.n	800be8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bc4c:	2250      	movs	r2, #80	@ 0x50
 800bc4e:	2100      	movs	r1, #0
 800bc50:	68b8      	ldr	r0, [r7, #8]
 800bc52:	f005 fa01 	bl	8011058 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	211a      	movs	r1, #26
 800bc5c:	fb01 f303 	mul.w	r3, r1, r3
 800bc60:	4413      	add	r3, r2
 800bc62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	b25b      	sxtb	r3, r3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	da15      	bge.n	800bc9a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	211a      	movs	r1, #26
 800bc74:	fb01 f303 	mul.w	r3, r1, r3
 800bc78:	4413      	add	r3, r2
 800bc7a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bc7e:	781a      	ldrb	r2, [r3, #0]
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	211a      	movs	r1, #26
 800bc8a:	fb01 f303 	mul.w	r3, r1, r3
 800bc8e:	4413      	add	r3, r2
 800bc90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bc94:	881a      	ldrh	r2, [r3, #0]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	785b      	ldrb	r3, [r3, #1]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f002 fa1c 	bl	800e0de <USBH_AllocPipe>
 800bca6:	4603      	mov	r3, r0
 800bca8:	461a      	mov	r2, r3
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	7819      	ldrb	r1, [r3, #0]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	7858      	ldrb	r0, [r3, #1]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	8952      	ldrh	r2, [r2, #10]
 800bcc6:	9202      	str	r2, [sp, #8]
 800bcc8:	2203      	movs	r2, #3
 800bcca:	9201      	str	r2, [sp, #4]
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	4623      	mov	r3, r4
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f002 f9d4 	bl	800e080 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f005 f875 	bl	8010dd0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bce6:	2300      	movs	r3, #0
 800bce8:	2200      	movs	r2, #0
 800bcea:	210a      	movs	r1, #10
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fc5c 	bl	800c5aa <USBH_FindInterface>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bcf6:	7bfb      	ldrb	r3, [r7, #15]
 800bcf8:	2bff      	cmp	r3, #255	@ 0xff
 800bcfa:	d002      	beq.n	800bd02 <USBH_CDC_InterfaceInit+0x11a>
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d901      	bls.n	800bd06 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bd02:	2302      	movs	r3, #2
 800bd04:	e0c2      	b.n	800be8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	211a      	movs	r1, #26
 800bd0c:	fb01 f303 	mul.w	r3, r1, r3
 800bd10:	4413      	add	r3, r2
 800bd12:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	b25b      	sxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	da16      	bge.n	800bd4c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	211a      	movs	r1, #26
 800bd24:	fb01 f303 	mul.w	r3, r1, r3
 800bd28:	4413      	add	r3, r2
 800bd2a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bd2e:	781a      	ldrb	r2, [r3, #0]
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	211a      	movs	r1, #26
 800bd3a:	fb01 f303 	mul.w	r3, r1, r3
 800bd3e:	4413      	add	r3, r2
 800bd40:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bd44:	881a      	ldrh	r2, [r3, #0]
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	835a      	strh	r2, [r3, #26]
 800bd4a:	e015      	b.n	800bd78 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	211a      	movs	r1, #26
 800bd52:	fb01 f303 	mul.w	r3, r1, r3
 800bd56:	4413      	add	r3, r2
 800bd58:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bd5c:	781a      	ldrb	r2, [r3, #0]
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	211a      	movs	r1, #26
 800bd68:	fb01 f303 	mul.w	r3, r1, r3
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bd72:	881a      	ldrh	r2, [r3, #0]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	211a      	movs	r1, #26
 800bd7e:	fb01 f303 	mul.w	r3, r1, r3
 800bd82:	4413      	add	r3, r2
 800bd84:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	b25b      	sxtb	r3, r3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	da16      	bge.n	800bdbe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	211a      	movs	r1, #26
 800bd96:	fb01 f303 	mul.w	r3, r1, r3
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800bda0:	781a      	ldrb	r2, [r3, #0]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	211a      	movs	r1, #26
 800bdac:	fb01 f303 	mul.w	r3, r1, r3
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800bdb6:	881a      	ldrh	r2, [r3, #0]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	835a      	strh	r2, [r3, #26]
 800bdbc:	e015      	b.n	800bdea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	211a      	movs	r1, #26
 800bdc4:	fb01 f303 	mul.w	r3, r1, r3
 800bdc8:	4413      	add	r3, r2
 800bdca:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800bdce:	781a      	ldrb	r2, [r3, #0]
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	211a      	movs	r1, #26
 800bdda:	fb01 f303 	mul.w	r3, r1, r3
 800bdde:	4413      	add	r3, r2
 800bde0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800bde4:	881a      	ldrh	r2, [r3, #0]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	7b9b      	ldrb	r3, [r3, #14]
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f002 f974 	bl	800e0de <USBH_AllocPipe>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	7bdb      	ldrb	r3, [r3, #15]
 800be02:	4619      	mov	r1, r3
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f002 f96a 	bl	800e0de <USBH_AllocPipe>
 800be0a:	4603      	mov	r3, r0
 800be0c:	461a      	mov	r2, r3
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	7b59      	ldrb	r1, [r3, #13]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	7b98      	ldrb	r0, [r3, #14]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	8b12      	ldrh	r2, [r2, #24]
 800be2a:	9202      	str	r2, [sp, #8]
 800be2c:	2202      	movs	r2, #2
 800be2e:	9201      	str	r2, [sp, #4]
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	4623      	mov	r3, r4
 800be34:	4602      	mov	r2, r0
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f002 f922 	bl	800e080 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	7b19      	ldrb	r1, [r3, #12]
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	7bd8      	ldrb	r0, [r3, #15]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	8b52      	ldrh	r2, [r2, #26]
 800be54:	9202      	str	r2, [sp, #8]
 800be56:	2202      	movs	r2, #2
 800be58:	9201      	str	r2, [sp, #4]
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	4623      	mov	r3, r4
 800be5e:	4602      	mov	r2, r0
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f002 f90d 	bl	800e080 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	7b5b      	ldrb	r3, [r3, #13]
 800be72:	2200      	movs	r2, #0
 800be74:	4619      	mov	r1, r3
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f004 ffaa 	bl	8010dd0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	7b1b      	ldrb	r3, [r3, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	4619      	mov	r1, r3
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f004 ffa3 	bl	8010dd0 <USBH_LL_SetToggle>

  return USBH_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	bd90      	pop	{r4, r7, pc}

0800be94 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bea2:	69db      	ldr	r3, [r3, #28]
 800bea4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00e      	beq.n	800becc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f002 f902 	bl	800e0be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f002 f92d 	bl	800e120 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	7b1b      	ldrb	r3, [r3, #12]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00e      	beq.n	800bef2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	7b1b      	ldrb	r3, [r3, #12]
 800bed8:	4619      	mov	r1, r3
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f002 f8ef 	bl	800e0be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	7b1b      	ldrb	r3, [r3, #12]
 800bee4:	4619      	mov	r1, r3
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f002 f91a 	bl	800e120 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	7b5b      	ldrb	r3, [r3, #13]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00e      	beq.n	800bf18 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	7b5b      	ldrb	r3, [r3, #13]
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f002 f8dc 	bl	800e0be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	7b5b      	ldrb	r3, [r3, #13]
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f002 f907 	bl	800e120 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf1e:	69db      	ldr	r3, [r3, #28]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00b      	beq.n	800bf3c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf2a:	69db      	ldr	r3, [r3, #28]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f004 ffdd 	bl	8010eec <free>
    phost->pActiveClass->pData = 0U;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf38:	2200      	movs	r2, #0
 800bf3a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b084      	sub	sp, #16
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	3340      	adds	r3, #64	@ 0x40
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f8b1 	bl	800c0c6 <GetLineCoding>
 800bf64:	4603      	mov	r3, r0
 800bf66:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800bf68:	7afb      	ldrb	r3, [r7, #11]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d105      	bne.n	800bf7a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bf74:	2102      	movs	r1, #2
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800bf7a:	7afb      	ldrb	r3, [r7, #11]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800bfa4:	2b04      	cmp	r3, #4
 800bfa6:	d877      	bhi.n	800c098 <USBH_CDC_Process+0x114>
 800bfa8:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb0 <USBH_CDC_Process+0x2c>)
 800bfaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfae:	bf00      	nop
 800bfb0:	0800bfc5 	.word	0x0800bfc5
 800bfb4:	0800bfcb 	.word	0x0800bfcb
 800bfb8:	0800bffb 	.word	0x0800bffb
 800bfbc:	0800c06f 	.word	0x0800c06f
 800bfc0:	0800c07d 	.word	0x0800c07d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]
      break;
 800bfc8:	e06d      	b.n	800c0a6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f897 	bl	800c104 <SetLineCoding>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d104      	bne.n	800bfea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bfe8:	e058      	b.n	800c09c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800bfea:	7bbb      	ldrb	r3, [r7, #14]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d055      	beq.n	800c09c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2204      	movs	r2, #4
 800bff4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800bff8:	e050      	b.n	800c09c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	3340      	adds	r3, #64	@ 0x40
 800bffe:	4619      	mov	r1, r3
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f860 	bl	800c0c6 <GetLineCoding>
 800c006:	4603      	mov	r3, r0
 800c008:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d126      	bne.n	800c05e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c022:	791b      	ldrb	r3, [r3, #4]
 800c024:	429a      	cmp	r2, r3
 800c026:	d13b      	bne.n	800c0a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c032:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c034:	429a      	cmp	r2, r3
 800c036:	d133      	bne.n	800c0a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c042:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c044:	429a      	cmp	r2, r3
 800c046:	d12b      	bne.n	800c0a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c050:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c052:	429a      	cmp	r2, r3
 800c054:	d124      	bne.n	800c0a0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f982 	bl	800c360 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c05c:	e020      	b.n	800c0a0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c05e:	7bbb      	ldrb	r3, [r7, #14]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d01d      	beq.n	800c0a0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	2204      	movs	r2, #4
 800c068:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c06c:	e018      	b.n	800c0a0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f867 	bl	800c142 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f8f6 	bl	800c266 <CDC_ProcessReception>
      break;
 800c07a:	e014      	b.n	800c0a6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c07c:	2100      	movs	r1, #0
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 f988 	bl	800d394 <USBH_ClrFeature>
 800c084:	4603      	mov	r3, r0
 800c086:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800c096:	e005      	b.n	800c0a4 <USBH_CDC_Process+0x120>

    default:
      break;
 800c098:	bf00      	nop
 800c09a:	e004      	b.n	800c0a6 <USBH_CDC_Process+0x122>
      break;
 800c09c:	bf00      	nop
 800c09e:	e002      	b.n	800c0a6 <USBH_CDC_Process+0x122>
      break;
 800c0a0:	bf00      	nop
 800c0a2:	e000      	b.n	800c0a6 <USBH_CDC_Process+0x122>
      break;
 800c0a4:	bf00      	nop

  }

  return status;
 800c0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	22a1      	movs	r2, #161	@ 0xa1
 800c0d4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2221      	movs	r2, #33	@ 0x21
 800c0da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2207      	movs	r2, #7
 800c0ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	2207      	movs	r2, #7
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f001 fc82 	bl	800d9fe <USBH_CtlReq>
 800c0fa:	4603      	mov	r3, r0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2221      	movs	r2, #33	@ 0x21
 800c112:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2220      	movs	r2, #32
 800c118:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2207      	movs	r2, #7
 800c12a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2207      	movs	r2, #7
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f001 fc63 	bl	800d9fe <USBH_CtlReq>
 800c138:	4603      	mov	r3, r0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b086      	sub	sp, #24
 800c146:	af02      	add	r7, sp, #8
 800c148:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c154:	2300      	movs	r3, #0
 800c156:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d002      	beq.n	800c168 <CDC_ProcessTransmission+0x26>
 800c162:	2b02      	cmp	r3, #2
 800c164:	d023      	beq.n	800c1ae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c166:	e07a      	b.n	800c25e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	8b12      	ldrh	r2, [r2, #24]
 800c170:	4293      	cmp	r3, r2
 800c172:	d90b      	bls.n	800c18c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	69d9      	ldr	r1, [r3, #28]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8b1a      	ldrh	r2, [r3, #24]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	7b5b      	ldrb	r3, [r3, #13]
 800c180:	2001      	movs	r0, #1
 800c182:	9000      	str	r0, [sp, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 ff38 	bl	800dffa <USBH_BulkSendData>
 800c18a:	e00b      	b.n	800c1a4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800c194:	b29a      	uxth	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	7b5b      	ldrb	r3, [r3, #13]
 800c19a:	2001      	movs	r0, #1
 800c19c:	9000      	str	r0, [sp, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f001 ff2b 	bl	800dffa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c1ac:	e057      	b.n	800c25e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	7b5b      	ldrb	r3, [r3, #13]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f004 fde1 	bl	8010d7c <USBH_LL_GetURBState>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c1be:	7afb      	ldrb	r3, [r7, #11]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d136      	bne.n	800c232 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	8b12      	ldrh	r2, [r2, #24]
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d90e      	bls.n	800c1ee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	8b12      	ldrh	r2, [r2, #24]
 800c1d8:	1a9a      	subs	r2, r3, r2
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	69db      	ldr	r3, [r3, #28]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	8b12      	ldrh	r2, [r2, #24]
 800c1e6:	441a      	add	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	61da      	str	r2, [r3, #28]
 800c1ec:	e002      	b.n	800c1f4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d004      	beq.n	800c206 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800c204:	e006      	b.n	800c214 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f892 	bl	800c338 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2204      	movs	r2, #4
 800c218:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c228:	2200      	movs	r2, #0
 800c22a:	4619      	mov	r1, r3
 800c22c:	f002 f8ea 	bl	800e404 <osMessagePut>
      break;
 800c230:	e014      	b.n	800c25c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800c232:	7afb      	ldrb	r3, [r7, #11]
 800c234:	2b02      	cmp	r3, #2
 800c236:	d111      	bne.n	800c25c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2204      	movs	r2, #4
 800c244:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c254:	2200      	movs	r2, #0
 800c256:	4619      	mov	r1, r3
 800c258:	f002 f8d4 	bl	800e404 <osMessagePut>
      break;
 800c25c:	bf00      	nop
  }
}
 800c25e:	bf00      	nop
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b086      	sub	sp, #24
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c274:	69db      	ldr	r3, [r3, #28]
 800c276:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c278:	2300      	movs	r3, #0
 800c27a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800c282:	2b03      	cmp	r3, #3
 800c284:	d002      	beq.n	800c28c <CDC_ProcessReception+0x26>
 800c286:	2b04      	cmp	r3, #4
 800c288:	d00e      	beq.n	800c2a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c28a:	e051      	b.n	800c330 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	6a19      	ldr	r1, [r3, #32]
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	8b5a      	ldrh	r2, [r3, #26]
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	7b1b      	ldrb	r3, [r3, #12]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f001 fed3 	bl	800e044 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2204      	movs	r2, #4
 800c2a2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c2a6:	e043      	b.n	800c330 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	7b1b      	ldrb	r3, [r3, #12]
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f004 fd64 	bl	8010d7c <USBH_LL_GetURBState>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c2b8:	7cfb      	ldrb	r3, [r7, #19]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d137      	bne.n	800c32e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	7b1b      	ldrb	r3, [r3, #12]
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f004 fcc7 	bl	8010c58 <USBH_LL_GetLastXferSize>
 800c2ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d016      	beq.n	800c304 <CDC_ProcessReception+0x9e>
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	8b5b      	ldrh	r3, [r3, #26]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d110      	bne.n	800c304 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	1ad2      	subs	r2, r2, r3
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	6a1a      	ldr	r2, [r3, #32]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	441a      	add	r2, r3
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2203      	movs	r2, #3
 800c2fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800c302:	e006      	b.n	800c312 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f81d 	bl	800c34c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2204      	movs	r2, #4
 800c316:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c326:	2200      	movs	r2, #0
 800c328:	4619      	mov	r1, r3
 800c32a:	f002 f86b 	bl	800e404 <osMessagePut>
      break;
 800c32e:	bf00      	nop
  }
}
 800c330:	bf00      	nop
 800c332:	3718      	adds	r7, #24
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c354:	bf00      	nop
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c374:	b5b0      	push	{r4, r5, r7, lr}
 800c376:	b090      	sub	sp, #64	@ 0x40
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	4613      	mov	r3, r2
 800c380:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c388:	2302      	movs	r3, #2
 800c38a:	e04d      	b.n	800c428 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	79fa      	ldrb	r2, [r7, #7]
 800c390:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f000 f847 	bl	800c438 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d003      	beq.n	800c3d8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800c3d8:	4b15      	ldr	r3, [pc, #84]	@ (800c430 <USBH_Init+0xbc>)
 800c3da:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800c3de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c3e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800c3e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f001 ffe2 	bl	800e3b4 <osMessageCreate>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800c3f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c434 <USBH_Init+0xc0>)
 800c3fa:	f107 0414 	add.w	r4, r7, #20
 800c3fe:	461d      	mov	r5, r3
 800c400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c404:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c408:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800c40c:	f107 0314 	add.w	r3, r7, #20
 800c410:	68f9      	ldr	r1, [r7, #12]
 800c412:	4618      	mov	r0, r3
 800c414:	f001 ff6e 	bl	800e2f4 <osThreadCreate>
 800c418:	4602      	mov	r2, r0
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f004 fb65 	bl	8010af0 <USBH_LL_Init>

  return USBH_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3740      	adds	r7, #64	@ 0x40
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bdb0      	pop	{r4, r5, r7, pc}
 800c430:	080112ec 	.word	0x080112ec
 800c434:	08011308 	.word	0x08011308

0800c438 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c440:	2300      	movs	r3, #0
 800c442:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c444:	2300      	movs	r3, #0
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	e009      	b.n	800c45e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	33e0      	adds	r3, #224	@ 0xe0
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	2200      	movs	r2, #0
 800c456:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	3301      	adds	r3, #1
 800c45c:	60fb      	str	r3, [r7, #12]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2b0f      	cmp	r3, #15
 800c462:	d9f2      	bls.n	800c44a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	e009      	b.n	800c47e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	4413      	add	r3, r2
 800c470:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c474:	2200      	movs	r2, #0
 800c476:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3301      	adds	r3, #1
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c484:	d3f1      	bcc.n	800c46a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2201      	movs	r2, #1
 800c496:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2240      	movs	r2, #64	@ 0x40
 800c4aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	331c      	adds	r3, #28
 800c4d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c4da:	2100      	movs	r1, #0
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f004 fdbb 	bl	8011058 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c4e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f004 fdb2 	bl	8011058 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c4fa:	2212      	movs	r2, #18
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f004 fdaa 	bl	8011058 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c50a:	223e      	movs	r2, #62	@ 0x3e
 800c50c:	2100      	movs	r1, #0
 800c50e:	4618      	mov	r0, r3
 800c510:	f004 fda2 	bl	8011058 <memset>

  return USBH_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c51e:	b480      	push	{r7}
 800c520:	b085      	sub	sp, #20
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d016      	beq.n	800c560 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10e      	bne.n	800c55a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c542:	1c59      	adds	r1, r3, #1
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	33de      	adds	r3, #222	@ 0xde
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	73fb      	strb	r3, [r7, #15]
 800c558:	e004      	b.n	800c564 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c55a:	2302      	movs	r3, #2
 800c55c:	73fb      	strb	r3, [r7, #15]
 800c55e:	e001      	b.n	800c564 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c560:	2302      	movs	r3, #2
 800c562:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c564:	7bfb      	ldrb	r3, [r7, #15]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c572:	b480      	push	{r7}
 800c574:	b085      	sub	sp, #20
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	460b      	mov	r3, r1
 800c57c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c57e:	2300      	movs	r3, #0
 800c580:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c588:	78fa      	ldrb	r2, [r7, #3]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d204      	bcs.n	800c598 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	78fa      	ldrb	r2, [r7, #3]
 800c592:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c596:	e001      	b.n	800c59c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c598:	2302      	movs	r3, #2
 800c59a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3714      	adds	r7, #20
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b087      	sub	sp, #28
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	4608      	mov	r0, r1
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	70fb      	strb	r3, [r7, #3]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	70bb      	strb	r3, [r7, #2]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c5d2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c5d4:	e025      	b.n	800c622 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
 800c5d8:	221a      	movs	r2, #26
 800c5da:	fb02 f303 	mul.w	r3, r2, r3
 800c5de:	3308      	adds	r3, #8
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	3302      	adds	r3, #2
 800c5e6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	795b      	ldrb	r3, [r3, #5]
 800c5ec:	78fa      	ldrb	r2, [r7, #3]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d002      	beq.n	800c5f8 <USBH_FindInterface+0x4e>
 800c5f2:	78fb      	ldrb	r3, [r7, #3]
 800c5f4:	2bff      	cmp	r3, #255	@ 0xff
 800c5f6:	d111      	bne.n	800c61c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c5fc:	78ba      	ldrb	r2, [r7, #2]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d002      	beq.n	800c608 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c602:	78bb      	ldrb	r3, [r7, #2]
 800c604:	2bff      	cmp	r3, #255	@ 0xff
 800c606:	d109      	bne.n	800c61c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c60c:	787a      	ldrb	r2, [r7, #1]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d002      	beq.n	800c618 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c612:	787b      	ldrb	r3, [r7, #1]
 800c614:	2bff      	cmp	r3, #255	@ 0xff
 800c616:	d101      	bne.n	800c61c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c618:	7dfb      	ldrb	r3, [r7, #23]
 800c61a:	e006      	b.n	800c62a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c61c:	7dfb      	ldrb	r3, [r7, #23]
 800c61e:	3301      	adds	r3, #1
 800c620:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c622:	7dfb      	ldrb	r3, [r7, #23]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d9d6      	bls.n	800c5d6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c628:	23ff      	movs	r3, #255	@ 0xff
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	371c      	adds	r7, #28
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f004 fa92 	bl	8010b68 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c644:	2101      	movs	r1, #1
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f004 fbab 	bl	8010da2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
	...

0800c658 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b088      	sub	sp, #32
 800c65c:	af04      	add	r7, sp, #16
 800c65e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c660:	2302      	movs	r3, #2
 800c662:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c664:	2300      	movs	r3, #0
 800c666:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b01      	cmp	r3, #1
 800c672:	d102      	bne.n	800c67a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2203      	movs	r2, #3
 800c678:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	2b0b      	cmp	r3, #11
 800c682:	f200 8244 	bhi.w	800cb0e <USBH_Process+0x4b6>
 800c686:	a201      	add	r2, pc, #4	@ (adr r2, 800c68c <USBH_Process+0x34>)
 800c688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68c:	0800c6bd 	.word	0x0800c6bd
 800c690:	0800c70b 	.word	0x0800c70b
 800c694:	0800c78f 	.word	0x0800c78f
 800c698:	0800ca8d 	.word	0x0800ca8d
 800c69c:	0800cb0f 	.word	0x0800cb0f
 800c6a0:	0800c84b 	.word	0x0800c84b
 800c6a4:	0800ca17 	.word	0x0800ca17
 800c6a8:	0800c89d 	.word	0x0800c89d
 800c6ac:	0800c8d9 	.word	0x0800c8d9
 800c6b0:	0800c911 	.word	0x0800c911
 800c6b4:	0800c96f 	.word	0x0800c96f
 800c6b8:	0800ca75 	.word	0x0800ca75
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 8224 	beq.w	800cb12 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c6d0:	20c8      	movs	r0, #200	@ 0xc8
 800c6d2:	f004 fbb0 	bl	8010e36 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f004 faa3 	bl	8010c22 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c700:	2200      	movs	r2, #0
 800c702:	4619      	mov	r1, r3
 800c704:	f001 fe7e 	bl	800e404 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c708:	e203      	b.n	800cb12 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c710:	2b01      	cmp	r3, #1
 800c712:	d107      	bne.n	800c724 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2202      	movs	r2, #2
 800c720:	701a      	strb	r2, [r3, #0]
 800c722:	e025      	b.n	800c770 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c72a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c72e:	d914      	bls.n	800c75a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c736:	3301      	adds	r3, #1
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c746:	2b03      	cmp	r3, #3
 800c748:	d903      	bls.n	800c752 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	220d      	movs	r2, #13
 800c74e:	701a      	strb	r2, [r3, #0]
 800c750:	e00e      	b.n	800c770 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	701a      	strb	r2, [r3, #0]
 800c758:	e00a      	b.n	800c770 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c760:	f103 020a 	add.w	r2, r3, #10
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c76a:	200a      	movs	r0, #10
 800c76c:	f004 fb63 	bl	8010e36 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c784:	2200      	movs	r2, #0
 800c786:	4619      	mov	r1, r3
 800c788:	f001 fe3c 	bl	800e404 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c78c:	e1c8      	b.n	800cb20 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c794:	2b00      	cmp	r3, #0
 800c796:	d005      	beq.n	800c7a4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c79e:	2104      	movs	r1, #4
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c7a4:	2064      	movs	r0, #100	@ 0x64
 800c7a6:	f004 fb46 	bl	8010e36 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f004 fa12 	bl	8010bd4 <USBH_LL_GetSpeed>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2205      	movs	r2, #5
 800c7be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f001 fc8b 	bl	800e0de <USBH_AllocPipe>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c7d0:	2180      	movs	r1, #128	@ 0x80
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f001 fc83 	bl	800e0de <USBH_AllocPipe>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	461a      	mov	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	7919      	ldrb	r1, [r3, #4]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c7f4:	9202      	str	r2, [sp, #8]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	9201      	str	r2, [sp, #4]
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2280      	movs	r2, #128	@ 0x80
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f001 fc3d 	bl	800e080 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7959      	ldrb	r1, [r3, #5]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c81a:	9202      	str	r2, [sp, #8]
 800c81c:	2200      	movs	r2, #0
 800c81e:	9201      	str	r2, [sp, #4]
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	4603      	mov	r3, r0
 800c824:	2200      	movs	r2, #0
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f001 fc2a 	bl	800e080 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c840:	2200      	movs	r2, #0
 800c842:	4619      	mov	r1, r3
 800c844:	f001 fdde 	bl	800e404 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c848:	e16a      	b.n	800cb20 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f96e 	bl	800cb2c <USBH_HandleEnum>
 800c850:	4603      	mov	r3, r0
 800c852:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c854:	7bbb      	ldrb	r3, [r7, #14]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f040 815c 	bne.w	800cb16 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d103      	bne.n	800c878 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2208      	movs	r2, #8
 800c874:	701a      	strb	r2, [r3, #0]
 800c876:	e002      	b.n	800c87e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2207      	movs	r2, #7
 800c87c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2205      	movs	r2, #5
 800c882:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c892:	2200      	movs	r2, #0
 800c894:	4619      	mov	r1, r3
 800c896:	f001 fdb5 	bl	800e404 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c89a:	e13c      	b.n	800cb16 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 8139 	beq.w	800cb1a <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2208      	movs	r2, #8
 800c8b8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2205      	movs	r2, #5
 800c8be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f001 fd97 	bl	800e404 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c8d6:	e120      	b.n	800cb1a <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fd10 	bl	800d306 <USBH_SetCfg>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d102      	bne.n	800c8f2 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2209      	movs	r2, #9
 800c8f0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c906:	2200      	movs	r2, #0
 800c908:	4619      	mov	r1, r3
 800c90a:	f001 fd7b 	bl	800e404 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c90e:	e107      	b.n	800cb20 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c916:	f003 0320 	and.w	r3, r3, #32
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d015      	beq.n	800c94a <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c91e:	2101      	movs	r1, #1
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fd13 	bl	800d34c <USBH_SetFeature>
 800c926:	4603      	mov	r3, r0
 800c928:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c92a:	7bbb      	ldrb	r3, [r7, #14]
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d103      	bne.n	800c93a <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	220a      	movs	r2, #10
 800c936:	701a      	strb	r2, [r3, #0]
 800c938:	e00a      	b.n	800c950 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800c93a:	7bbb      	ldrb	r3, [r7, #14]
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d106      	bne.n	800c950 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	220a      	movs	r2, #10
 800c946:	701a      	strb	r2, [r3, #0]
 800c948:	e002      	b.n	800c950 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	220a      	movs	r2, #10
 800c94e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c964:	2200      	movs	r2, #0
 800c966:	4619      	mov	r1, r3
 800c968:	f001 fd4c 	bl	800e404 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c96c:	e0d8      	b.n	800cb20 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c974:	2b00      	cmp	r3, #0
 800c976:	d03f      	beq.n	800c9f8 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c980:	2300      	movs	r3, #0
 800c982:	73fb      	strb	r3, [r7, #15]
 800c984:	e016      	b.n	800c9b4 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c986:	7bfa      	ldrb	r2, [r7, #15]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	32de      	adds	r2, #222	@ 0xde
 800c98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c990:	791a      	ldrb	r2, [r3, #4]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c998:	429a      	cmp	r2, r3
 800c99a:	d108      	bne.n	800c9ae <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c99c:	7bfa      	ldrb	r2, [r7, #15]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	32de      	adds	r2, #222	@ 0xde
 800c9a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c9ac:	e005      	b.n	800c9ba <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	73fb      	strb	r3, [r7, #15]
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d0e5      	beq.n	800c986 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d016      	beq.n	800c9f2 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	4798      	blx	r3
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d109      	bne.n	800c9ea <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2206      	movs	r2, #6
 800c9da:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c9e2:	2103      	movs	r1, #3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	4798      	blx	r3
 800c9e8:	e006      	b.n	800c9f8 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	220d      	movs	r2, #13
 800c9ee:	701a      	strb	r2, [r3, #0]
 800c9f0:	e002      	b.n	800c9f8 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	220d      	movs	r2, #13
 800c9f6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2205      	movs	r2, #5
 800c9fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	4619      	mov	r1, r3
 800ca10:	f001 fcf8 	bl	800e404 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ca14:	e084      	b.n	800cb20 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d017      	beq.n	800ca50 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	4798      	blx	r3
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d103      	bne.n	800ca40 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	220b      	movs	r2, #11
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	e00a      	b.n	800ca56 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	2b02      	cmp	r3, #2
 800ca46:	d106      	bne.n	800ca56 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	220d      	movs	r2, #13
 800ca4c:	701a      	strb	r2, [r3, #0]
 800ca4e:	e002      	b.n	800ca56 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	220d      	movs	r2, #13
 800ca54:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2205      	movs	r2, #5
 800ca5a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	f001 fcc9 	bl	800e404 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ca72:	e055      	b.n	800cb20 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d04f      	beq.n	800cb1e <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	4798      	blx	r3
      }
      break;
 800ca8a:	e048      	b.n	800cb1e <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7ff fccf 	bl	800c438 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d009      	beq.n	800cab8 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d005      	beq.n	800cace <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cac8:	2105      	movs	r1, #5
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d107      	bne.n	800caea <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff fda7 	bl	800c636 <USBH_Start>
 800cae8:	e002      	b.n	800caf0 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f004 f83c 	bl	8010b68 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cb04:	2200      	movs	r2, #0
 800cb06:	4619      	mov	r1, r3
 800cb08:	f001 fc7c 	bl	800e404 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb0c:	e008      	b.n	800cb20 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800cb0e:	bf00      	nop
 800cb10:	e006      	b.n	800cb20 <USBH_Process+0x4c8>
      break;
 800cb12:	bf00      	nop
 800cb14:	e004      	b.n	800cb20 <USBH_Process+0x4c8>
      break;
 800cb16:	bf00      	nop
 800cb18:	e002      	b.n	800cb20 <USBH_Process+0x4c8>
    break;
 800cb1a:	bf00      	nop
 800cb1c:	e000      	b.n	800cb20 <USBH_Process+0x4c8>
      break;
 800cb1e:	bf00      	nop
  }
  return USBH_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop

0800cb2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b088      	sub	sp, #32
 800cb30:	af04      	add	r7, sp, #16
 800cb32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cb34:	2301      	movs	r3, #1
 800cb36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	785b      	ldrb	r3, [r3, #1]
 800cb40:	2b07      	cmp	r3, #7
 800cb42:	f200 8204 	bhi.w	800cf4e <USBH_HandleEnum+0x422>
 800cb46:	a201      	add	r2, pc, #4	@ (adr r2, 800cb4c <USBH_HandleEnum+0x20>)
 800cb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4c:	0800cb6d 	.word	0x0800cb6d
 800cb50:	0800cc27 	.word	0x0800cc27
 800cb54:	0800cc91 	.word	0x0800cc91
 800cb58:	0800cd1b 	.word	0x0800cd1b
 800cb5c:	0800cd85 	.word	0x0800cd85
 800cb60:	0800cdf5 	.word	0x0800cdf5
 800cb64:	0800ce91 	.word	0x0800ce91
 800cb68:	0800cf0f 	.word	0x0800cf0f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cb6c:	2108      	movs	r1, #8
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fae6 	bl	800d140 <USBH_Get_DevDesc>
 800cb74:	4603      	mov	r3, r0
 800cb76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cb78:	7bbb      	ldrb	r3, [r7, #14]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d12e      	bne.n	800cbdc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	7919      	ldrb	r1, [r3, #4]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cba2:	9202      	str	r2, [sp, #8]
 800cba4:	2200      	movs	r2, #0
 800cba6:	9201      	str	r2, [sp, #4]
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2280      	movs	r2, #128	@ 0x80
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 fa66 	bl	800e080 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	7959      	ldrb	r1, [r3, #5]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cbc8:	9202      	str	r2, [sp, #8]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	9201      	str	r2, [sp, #4]
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f001 fa53 	bl	800e080 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cbda:	e1ba      	b.n	800cf52 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	2b03      	cmp	r3, #3
 800cbe0:	f040 81b7 	bne.w	800cf52 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cbea:	3301      	adds	r3, #1
 800cbec:	b2da      	uxtb	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d903      	bls.n	800cc06 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	220d      	movs	r2, #13
 800cc02:	701a      	strb	r2, [r3, #0]
      break;
 800cc04:	e1a5      	b.n	800cf52 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	795b      	ldrb	r3, [r3, #5]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f001 fa87 	bl	800e120 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	791b      	ldrb	r3, [r3, #4]
 800cc16:	4619      	mov	r1, r3
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f001 fa81 	bl	800e120 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	701a      	strb	r2, [r3, #0]
      break;
 800cc24:	e195      	b.n	800cf52 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cc26:	2112      	movs	r1, #18
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 fa89 	bl	800d140 <USBH_Get_DevDesc>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc32:	7bbb      	ldrb	r3, [r7, #14]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d103      	bne.n	800cc40 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cc3e:	e18a      	b.n	800cf56 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	2b03      	cmp	r3, #3
 800cc44:	f040 8187 	bne.w	800cf56 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cc4e:	3301      	adds	r3, #1
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d903      	bls.n	800cc6a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	220d      	movs	r2, #13
 800cc66:	701a      	strb	r2, [r3, #0]
      break;
 800cc68:	e175      	b.n	800cf56 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	795b      	ldrb	r3, [r3, #5]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 fa55 	bl	800e120 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	791b      	ldrb	r3, [r3, #4]
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f001 fa4f 	bl	800e120 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	701a      	strb	r2, [r3, #0]
      break;
 800cc8e:	e162      	b.n	800cf56 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cc90:	2101      	movs	r1, #1
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fb13 	bl	800d2be <USBH_SetAddress>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc9c:	7bbb      	ldrb	r3, [r7, #14]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d130      	bne.n	800cd04 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800cca2:	2002      	movs	r0, #2
 800cca4:	f004 f8c7 	bl	8010e36 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2203      	movs	r2, #3
 800ccb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	7919      	ldrb	r1, [r3, #4]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ccca:	9202      	str	r2, [sp, #8]
 800cccc:	2200      	movs	r2, #0
 800ccce:	9201      	str	r2, [sp, #4]
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2280      	movs	r2, #128	@ 0x80
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f001 f9d2 	bl	800e080 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	7959      	ldrb	r1, [r3, #5]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ccf0:	9202      	str	r2, [sp, #8]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	9201      	str	r2, [sp, #4]
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f001 f9bf 	bl	800e080 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cd02:	e12a      	b.n	800cf5a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd04:	7bbb      	ldrb	r3, [r7, #14]
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	f040 8127 	bne.w	800cf5a <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	220d      	movs	r2, #13
 800cd10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	705a      	strb	r2, [r3, #1]
      break;
 800cd18:	e11f      	b.n	800cf5a <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cd1a:	2109      	movs	r1, #9
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fa3b 	bl	800d198 <USBH_Get_CfgDesc>
 800cd22:	4603      	mov	r3, r0
 800cd24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd26:	7bbb      	ldrb	r3, [r7, #14]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d103      	bne.n	800cd34 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2204      	movs	r2, #4
 800cd30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cd32:	e114      	b.n	800cf5e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	f040 8111 	bne.w	800cf5e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cd42:	3301      	adds	r3, #1
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d903      	bls.n	800cd5e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	220d      	movs	r2, #13
 800cd5a:	701a      	strb	r2, [r3, #0]
      break;
 800cd5c:	e0ff      	b.n	800cf5e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	795b      	ldrb	r3, [r3, #5]
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f001 f9db 	bl	800e120 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	791b      	ldrb	r3, [r3, #4]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f001 f9d5 	bl	800e120 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	701a      	strb	r2, [r3, #0]
      break;
 800cd82:	e0ec      	b.n	800cf5e <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 fa03 	bl	800d198 <USBH_Get_CfgDesc>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d103      	bne.n	800cda4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2205      	movs	r2, #5
 800cda0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cda2:	e0de      	b.n	800cf62 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cda4:	7bbb      	ldrb	r3, [r7, #14]
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	f040 80db 	bne.w	800cf62 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cdc2:	2b03      	cmp	r3, #3
 800cdc4:	d903      	bls.n	800cdce <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	220d      	movs	r2, #13
 800cdca:	701a      	strb	r2, [r3, #0]
      break;
 800cdcc:	e0c9      	b.n	800cf62 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	795b      	ldrb	r3, [r3, #5]
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f001 f9a3 	bl	800e120 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	791b      	ldrb	r3, [r3, #4]
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f001 f99d 	bl	800e120 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	701a      	strb	r2, [r3, #0]
      break;
 800cdf2:	e0b6      	b.n	800cf62 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d036      	beq.n	800ce6c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ce0a:	23ff      	movs	r3, #255	@ 0xff
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f9ed 	bl	800d1ec <USBH_Get_StringDesc>
 800ce12:	4603      	mov	r3, r0
 800ce14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ce16:	7bbb      	ldrb	r3, [r7, #14]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d111      	bne.n	800ce40 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2206      	movs	r2, #6
 800ce20:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2205      	movs	r2, #5
 800ce26:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ce36:	2200      	movs	r2, #0
 800ce38:	4619      	mov	r1, r3
 800ce3a:	f001 fae3 	bl	800e404 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ce3e:	e092      	b.n	800cf66 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	f040 808f 	bne.w	800cf66 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2206      	movs	r2, #6
 800ce4c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2205      	movs	r2, #5
 800ce52:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ce62:	2200      	movs	r2, #0
 800ce64:	4619      	mov	r1, r3
 800ce66:	f001 facd 	bl	800e404 <osMessagePut>
      break;
 800ce6a:	e07c      	b.n	800cf66 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2206      	movs	r2, #6
 800ce70:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2205      	movs	r2, #5
 800ce76:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ce86:	2200      	movs	r2, #0
 800ce88:	4619      	mov	r1, r3
 800ce8a:	f001 fabb 	bl	800e404 <osMessagePut>
      break;
 800ce8e:	e06a      	b.n	800cf66 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d027      	beq.n	800ceea <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cea6:	23ff      	movs	r3, #255	@ 0xff
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f99f 	bl	800d1ec <USBH_Get_StringDesc>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ceb2:	7bbb      	ldrb	r3, [r7, #14]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d103      	bne.n	800cec0 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2207      	movs	r2, #7
 800cebc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cebe:	e054      	b.n	800cf6a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	2b03      	cmp	r3, #3
 800cec4:	d151      	bne.n	800cf6a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2207      	movs	r2, #7
 800ceca:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2205      	movs	r2, #5
 800ced0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cee0:	2200      	movs	r2, #0
 800cee2:	4619      	mov	r1, r3
 800cee4:	f001 fa8e 	bl	800e404 <osMessagePut>
      break;
 800cee8:	e03f      	b.n	800cf6a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2207      	movs	r2, #7
 800ceee:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2205      	movs	r2, #5
 800cef4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cf04:	2200      	movs	r2, #0
 800cf06:	4619      	mov	r1, r3
 800cf08:	f001 fa7c 	bl	800e404 <osMessagePut>
      break;
 800cf0c:	e02d      	b.n	800cf6a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d017      	beq.n	800cf48 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cf24:	23ff      	movs	r3, #255	@ 0xff
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f960 	bl	800d1ec <USBH_Get_StringDesc>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cf30:	7bbb      	ldrb	r3, [r7, #14]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d102      	bne.n	800cf3c <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cf36:	2300      	movs	r3, #0
 800cf38:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cf3a:	e018      	b.n	800cf6e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf3c:	7bbb      	ldrb	r3, [r7, #14]
 800cf3e:	2b03      	cmp	r3, #3
 800cf40:	d115      	bne.n	800cf6e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]
      break;
 800cf46:	e012      	b.n	800cf6e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf4c:	e00f      	b.n	800cf6e <USBH_HandleEnum+0x442>

    default:
      break;
 800cf4e:	bf00      	nop
 800cf50:	e00e      	b.n	800cf70 <USBH_HandleEnum+0x444>
      break;
 800cf52:	bf00      	nop
 800cf54:	e00c      	b.n	800cf70 <USBH_HandleEnum+0x444>
      break;
 800cf56:	bf00      	nop
 800cf58:	e00a      	b.n	800cf70 <USBH_HandleEnum+0x444>
      break;
 800cf5a:	bf00      	nop
 800cf5c:	e008      	b.n	800cf70 <USBH_HandleEnum+0x444>
      break;
 800cf5e:	bf00      	nop
 800cf60:	e006      	b.n	800cf70 <USBH_HandleEnum+0x444>
      break;
 800cf62:	bf00      	nop
 800cf64:	e004      	b.n	800cf70 <USBH_HandleEnum+0x444>
      break;
 800cf66:	bf00      	nop
 800cf68:	e002      	b.n	800cf70 <USBH_HandleEnum+0x444>
      break;
 800cf6a:	bf00      	nop
 800cf6c:	e000      	b.n	800cf70 <USBH_HandleEnum+0x444>
      break;
 800cf6e:	bf00      	nop
  }
  return Status;
 800cf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop

0800cf7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800cf8e:	bf00      	nop
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b082      	sub	sp, #8
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cfa8:	1c5a      	adds	r2, r3, #1
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f804 	bl	800cfbe <USBH_HandleSof>
}
 800cfb6:	bf00      	nop
 800cfb8:	3708      	adds	r7, #8
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b082      	sub	sp, #8
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b0b      	cmp	r3, #11
 800cfce:	d10a      	bne.n	800cfe6 <USBH_HandleSof+0x28>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d005      	beq.n	800cfe6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	4798      	blx	r3
  }
}
 800cfe6:	bf00      	nop
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b082      	sub	sp, #8
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d012:	2200      	movs	r2, #0
 800d014:	4619      	mov	r1, r3
 800d016:	f001 f9f5 	bl	800e404 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d01a:	bf00      	nop
}
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d022:	b480      	push	{r7}
 800d024:	b083      	sub	sp, #12
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d032:	bf00      	nop
}
 800d034:	370c      	adds	r7, #12
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr

0800d03e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b082      	sub	sp, #8
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d072:	2200      	movs	r2, #0
 800d074:	4619      	mov	r1, r3
 800d076:	f001 f9c5 	bl	800e404 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2201      	movs	r2, #1
 800d090:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f003 fd7a 	bl	8010b9e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	791b      	ldrb	r3, [r3, #4]
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f001 f835 	bl	800e120 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	795b      	ldrb	r3, [r3, #5]
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f001 f82f 	bl	800e120 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	4619      	mov	r1, r3
 800d0da:	f001 f993 	bl	800e404 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 800d0f6:	f107 030c 	add.w	r3, r7, #12
 800d0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 f9c0 	bl	800e484 <osMessageGet>
    if (event.status == osEventMessage)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b10      	cmp	r3, #16
 800d108:	d1f2      	bne.n	800d0f0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff faa4 	bl	800c658 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d110:	e7ee      	b.n	800d0f0 <USBH_Process_OS+0x8>

0800d112 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b082      	sub	sp, #8
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800d12e:	2200      	movs	r2, #0
 800d130:	4619      	mov	r1, r3
 800d132:	f001 f967 	bl	800e404 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af02      	add	r7, sp, #8
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	460b      	mov	r3, r1
 800d14a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d14c:	887b      	ldrh	r3, [r7, #2]
 800d14e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d152:	d901      	bls.n	800d158 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d154:	2303      	movs	r3, #3
 800d156:	e01b      	b.n	800d190 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d15e:	887b      	ldrh	r3, [r7, #2]
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	4613      	mov	r3, r2
 800d164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d168:	2100      	movs	r1, #0
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f872 	bl	800d254 <USBH_GetDescriptor>
 800d170:	4603      	mov	r3, r0
 800d172:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d174:	7bfb      	ldrb	r3, [r7, #15]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d109      	bne.n	800d18e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d180:	887a      	ldrh	r2, [r7, #2]
 800d182:	4619      	mov	r1, r3
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f929 	bl	800d3dc <USBH_ParseDevDesc>
 800d18a:	4603      	mov	r3, r0
 800d18c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af02      	add	r7, sp, #8
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	331c      	adds	r3, #28
 800d1a8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d1aa:	887b      	ldrh	r3, [r7, #2]
 800d1ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1b0:	d901      	bls.n	800d1b6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	e016      	b.n	800d1e4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d1b6:	887b      	ldrh	r3, [r7, #2]
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 f846 	bl	800d254 <USBH_GetDescriptor>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d107      	bne.n	800d1e2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d1d2:	887b      	ldrh	r3, [r7, #2]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	68b9      	ldr	r1, [r7, #8]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f9af 	bl	800d53c <USBH_ParseCfgDesc>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b088      	sub	sp, #32
 800d1f0:	af02      	add	r7, sp, #8
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	607a      	str	r2, [r7, #4]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	72fb      	strb	r3, [r7, #11]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d200:	893b      	ldrh	r3, [r7, #8]
 800d202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d206:	d802      	bhi.n	800d20e <USBH_Get_StringDesc+0x22>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d101      	bne.n	800d212 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d20e:	2303      	movs	r3, #3
 800d210:	e01c      	b.n	800d24c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d212:	7afb      	ldrb	r3, [r7, #11]
 800d214:	b29b      	uxth	r3, r3
 800d216:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d21a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d222:	893b      	ldrh	r3, [r7, #8]
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	460b      	mov	r3, r1
 800d228:	2100      	movs	r1, #0
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f000 f812 	bl	800d254 <USBH_GetDescriptor>
 800d230:	4603      	mov	r3, r0
 800d232:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d234:	7dfb      	ldrb	r3, [r7, #23]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d107      	bne.n	800d24a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d240:	893a      	ldrh	r2, [r7, #8]
 800d242:	6879      	ldr	r1, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	f000 fb8d 	bl	800d964 <USBH_ParseStringDesc>
  }

  return status;
 800d24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3718      	adds	r7, #24
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	607b      	str	r3, [r7, #4]
 800d25e:	460b      	mov	r3, r1
 800d260:	72fb      	strb	r3, [r7, #11]
 800d262:	4613      	mov	r3, r2
 800d264:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	789b      	ldrb	r3, [r3, #2]
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d11c      	bne.n	800d2a8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d26e:	7afb      	ldrb	r3, [r7, #11]
 800d270:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d274:	b2da      	uxtb	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2206      	movs	r2, #6
 800d27e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	893a      	ldrh	r2, [r7, #8]
 800d284:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d286:	893b      	ldrh	r3, [r7, #8]
 800d288:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d28c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d290:	d104      	bne.n	800d29c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f240 4209 	movw	r2, #1033	@ 0x409
 800d298:	829a      	strh	r2, [r3, #20]
 800d29a:	e002      	b.n	800d2a2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	8b3a      	ldrh	r2, [r7, #24]
 800d2a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d2a8:	8b3b      	ldrh	r3, [r7, #24]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	6879      	ldr	r1, [r7, #4]
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f000 fba5 	bl	800d9fe <USBH_CtlReq>
 800d2b4:	4603      	mov	r3, r0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b082      	sub	sp, #8
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	789b      	ldrb	r3, [r3, #2]
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d10f      	bne.n	800d2f2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2205      	movs	r2, #5
 800d2dc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d2de:	78fb      	ldrb	r3, [r7, #3]
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 fb81 	bl	800d9fe <USBH_CtlReq>
 800d2fc:	4603      	mov	r3, r0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b082      	sub	sp, #8
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	789b      	ldrb	r3, [r3, #2]
 800d316:	2b01      	cmp	r3, #1
 800d318:	d10e      	bne.n	800d338 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2209      	movs	r2, #9
 800d324:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	887a      	ldrh	r2, [r7, #2]
 800d32a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d338:	2200      	movs	r2, #0
 800d33a:	2100      	movs	r1, #0
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fb5e 	bl	800d9fe <USBH_CtlReq>
 800d342:	4603      	mov	r3, r0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	460b      	mov	r3, r1
 800d356:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	789b      	ldrb	r3, [r3, #2]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d10f      	bne.n	800d380 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2203      	movs	r2, #3
 800d36a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d36c:	78fb      	ldrb	r3, [r7, #3]
 800d36e:	b29a      	uxth	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d380:	2200      	movs	r2, #0
 800d382:	2100      	movs	r1, #0
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fb3a 	bl	800d9fe <USBH_CtlReq>
 800d38a:	4603      	mov	r3, r0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	789b      	ldrb	r3, [r3, #2]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d10f      	bne.n	800d3c8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d3ba:	78fb      	ldrb	r3, [r7, #3]
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 fb16 	bl	800d9fe <USBH_CtlReq>
 800d3d2:	4603      	mov	r3, r0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b087      	sub	sp, #28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d3f0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d101      	bne.n	800d400 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d3fc:	2302      	movs	r3, #2
 800d3fe:	e094      	b.n	800d52a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	781a      	ldrb	r2, [r3, #0]
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	785a      	ldrb	r2, [r3, #1]
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	3302      	adds	r3, #2
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	461a      	mov	r2, r3
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	3303      	adds	r3, #3
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	021b      	lsls	r3, r3, #8
 800d420:	b29b      	uxth	r3, r3
 800d422:	4313      	orrs	r3, r2
 800d424:	b29a      	uxth	r2, r3
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	791a      	ldrb	r2, [r3, #4]
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	795a      	ldrb	r2, [r3, #5]
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	799a      	ldrb	r2, [r3, #6]
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	79da      	ldrb	r2, [r3, #7]
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d450:	2b00      	cmp	r3, #0
 800d452:	d004      	beq.n	800d45e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d11b      	bne.n	800d496 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	79db      	ldrb	r3, [r3, #7]
 800d462:	2b20      	cmp	r3, #32
 800d464:	dc0f      	bgt.n	800d486 <USBH_ParseDevDesc+0xaa>
 800d466:	2b08      	cmp	r3, #8
 800d468:	db0f      	blt.n	800d48a <USBH_ParseDevDesc+0xae>
 800d46a:	3b08      	subs	r3, #8
 800d46c:	4a32      	ldr	r2, [pc, #200]	@ (800d538 <USBH_ParseDevDesc+0x15c>)
 800d46e:	fa22 f303 	lsr.w	r3, r2, r3
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	2b00      	cmp	r3, #0
 800d478:	bf14      	ite	ne
 800d47a:	2301      	movne	r3, #1
 800d47c:	2300      	moveq	r3, #0
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	d106      	bne.n	800d492 <USBH_ParseDevDesc+0xb6>
 800d484:	e001      	b.n	800d48a <USBH_ParseDevDesc+0xae>
 800d486:	2b40      	cmp	r3, #64	@ 0x40
 800d488:	d003      	beq.n	800d492 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	2208      	movs	r2, #8
 800d48e:	71da      	strb	r2, [r3, #7]
        break;
 800d490:	e000      	b.n	800d494 <USBH_ParseDevDesc+0xb8>
        break;
 800d492:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d494:	e00e      	b.n	800d4b4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d107      	bne.n	800d4b0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	79db      	ldrb	r3, [r3, #7]
 800d4a4:	2b08      	cmp	r3, #8
 800d4a6:	d005      	beq.n	800d4b4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2208      	movs	r2, #8
 800d4ac:	71da      	strb	r2, [r3, #7]
 800d4ae:	e001      	b.n	800d4b4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d4b4:	88fb      	ldrh	r3, [r7, #6]
 800d4b6:	2b08      	cmp	r3, #8
 800d4b8:	d936      	bls.n	800d528 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	3308      	adds	r3, #8
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	3309      	adds	r3, #9
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	021b      	lsls	r3, r3, #8
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	330a      	adds	r3, #10
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	330b      	adds	r3, #11
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	021b      	lsls	r3, r3, #8
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	330c      	adds	r3, #12
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	330d      	adds	r3, #13
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	021b      	lsls	r3, r3, #8
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	4313      	orrs	r3, r2
 800d502:	b29a      	uxth	r2, r3
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	7b9a      	ldrb	r2, [r3, #14]
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	7bda      	ldrb	r2, [r3, #15]
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	7c1a      	ldrb	r2, [r3, #16]
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	7c5a      	ldrb	r2, [r3, #17]
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d528:	7dfb      	ldrb	r3, [r7, #23]
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	371c      	adds	r7, #28
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	01000101 	.word	0x01000101

0800d53c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08c      	sub	sp, #48	@ 0x30
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	4613      	mov	r3, r2
 800d548:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d550:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d558:	2300      	movs	r3, #0
 800d55a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d55e:	2300      	movs	r3, #0
 800d560:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d56a:	2302      	movs	r3, #2
 800d56c:	e0da      	b.n	800d724 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b09      	cmp	r3, #9
 800d578:	d002      	beq.n	800d580 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57c:	2209      	movs	r2, #9
 800d57e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	781a      	ldrb	r2, [r3, #0]
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	785a      	ldrb	r2, [r3, #1]
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	3302      	adds	r3, #2
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	461a      	mov	r2, r3
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	3303      	adds	r3, #3
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	021b      	lsls	r3, r3, #8
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5aa:	bf28      	it	cs
 800d5ac:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	6a3b      	ldr	r3, [r7, #32]
 800d5b4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	791a      	ldrb	r2, [r3, #4]
 800d5ba:	6a3b      	ldr	r3, [r7, #32]
 800d5bc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	795a      	ldrb	r2, [r3, #5]
 800d5c2:	6a3b      	ldr	r3, [r7, #32]
 800d5c4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	799a      	ldrb	r2, [r3, #6]
 800d5ca:	6a3b      	ldr	r3, [r7, #32]
 800d5cc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	79da      	ldrb	r2, [r3, #7]
 800d5d2:	6a3b      	ldr	r3, [r7, #32]
 800d5d4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	7a1a      	ldrb	r2, [r3, #8]
 800d5da:	6a3b      	ldr	r3, [r7, #32]
 800d5dc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d5de:	88fb      	ldrh	r3, [r7, #6]
 800d5e0:	2b09      	cmp	r3, #9
 800d5e2:	f240 809d 	bls.w	800d720 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d5e6:	2309      	movs	r3, #9
 800d5e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d5ee:	e081      	b.n	800d6f4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d5f0:	f107 0316 	add.w	r3, r7, #22
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5f8:	f000 f9e7 	bl	800d9ca <USBH_GetNextDesc>
 800d5fc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d600:	785b      	ldrb	r3, [r3, #1]
 800d602:	2b04      	cmp	r3, #4
 800d604:	d176      	bne.n	800d6f4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	2b09      	cmp	r3, #9
 800d60c:	d002      	beq.n	800d614 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d610:	2209      	movs	r2, #9
 800d612:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d614:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d618:	221a      	movs	r2, #26
 800d61a:	fb02 f303 	mul.w	r3, r2, r3
 800d61e:	3308      	adds	r3, #8
 800d620:	6a3a      	ldr	r2, [r7, #32]
 800d622:	4413      	add	r3, r2
 800d624:	3302      	adds	r3, #2
 800d626:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d62a:	69f8      	ldr	r0, [r7, #28]
 800d62c:	f000 f87e 	bl	800d72c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d630:	2300      	movs	r3, #0
 800d632:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d636:	2300      	movs	r3, #0
 800d638:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d63a:	e043      	b.n	800d6c4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d63c:	f107 0316 	add.w	r3, r7, #22
 800d640:	4619      	mov	r1, r3
 800d642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d644:	f000 f9c1 	bl	800d9ca <USBH_GetNextDesc>
 800d648:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64c:	785b      	ldrb	r3, [r3, #1]
 800d64e:	2b05      	cmp	r3, #5
 800d650:	d138      	bne.n	800d6c4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	795b      	ldrb	r3, [r3, #5]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d113      	bne.n	800d682 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d65e:	2b02      	cmp	r3, #2
 800d660:	d003      	beq.n	800d66a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	799b      	ldrb	r3, [r3, #6]
 800d666:	2b03      	cmp	r3, #3
 800d668:	d10b      	bne.n	800d682 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	79db      	ldrb	r3, [r3, #7]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10b      	bne.n	800d68a <USBH_ParseCfgDesc+0x14e>
 800d672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b09      	cmp	r3, #9
 800d678:	d007      	beq.n	800d68a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d67c:	2209      	movs	r2, #9
 800d67e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d680:	e003      	b.n	800d68a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d684:	2207      	movs	r2, #7
 800d686:	701a      	strb	r2, [r3, #0]
 800d688:	e000      	b.n	800d68c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d68a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d68c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d690:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d694:	3201      	adds	r2, #1
 800d696:	00d2      	lsls	r2, r2, #3
 800d698:	211a      	movs	r1, #26
 800d69a:	fb01 f303 	mul.w	r3, r1, r3
 800d69e:	4413      	add	r3, r2
 800d6a0:	3308      	adds	r3, #8
 800d6a2:	6a3a      	ldr	r2, [r7, #32]
 800d6a4:	4413      	add	r3, r2
 800d6a6:	3304      	adds	r3, #4
 800d6a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d6aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6ac:	69b9      	ldr	r1, [r7, #24]
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f000 f870 	bl	800d794 <USBH_ParseEPDesc>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d6ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d6be:	3301      	adds	r3, #1
 800d6c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	791b      	ldrb	r3, [r3, #4]
 800d6c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d204      	bcs.n	800d6da <USBH_ParseCfgDesc+0x19e>
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	885a      	ldrh	r2, [r3, #2]
 800d6d4:	8afb      	ldrh	r3, [r7, #22]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d8b0      	bhi.n	800d63c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	791b      	ldrb	r3, [r3, #4]
 800d6de:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d201      	bcs.n	800d6ea <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d6e6:	2303      	movs	r3, #3
 800d6e8:	e01c      	b.n	800d724 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d6ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d805      	bhi.n	800d708 <USBH_ParseCfgDesc+0x1cc>
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	885a      	ldrh	r2, [r3, #2]
 800d700:	8afb      	ldrh	r3, [r7, #22]
 800d702:	429a      	cmp	r2, r3
 800d704:	f63f af74 	bhi.w	800d5f0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d708:	6a3b      	ldr	r3, [r7, #32]
 800d70a:	791b      	ldrb	r3, [r3, #4]
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	bf28      	it	cs
 800d710:	2302      	movcs	r3, #2
 800d712:	b2db      	uxtb	r3, r3
 800d714:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d718:	429a      	cmp	r2, r3
 800d71a:	d201      	bcs.n	800d720 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d71c:	2303      	movs	r3, #3
 800d71e:	e001      	b.n	800d724 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d720:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d724:	4618      	mov	r0, r3
 800d726:	3730      	adds	r7, #48	@ 0x30
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	781a      	ldrb	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	785a      	ldrb	r2, [r3, #1]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	789a      	ldrb	r2, [r3, #2]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	78da      	ldrb	r2, [r3, #3]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	3304      	adds	r3, #4
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	2b02      	cmp	r3, #2
 800d75e:	bf28      	it	cs
 800d760:	2302      	movcs	r3, #2
 800d762:	b2da      	uxtb	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	795a      	ldrb	r2, [r3, #5]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	799a      	ldrb	r2, [r3, #6]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	79da      	ldrb	r2, [r3, #7]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	7a1a      	ldrb	r2, [r3, #8]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	721a      	strb	r2, [r3, #8]
}
 800d788:	bf00      	nop
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d794:	b480      	push	{r7}
 800d796:	b087      	sub	sp, #28
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	781a      	ldrb	r2, [r3, #0]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	785a      	ldrb	r2, [r3, #1]
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	789a      	ldrb	r2, [r3, #2]
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	78da      	ldrb	r2, [r3, #3]
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	3305      	adds	r3, #5
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	021b      	lsls	r3, r3, #8
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	799a      	ldrb	r2, [r3, #6]
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	889b      	ldrh	r3, [r3, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d009      	beq.n	800d802 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d7f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7f6:	d804      	bhi.n	800d802 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d7fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d800:	d901      	bls.n	800d806 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d802:	2303      	movs	r3, #3
 800d804:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d136      	bne.n	800d87e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	78db      	ldrb	r3, [r3, #3]
 800d814:	f003 0303 	and.w	r3, r3, #3
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d108      	bne.n	800d82e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	889b      	ldrh	r3, [r3, #4]
 800d820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d824:	f240 8097 	bls.w	800d956 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d828:	2303      	movs	r3, #3
 800d82a:	75fb      	strb	r3, [r7, #23]
 800d82c:	e093      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	78db      	ldrb	r3, [r3, #3]
 800d832:	f003 0303 	and.w	r3, r3, #3
 800d836:	2b00      	cmp	r3, #0
 800d838:	d107      	bne.n	800d84a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	889b      	ldrh	r3, [r3, #4]
 800d83e:	2b40      	cmp	r3, #64	@ 0x40
 800d840:	f240 8089 	bls.w	800d956 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d844:	2303      	movs	r3, #3
 800d846:	75fb      	strb	r3, [r7, #23]
 800d848:	e085      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	78db      	ldrb	r3, [r3, #3]
 800d84e:	f003 0303 	and.w	r3, r3, #3
 800d852:	2b01      	cmp	r3, #1
 800d854:	d005      	beq.n	800d862 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	78db      	ldrb	r3, [r3, #3]
 800d85a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d10a      	bne.n	800d878 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	799b      	ldrb	r3, [r3, #6]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <USBH_ParseEPDesc+0xde>
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	799b      	ldrb	r3, [r3, #6]
 800d86e:	2b10      	cmp	r3, #16
 800d870:	d970      	bls.n	800d954 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d872:	2303      	movs	r3, #3
 800d874:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d876:	e06d      	b.n	800d954 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d878:	2303      	movs	r3, #3
 800d87a:	75fb      	strb	r3, [r7, #23]
 800d87c:	e06b      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d884:	2b01      	cmp	r3, #1
 800d886:	d13c      	bne.n	800d902 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	78db      	ldrb	r3, [r3, #3]
 800d88c:	f003 0303 	and.w	r3, r3, #3
 800d890:	2b02      	cmp	r3, #2
 800d892:	d005      	beq.n	800d8a0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	78db      	ldrb	r3, [r3, #3]
 800d898:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d106      	bne.n	800d8ae <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	889b      	ldrh	r3, [r3, #4]
 800d8a4:	2b40      	cmp	r3, #64	@ 0x40
 800d8a6:	d956      	bls.n	800d956 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d8ac:	e053      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	78db      	ldrb	r3, [r3, #3]
 800d8b2:	f003 0303 	and.w	r3, r3, #3
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d10e      	bne.n	800d8d8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	799b      	ldrb	r3, [r3, #6]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d007      	beq.n	800d8d2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d8c6:	2b10      	cmp	r3, #16
 800d8c8:	d803      	bhi.n	800d8d2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d8ce:	2b40      	cmp	r3, #64	@ 0x40
 800d8d0:	d941      	bls.n	800d956 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	75fb      	strb	r3, [r7, #23]
 800d8d6:	e03e      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	78db      	ldrb	r3, [r3, #3]
 800d8dc:	f003 0303 	and.w	r3, r3, #3
 800d8e0:	2b03      	cmp	r3, #3
 800d8e2:	d10b      	bne.n	800d8fc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	799b      	ldrb	r3, [r3, #6]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d004      	beq.n	800d8f6 <USBH_ParseEPDesc+0x162>
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	889b      	ldrh	r3, [r3, #4]
 800d8f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8f4:	d32f      	bcc.n	800d956 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	75fb      	strb	r3, [r7, #23]
 800d8fa:	e02c      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	75fb      	strb	r3, [r7, #23]
 800d900:	e029      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d908:	2b02      	cmp	r3, #2
 800d90a:	d120      	bne.n	800d94e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	78db      	ldrb	r3, [r3, #3]
 800d910:	f003 0303 	and.w	r3, r3, #3
 800d914:	2b00      	cmp	r3, #0
 800d916:	d106      	bne.n	800d926 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	889b      	ldrh	r3, [r3, #4]
 800d91c:	2b08      	cmp	r3, #8
 800d91e:	d01a      	beq.n	800d956 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d920:	2303      	movs	r3, #3
 800d922:	75fb      	strb	r3, [r7, #23]
 800d924:	e017      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	78db      	ldrb	r3, [r3, #3]
 800d92a:	f003 0303 	and.w	r3, r3, #3
 800d92e:	2b03      	cmp	r3, #3
 800d930:	d10a      	bne.n	800d948 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	799b      	ldrb	r3, [r3, #6]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d003      	beq.n	800d942 <USBH_ParseEPDesc+0x1ae>
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	889b      	ldrh	r3, [r3, #4]
 800d93e:	2b08      	cmp	r3, #8
 800d940:	d909      	bls.n	800d956 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d942:	2303      	movs	r3, #3
 800d944:	75fb      	strb	r3, [r7, #23]
 800d946:	e006      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d948:	2303      	movs	r3, #3
 800d94a:	75fb      	strb	r3, [r7, #23]
 800d94c:	e003      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d94e:	2303      	movs	r3, #3
 800d950:	75fb      	strb	r3, [r7, #23]
 800d952:	e000      	b.n	800d956 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d954:	bf00      	nop
  }

  return status;
 800d956:	7dfb      	ldrb	r3, [r7, #23]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	371c      	adds	r7, #28
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d964:	b480      	push	{r7}
 800d966:	b087      	sub	sp, #28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	4613      	mov	r3, r2
 800d970:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3301      	adds	r3, #1
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	2b03      	cmp	r3, #3
 800d97a:	d120      	bne.n	800d9be <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	1e9a      	subs	r2, r3, #2
 800d982:	88fb      	ldrh	r3, [r7, #6]
 800d984:	4293      	cmp	r3, r2
 800d986:	bf28      	it	cs
 800d988:	4613      	movcs	r3, r2
 800d98a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	3302      	adds	r3, #2
 800d990:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d992:	2300      	movs	r3, #0
 800d994:	82fb      	strh	r3, [r7, #22]
 800d996:	e00b      	b.n	800d9b0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d998:	8afb      	ldrh	r3, [r7, #22]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	4413      	add	r3, r2
 800d99e:	781a      	ldrb	r2, [r3, #0]
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d9aa:	8afb      	ldrh	r3, [r7, #22]
 800d9ac:	3302      	adds	r3, #2
 800d9ae:	82fb      	strh	r3, [r7, #22]
 800d9b0:	8afa      	ldrh	r2, [r7, #22]
 800d9b2:	8abb      	ldrh	r3, [r7, #20]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d3ef      	bcc.n	800d998 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	701a      	strb	r2, [r3, #0]
  }
}
 800d9be:	bf00      	nop
 800d9c0:	371c      	adds	r7, #28
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d9ca:	b480      	push	{r7}
 800d9cc:	b085      	sub	sp, #20
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	881b      	ldrh	r3, [r3, #0]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	7812      	ldrb	r2, [r2, #0]
 800d9dc:	4413      	add	r3, r2
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3714      	adds	r7, #20
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b086      	sub	sp, #24
 800da02:	af00      	add	r7, sp, #0
 800da04:	60f8      	str	r0, [r7, #12]
 800da06:	60b9      	str	r1, [r7, #8]
 800da08:	4613      	mov	r3, r2
 800da0a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800da0c:	2301      	movs	r3, #1
 800da0e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	789b      	ldrb	r3, [r3, #2]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d002      	beq.n	800da1e <USBH_CtlReq+0x20>
 800da18:	2b02      	cmp	r3, #2
 800da1a:	d01d      	beq.n	800da58 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800da1c:	e043      	b.n	800daa6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	88fa      	ldrh	r2, [r7, #6]
 800da28:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2201      	movs	r2, #1
 800da2e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2202      	movs	r2, #2
 800da34:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800da36:	2301      	movs	r3, #1
 800da38:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2203      	movs	r2, #3
 800da3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800da4e:	2200      	movs	r2, #0
 800da50:	4619      	mov	r1, r3
 800da52:	f000 fcd7 	bl	800e404 <osMessagePut>
      break;
 800da56:	e026      	b.n	800daa6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f000 f829 	bl	800dab0 <USBH_HandleControl>
 800da5e:	4603      	mov	r3, r0
 800da60:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800da62:	7dfb      	ldrb	r3, [r7, #23]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <USBH_CtlReq+0x70>
 800da68:	7dfb      	ldrb	r3, [r7, #23]
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d106      	bne.n	800da7c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2201      	movs	r2, #1
 800da72:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2200      	movs	r2, #0
 800da78:	761a      	strb	r2, [r3, #24]
 800da7a:	e005      	b.n	800da88 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800da7c:	7dfb      	ldrb	r3, [r7, #23]
 800da7e:	2b02      	cmp	r3, #2
 800da80:	d102      	bne.n	800da88 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2201      	movs	r2, #1
 800da86:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2203      	movs	r2, #3
 800da8c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800da9c:	2200      	movs	r2, #0
 800da9e:	4619      	mov	r1, r3
 800daa0:	f000 fcb0 	bl	800e404 <osMessagePut>
      break;
 800daa4:	bf00      	nop
  }
  return status;
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3718      	adds	r7, #24
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af02      	add	r7, sp, #8
 800dab6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dab8:	2301      	movs	r3, #1
 800daba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dabc:	2300      	movs	r3, #0
 800dabe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	7e1b      	ldrb	r3, [r3, #24]
 800dac4:	3b01      	subs	r3, #1
 800dac6:	2b0a      	cmp	r3, #10
 800dac8:	f200 8229 	bhi.w	800df1e <USBH_HandleControl+0x46e>
 800dacc:	a201      	add	r2, pc, #4	@ (adr r2, 800dad4 <USBH_HandleControl+0x24>)
 800dace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad2:	bf00      	nop
 800dad4:	0800db01 	.word	0x0800db01
 800dad8:	0800db1b 	.word	0x0800db1b
 800dadc:	0800dbbd 	.word	0x0800dbbd
 800dae0:	0800dbe3 	.word	0x0800dbe3
 800dae4:	0800dc6f 	.word	0x0800dc6f
 800dae8:	0800dc99 	.word	0x0800dc99
 800daec:	0800dd5b 	.word	0x0800dd5b
 800daf0:	0800dd7d 	.word	0x0800dd7d
 800daf4:	0800de0f 	.word	0x0800de0f
 800daf8:	0800de35 	.word	0x0800de35
 800dafc:	0800dec7 	.word	0x0800dec7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f103 0110 	add.w	r1, r3, #16
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	795b      	ldrb	r3, [r3, #5]
 800db0a:	461a      	mov	r2, r3
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 fa17 	bl	800df40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2202      	movs	r2, #2
 800db16:	761a      	strb	r2, [r3, #24]
      break;
 800db18:	e20c      	b.n	800df34 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	795b      	ldrb	r3, [r3, #5]
 800db1e:	4619      	mov	r1, r3
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f003 f92b 	bl	8010d7c <USBH_LL_GetURBState>
 800db26:	4603      	mov	r3, r0
 800db28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800db2a:	7bbb      	ldrb	r3, [r7, #14]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d12c      	bne.n	800db8a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	7c1b      	ldrb	r3, [r3, #16]
 800db34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800db38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	8adb      	ldrh	r3, [r3, #22]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00a      	beq.n	800db58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800db42:	7b7b      	ldrb	r3, [r7, #13]
 800db44:	2b80      	cmp	r3, #128	@ 0x80
 800db46:	d103      	bne.n	800db50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2203      	movs	r2, #3
 800db4c:	761a      	strb	r2, [r3, #24]
 800db4e:	e00d      	b.n	800db6c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2205      	movs	r2, #5
 800db54:	761a      	strb	r2, [r3, #24]
 800db56:	e009      	b.n	800db6c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800db58:	7b7b      	ldrb	r3, [r7, #13]
 800db5a:	2b80      	cmp	r3, #128	@ 0x80
 800db5c:	d103      	bne.n	800db66 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2209      	movs	r2, #9
 800db62:	761a      	strb	r2, [r3, #24]
 800db64:	e002      	b.n	800db6c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2207      	movs	r2, #7
 800db6a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2203      	movs	r2, #3
 800db70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800db80:	2200      	movs	r2, #0
 800db82:	4619      	mov	r1, r3
 800db84:	f000 fc3e 	bl	800e404 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800db88:	e1cb      	b.n	800df22 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800db8a:	7bbb      	ldrb	r3, [r7, #14]
 800db8c:	2b04      	cmp	r3, #4
 800db8e:	d003      	beq.n	800db98 <USBH_HandleControl+0xe8>
 800db90:	7bbb      	ldrb	r3, [r7, #14]
 800db92:	2b02      	cmp	r3, #2
 800db94:	f040 81c5 	bne.w	800df22 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	220b      	movs	r2, #11
 800db9c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2203      	movs	r2, #3
 800dba2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	f000 fc25 	bl	800e404 <osMessagePut>
      break;
 800dbba:	e1b2      	b.n	800df22 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6899      	ldr	r1, [r3, #8]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	899a      	ldrh	r2, [r3, #12]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	791b      	ldrb	r3, [r3, #4]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 f9f2 	bl	800dfbe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2204      	movs	r2, #4
 800dbde:	761a      	strb	r2, [r3, #24]
      break;
 800dbe0:	e1a8      	b.n	800df34 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	791b      	ldrb	r3, [r3, #4]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f003 f8c7 	bl	8010d7c <USBH_LL_GetURBState>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dbf2:	7bbb      	ldrb	r3, [r7, #14]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d110      	bne.n	800dc1a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2209      	movs	r2, #9
 800dbfc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2203      	movs	r2, #3
 800dc02:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dc12:	2200      	movs	r2, #0
 800dc14:	4619      	mov	r1, r3
 800dc16:	f000 fbf5 	bl	800e404 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	2b05      	cmp	r3, #5
 800dc1e:	d110      	bne.n	800dc42 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dc20:	2303      	movs	r3, #3
 800dc22:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2203      	movs	r2, #3
 800dc28:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dc38:	2200      	movs	r2, #0
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	f000 fbe2 	bl	800e404 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc40:	e171      	b.n	800df26 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800dc42:	7bbb      	ldrb	r3, [r7, #14]
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	f040 816e 	bne.w	800df26 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	220b      	movs	r2, #11
 800dc4e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2203      	movs	r2, #3
 800dc54:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dc64:	2200      	movs	r2, #0
 800dc66:	4619      	mov	r1, r3
 800dc68:	f000 fbcc 	bl	800e404 <osMessagePut>
      break;
 800dc6c:	e15b      	b.n	800df26 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6899      	ldr	r1, [r3, #8]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	899a      	ldrh	r2, [r3, #12]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	795b      	ldrb	r3, [r3, #5]
 800dc7a:	2001      	movs	r0, #1
 800dc7c:	9000      	str	r0, [sp, #0]
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 f978 	bl	800df74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2206      	movs	r2, #6
 800dc94:	761a      	strb	r2, [r3, #24]
      break;
 800dc96:	e14d      	b.n	800df34 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	795b      	ldrb	r3, [r3, #5]
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f003 f86c 	bl	8010d7c <USBH_LL_GetURBState>
 800dca4:	4603      	mov	r3, r0
 800dca6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dca8:	7bbb      	ldrb	r3, [r7, #14]
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d111      	bne.n	800dcd2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2207      	movs	r2, #7
 800dcb2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2203      	movs	r2, #3
 800dcb8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dcc8:	2200      	movs	r2, #0
 800dcca:	4619      	mov	r1, r3
 800dccc:	f000 fb9a 	bl	800e404 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dcd0:	e12b      	b.n	800df2a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
 800dcd4:	2b05      	cmp	r3, #5
 800dcd6:	d113      	bne.n	800dd00 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	220c      	movs	r2, #12
 800dcdc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dcde:	2303      	movs	r3, #3
 800dce0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2203      	movs	r2, #3
 800dce6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	f000 fb83 	bl	800e404 <osMessagePut>
      break;
 800dcfe:	e114      	b.n	800df2a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	d111      	bne.n	800dd2a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2205      	movs	r2, #5
 800dd0a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2203      	movs	r2, #3
 800dd10:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dd20:	2200      	movs	r2, #0
 800dd22:	4619      	mov	r1, r3
 800dd24:	f000 fb6e 	bl	800e404 <osMessagePut>
      break;
 800dd28:	e0ff      	b.n	800df2a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800dd2a:	7bbb      	ldrb	r3, [r7, #14]
 800dd2c:	2b04      	cmp	r3, #4
 800dd2e:	f040 80fc 	bne.w	800df2a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	220b      	movs	r2, #11
 800dd36:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dd38:	2302      	movs	r3, #2
 800dd3a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2203      	movs	r2, #3
 800dd40:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800dd50:	2200      	movs	r2, #0
 800dd52:	4619      	mov	r1, r3
 800dd54:	f000 fb56 	bl	800e404 <osMessagePut>
      break;
 800dd58:	e0e7      	b.n	800df2a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	791b      	ldrb	r3, [r3, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	2100      	movs	r1, #0
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f92b 	bl	800dfbe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2208      	movs	r2, #8
 800dd78:	761a      	strb	r2, [r3, #24]

      break;
 800dd7a:	e0db      	b.n	800df34 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	791b      	ldrb	r3, [r3, #4]
 800dd80:	4619      	mov	r1, r3
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f002 fffa 	bl	8010d7c <USBH_LL_GetURBState>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dd8c:	7bbb      	ldrb	r3, [r7, #14]
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d113      	bne.n	800ddba <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	220d      	movs	r2, #13
 800dd96:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2203      	movs	r2, #3
 800dda0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	f000 fb26 	bl	800e404 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ddb8:	e0b9      	b.n	800df2e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ddba:	7bbb      	ldrb	r3, [r7, #14]
 800ddbc:	2b04      	cmp	r3, #4
 800ddbe:	d111      	bne.n	800dde4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	220b      	movs	r2, #11
 800ddc4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2203      	movs	r2, #3
 800ddca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ddda:	2200      	movs	r2, #0
 800dddc:	4619      	mov	r1, r3
 800ddde:	f000 fb11 	bl	800e404 <osMessagePut>
      break;
 800dde2:	e0a4      	b.n	800df2e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
 800dde6:	2b05      	cmp	r3, #5
 800dde8:	f040 80a1 	bne.w	800df2e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ddec:	2303      	movs	r3, #3
 800ddee:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2203      	movs	r2, #3
 800ddf4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800de04:	2200      	movs	r2, #0
 800de06:	4619      	mov	r1, r3
 800de08:	f000 fafc 	bl	800e404 <osMessagePut>
      break;
 800de0c:	e08f      	b.n	800df2e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	795b      	ldrb	r3, [r3, #5]
 800de12:	2201      	movs	r2, #1
 800de14:	9200      	str	r2, [sp, #0]
 800de16:	2200      	movs	r2, #0
 800de18:	2100      	movs	r1, #0
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 f8aa 	bl	800df74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800de26:	b29a      	uxth	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	220a      	movs	r2, #10
 800de30:	761a      	strb	r2, [r3, #24]
      break;
 800de32:	e07f      	b.n	800df34 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	795b      	ldrb	r3, [r3, #5]
 800de38:	4619      	mov	r1, r3
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f002 ff9e 	bl	8010d7c <USBH_LL_GetURBState>
 800de40:	4603      	mov	r3, r0
 800de42:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800de44:	7bbb      	ldrb	r3, [r7, #14]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d113      	bne.n	800de72 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800de4a:	2300      	movs	r3, #0
 800de4c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	220d      	movs	r2, #13
 800de52:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2203      	movs	r2, #3
 800de58:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800de68:	2200      	movs	r2, #0
 800de6a:	4619      	mov	r1, r3
 800de6c:	f000 faca 	bl	800e404 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de70:	e05f      	b.n	800df32 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800de72:	7bbb      	ldrb	r3, [r7, #14]
 800de74:	2b02      	cmp	r3, #2
 800de76:	d111      	bne.n	800de9c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2209      	movs	r2, #9
 800de7c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2203      	movs	r2, #3
 800de82:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800de92:	2200      	movs	r2, #0
 800de94:	4619      	mov	r1, r3
 800de96:	f000 fab5 	bl	800e404 <osMessagePut>
      break;
 800de9a:	e04a      	b.n	800df32 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800de9c:	7bbb      	ldrb	r3, [r7, #14]
 800de9e:	2b04      	cmp	r3, #4
 800dea0:	d147      	bne.n	800df32 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	220b      	movs	r2, #11
 800dea6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2203      	movs	r2, #3
 800deac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800debc:	2200      	movs	r2, #0
 800debe:	4619      	mov	r1, r3
 800dec0:	f000 faa0 	bl	800e404 <osMessagePut>
      break;
 800dec4:	e035      	b.n	800df32 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	7e5b      	ldrb	r3, [r3, #25]
 800deca:	3301      	adds	r3, #1
 800decc:	b2da      	uxtb	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	765a      	strb	r2, [r3, #25]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	7e5b      	ldrb	r3, [r3, #25]
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	d806      	bhi.n	800dee8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2201      	movs	r2, #1
 800dede:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2201      	movs	r2, #1
 800dee4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dee6:	e025      	b.n	800df34 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800deee:	2106      	movs	r1, #6
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	795b      	ldrb	r3, [r3, #5]
 800defe:	4619      	mov	r1, r3
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 f90d 	bl	800e120 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	791b      	ldrb	r3, [r3, #4]
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 f907 	bl	800e120 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800df18:	2302      	movs	r3, #2
 800df1a:	73fb      	strb	r3, [r7, #15]
      break;
 800df1c:	e00a      	b.n	800df34 <USBH_HandleControl+0x484>

    default:
      break;
 800df1e:	bf00      	nop
 800df20:	e008      	b.n	800df34 <USBH_HandleControl+0x484>
      break;
 800df22:	bf00      	nop
 800df24:	e006      	b.n	800df34 <USBH_HandleControl+0x484>
      break;
 800df26:	bf00      	nop
 800df28:	e004      	b.n	800df34 <USBH_HandleControl+0x484>
      break;
 800df2a:	bf00      	nop
 800df2c:	e002      	b.n	800df34 <USBH_HandleControl+0x484>
      break;
 800df2e:	bf00      	nop
 800df30:	e000      	b.n	800df34 <USBH_HandleControl+0x484>
      break;
 800df32:	bf00      	nop
  }

  return status;
 800df34:	7bfb      	ldrb	r3, [r7, #15]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop

0800df40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b088      	sub	sp, #32
 800df44:	af04      	add	r7, sp, #16
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	4613      	mov	r3, r2
 800df4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df4e:	79f9      	ldrb	r1, [r7, #7]
 800df50:	2300      	movs	r3, #0
 800df52:	9303      	str	r3, [sp, #12]
 800df54:	2308      	movs	r3, #8
 800df56:	9302      	str	r3, [sp, #8]
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	9301      	str	r3, [sp, #4]
 800df5c:	2300      	movs	r3, #0
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	2300      	movs	r3, #0
 800df62:	2200      	movs	r2, #0
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f002 fed8 	bl	8010d1a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b088      	sub	sp, #32
 800df78:	af04      	add	r7, sp, #16
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	4611      	mov	r1, r2
 800df80:	461a      	mov	r2, r3
 800df82:	460b      	mov	r3, r1
 800df84:	80fb      	strh	r3, [r7, #6]
 800df86:	4613      	mov	r3, r2
 800df88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800df94:	2300      	movs	r3, #0
 800df96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df98:	7979      	ldrb	r1, [r7, #5]
 800df9a:	7e3b      	ldrb	r3, [r7, #24]
 800df9c:	9303      	str	r3, [sp, #12]
 800df9e:	88fb      	ldrh	r3, [r7, #6]
 800dfa0:	9302      	str	r3, [sp, #8]
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	9301      	str	r3, [sp, #4]
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	2300      	movs	r3, #0
 800dfac:	2200      	movs	r2, #0
 800dfae:	68f8      	ldr	r0, [r7, #12]
 800dfb0:	f002 feb3 	bl	8010d1a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dfb4:	2300      	movs	r3, #0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b088      	sub	sp, #32
 800dfc2:	af04      	add	r7, sp, #16
 800dfc4:	60f8      	str	r0, [r7, #12]
 800dfc6:	60b9      	str	r1, [r7, #8]
 800dfc8:	4611      	mov	r1, r2
 800dfca:	461a      	mov	r2, r3
 800dfcc:	460b      	mov	r3, r1
 800dfce:	80fb      	strh	r3, [r7, #6]
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dfd4:	7979      	ldrb	r1, [r7, #5]
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	9303      	str	r3, [sp, #12]
 800dfda:	88fb      	ldrh	r3, [r7, #6]
 800dfdc:	9302      	str	r3, [sp, #8]
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	9301      	str	r3, [sp, #4]
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	2201      	movs	r2, #1
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f002 fe95 	bl	8010d1a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dff0:	2300      	movs	r3, #0

}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b088      	sub	sp, #32
 800dffe:	af04      	add	r7, sp, #16
 800e000:	60f8      	str	r0, [r7, #12]
 800e002:	60b9      	str	r1, [r7, #8]
 800e004:	4611      	mov	r1, r2
 800e006:	461a      	mov	r2, r3
 800e008:	460b      	mov	r3, r1
 800e00a:	80fb      	strh	r3, [r7, #6]
 800e00c:	4613      	mov	r3, r2
 800e00e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e01a:	2300      	movs	r3, #0
 800e01c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e01e:	7979      	ldrb	r1, [r7, #5]
 800e020:	7e3b      	ldrb	r3, [r7, #24]
 800e022:	9303      	str	r3, [sp, #12]
 800e024:	88fb      	ldrh	r3, [r7, #6]
 800e026:	9302      	str	r3, [sp, #8]
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	9301      	str	r3, [sp, #4]
 800e02c:	2301      	movs	r3, #1
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	2302      	movs	r3, #2
 800e032:	2200      	movs	r2, #0
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f002 fe70 	bl	8010d1a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b088      	sub	sp, #32
 800e048:	af04      	add	r7, sp, #16
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	4611      	mov	r1, r2
 800e050:	461a      	mov	r2, r3
 800e052:	460b      	mov	r3, r1
 800e054:	80fb      	strh	r3, [r7, #6]
 800e056:	4613      	mov	r3, r2
 800e058:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e05a:	7979      	ldrb	r1, [r7, #5]
 800e05c:	2300      	movs	r3, #0
 800e05e:	9303      	str	r3, [sp, #12]
 800e060:	88fb      	ldrh	r3, [r7, #6]
 800e062:	9302      	str	r3, [sp, #8]
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	2301      	movs	r3, #1
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	2302      	movs	r3, #2
 800e06e:	2201      	movs	r2, #1
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f002 fe52 	bl	8010d1a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af04      	add	r7, sp, #16
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	4608      	mov	r0, r1
 800e08a:	4611      	mov	r1, r2
 800e08c:	461a      	mov	r2, r3
 800e08e:	4603      	mov	r3, r0
 800e090:	70fb      	strb	r3, [r7, #3]
 800e092:	460b      	mov	r3, r1
 800e094:	70bb      	strb	r3, [r7, #2]
 800e096:	4613      	mov	r3, r2
 800e098:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e09a:	7878      	ldrb	r0, [r7, #1]
 800e09c:	78ba      	ldrb	r2, [r7, #2]
 800e09e:	78f9      	ldrb	r1, [r7, #3]
 800e0a0:	8b3b      	ldrh	r3, [r7, #24]
 800e0a2:	9302      	str	r3, [sp, #8]
 800e0a4:	7d3b      	ldrb	r3, [r7, #20]
 800e0a6:	9301      	str	r3, [sp, #4]
 800e0a8:	7c3b      	ldrb	r3, [r7, #16]
 800e0aa:	9300      	str	r3, [sp, #0]
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f002 fde5 	bl	8010c7e <USBH_LL_OpenPipe>

  return USBH_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e0ca:	78fb      	ldrb	r3, [r7, #3]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f002 fe04 	bl	8010cdc <USBH_LL_ClosePipe>

  return USBH_OK;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b084      	sub	sp, #16
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f836 	bl	800e15c <USBH_GetFreePipe>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e0f4:	89fb      	ldrh	r3, [r7, #14]
 800e0f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d00a      	beq.n	800e114 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e0fe:	78fa      	ldrb	r2, [r7, #3]
 800e100:	89fb      	ldrh	r3, [r7, #14]
 800e102:	f003 030f 	and.w	r3, r3, #15
 800e106:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e10a:	6879      	ldr	r1, [r7, #4]
 800e10c:	33e0      	adds	r3, #224	@ 0xe0
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	440b      	add	r3, r1
 800e112:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e114:	89fb      	ldrh	r3, [r7, #14]
 800e116:	b2db      	uxtb	r3, r3
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	460b      	mov	r3, r1
 800e12a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e12c:	78fb      	ldrb	r3, [r7, #3]
 800e12e:	2b0f      	cmp	r3, #15
 800e130:	d80d      	bhi.n	800e14e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e132:	78fb      	ldrb	r3, [r7, #3]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	33e0      	adds	r3, #224	@ 0xe0
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4413      	add	r3, r2
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	78fb      	ldrb	r3, [r7, #3]
 800e140:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e144:	6879      	ldr	r1, [r7, #4]
 800e146:	33e0      	adds	r3, #224	@ 0xe0
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	440b      	add	r3, r1
 800e14c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e14e:	2300      	movs	r3, #0
}
 800e150:	4618      	mov	r0, r3
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e164:	2300      	movs	r3, #0
 800e166:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e168:	2300      	movs	r3, #0
 800e16a:	73fb      	strb	r3, [r7, #15]
 800e16c:	e00f      	b.n	800e18e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e16e:	7bfb      	ldrb	r3, [r7, #15]
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	33e0      	adds	r3, #224	@ 0xe0
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	4413      	add	r3, r2
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d102      	bne.n	800e188 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e182:	7bfb      	ldrb	r3, [r7, #15]
 800e184:	b29b      	uxth	r3, r3
 800e186:	e007      	b.n	800e198 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e188:	7bfb      	ldrb	r3, [r7, #15]
 800e18a:	3301      	adds	r3, #1
 800e18c:	73fb      	strb	r3, [r7, #15]
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	2b0f      	cmp	r3, #15
 800e192:	d9ec      	bls.n	800e16e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e194:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3714      	adds	r7, #20
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b087      	sub	sp, #28
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e1ba:	4b1f      	ldr	r3, [pc, #124]	@ (800e238 <FATFS_LinkDriverEx+0x94>)
 800e1bc:	7a5b      	ldrb	r3, [r3, #9]
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d131      	bne.n	800e228 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e1c4:	4b1c      	ldr	r3, [pc, #112]	@ (800e238 <FATFS_LinkDriverEx+0x94>)
 800e1c6:	7a5b      	ldrb	r3, [r3, #9]
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800e238 <FATFS_LinkDriverEx+0x94>)
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e1d2:	4b19      	ldr	r3, [pc, #100]	@ (800e238 <FATFS_LinkDriverEx+0x94>)
 800e1d4:	7a5b      	ldrb	r3, [r3, #9]
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	4a17      	ldr	r2, [pc, #92]	@ (800e238 <FATFS_LinkDriverEx+0x94>)
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4413      	add	r3, r2
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e1e2:	4b15      	ldr	r3, [pc, #84]	@ (800e238 <FATFS_LinkDriverEx+0x94>)
 800e1e4:	7a5b      	ldrb	r3, [r3, #9]
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4b13      	ldr	r3, [pc, #76]	@ (800e238 <FATFS_LinkDriverEx+0x94>)
 800e1ec:	4413      	add	r3, r2
 800e1ee:	79fa      	ldrb	r2, [r7, #7]
 800e1f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e1f2:	4b11      	ldr	r3, [pc, #68]	@ (800e238 <FATFS_LinkDriverEx+0x94>)
 800e1f4:	7a5b      	ldrb	r3, [r3, #9]
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	b2d1      	uxtb	r1, r2
 800e1fc:	4a0e      	ldr	r2, [pc, #56]	@ (800e238 <FATFS_LinkDriverEx+0x94>)
 800e1fe:	7251      	strb	r1, [r2, #9]
 800e200:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e202:	7dbb      	ldrb	r3, [r7, #22]
 800e204:	3330      	adds	r3, #48	@ 0x30
 800e206:	b2da      	uxtb	r2, r3
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	3301      	adds	r3, #1
 800e210:	223a      	movs	r2, #58	@ 0x3a
 800e212:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	3302      	adds	r3, #2
 800e218:	222f      	movs	r2, #47	@ 0x2f
 800e21a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	3303      	adds	r3, #3
 800e220:	2200      	movs	r2, #0
 800e222:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e228:	7dfb      	ldrb	r3, [r7, #23]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	371c      	adds	r7, #28
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	200007c4 	.word	0x200007c4

0800e23c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e246:	2200      	movs	r2, #0
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7ff ffaa 	bl	800e1a4 <FATFS_LinkDriverEx>
 800e250:	4603      	mov	r3, r0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3708      	adds	r7, #8
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e25a:	b480      	push	{r7}
 800e25c:	b085      	sub	sp, #20
 800e25e:	af00      	add	r7, sp, #0
 800e260:	4603      	mov	r3, r0
 800e262:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e264:	2300      	movs	r3, #0
 800e266:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e26c:	2b84      	cmp	r3, #132	@ 0x84
 800e26e:	d005      	beq.n	800e27c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e270:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	4413      	add	r3, r2
 800e278:	3303      	adds	r3, #3
 800e27a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e27c:	68fb      	ldr	r3, [r7, #12]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3714      	adds	r7, #20
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr

0800e28a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e28a:	b480      	push	{r7}
 800e28c:	b083      	sub	sp, #12
 800e28e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e290:	f3ef 8305 	mrs	r3, IPSR
 800e294:	607b      	str	r3, [r7, #4]
  return(result);
 800e296:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e298:	2b00      	cmp	r3, #0
 800e29a:	bf14      	ite	ne
 800e29c:	2301      	movne	r3, #1
 800e29e:	2300      	moveq	r3, #0
 800e2a0:	b2db      	uxtb	r3, r3
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	370c      	adds	r7, #12
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr

0800e2ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e2b2:	f001 f955 	bl	800f560 <vTaskStartScheduler>
  
  return osOK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800e2c0:	f001 fdb6 	bl	800fe30 <xTaskGetSchedulerState>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d101      	bne.n	800e2ce <osKernelRunning+0x12>
    return 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	e000      	b.n	800e2d0 <osKernelRunning+0x14>
  else
    return 1;
 800e2ce:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e2d8:	f7ff ffd7 	bl	800e28a <inHandlerMode>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d003      	beq.n	800e2ea <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e2e2:	f001 fa63 	bl	800f7ac <xTaskGetTickCountFromISR>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	e002      	b.n	800e2f0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e2ea:	f001 fa4f 	bl	800f78c <xTaskGetTickCount>
 800e2ee:	4603      	mov	r3, r0
  }
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2f6:	b089      	sub	sp, #36	@ 0x24
 800e2f8:	af04      	add	r7, sp, #16
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	695b      	ldr	r3, [r3, #20]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d020      	beq.n	800e348 <osThreadCreate+0x54>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d01c      	beq.n	800e348 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685c      	ldr	r4, [r3, #4]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	691e      	ldr	r6, [r3, #16]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff ff9a 	bl	800e25a <makeFreeRtosPriority>
 800e326:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	695b      	ldr	r3, [r3, #20]
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e330:	9202      	str	r2, [sp, #8]
 800e332:	9301      	str	r3, [sp, #4]
 800e334:	9100      	str	r1, [sp, #0]
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	4632      	mov	r2, r6
 800e33a:	4629      	mov	r1, r5
 800e33c:	4620      	mov	r0, r4
 800e33e:	f000 ff1f 	bl	800f180 <xTaskCreateStatic>
 800e342:	4603      	mov	r3, r0
 800e344:	60fb      	str	r3, [r7, #12]
 800e346:	e01c      	b.n	800e382 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685c      	ldr	r4, [r3, #4]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e354:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7ff ff7c 	bl	800e25a <makeFreeRtosPriority>
 800e362:	4602      	mov	r2, r0
 800e364:	f107 030c 	add.w	r3, r7, #12
 800e368:	9301      	str	r3, [sp, #4]
 800e36a:	9200      	str	r2, [sp, #0]
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	4632      	mov	r2, r6
 800e370:	4629      	mov	r1, r5
 800e372:	4620      	mov	r0, r4
 800e374:	f000 ff64 	bl	800f240 <xTaskCreate>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d001      	beq.n	800e382 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	e000      	b.n	800e384 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e382:	68fb      	ldr	r3, [r7, #12]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3714      	adds	r7, #20
 800e388:	46bd      	mov	sp, r7
 800e38a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e38c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d001      	beq.n	800e3a2 <osDelay+0x16>
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	e000      	b.n	800e3a4 <osDelay+0x18>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f001 f8a5 	bl	800f4f4 <vTaskDelay>
  
  return osOK;
 800e3aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e3b4:	b590      	push	{r4, r7, lr}
 800e3b6:	b085      	sub	sp, #20
 800e3b8:	af02      	add	r7, sp, #8
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d011      	beq.n	800e3ea <osMessageCreate+0x36>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00d      	beq.n	800e3ea <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6818      	ldr	r0, [r3, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6859      	ldr	r1, [r3, #4]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	689a      	ldr	r2, [r3, #8]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	2400      	movs	r4, #0
 800e3e0:	9400      	str	r4, [sp, #0]
 800e3e2:	f000 f9e1 	bl	800e7a8 <xQueueGenericCreateStatic>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	e008      	b.n	800e3fc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6818      	ldr	r0, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	f000 fa54 	bl	800e8a2 <xQueueGenericCreate>
 800e3fa:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	bd90      	pop	{r4, r7, pc}

0800e404 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e410:	2300      	movs	r3, #0
 800e412:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d101      	bne.n	800e422 <osMessagePut+0x1e>
    ticks = 1;
 800e41e:	2301      	movs	r3, #1
 800e420:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e422:	f7ff ff32 	bl	800e28a <inHandlerMode>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d018      	beq.n	800e45e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e42c:	f107 0210 	add.w	r2, r7, #16
 800e430:	f107 0108 	add.w	r1, r7, #8
 800e434:	2300      	movs	r3, #0
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f000 fb90 	bl	800eb5c <xQueueGenericSendFromISR>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d001      	beq.n	800e446 <osMessagePut+0x42>
      return osErrorOS;
 800e442:	23ff      	movs	r3, #255	@ 0xff
 800e444:	e018      	b.n	800e478 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d014      	beq.n	800e476 <osMessagePut+0x72>
 800e44c:	4b0c      	ldr	r3, [pc, #48]	@ (800e480 <osMessagePut+0x7c>)
 800e44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	e00b      	b.n	800e476 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e45e:	f107 0108 	add.w	r1, r7, #8
 800e462:	2300      	movs	r3, #0
 800e464:	697a      	ldr	r2, [r7, #20]
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f000 fa76 	bl	800e958 <xQueueGenericSend>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d001      	beq.n	800e476 <osMessagePut+0x72>
      return osErrorOS;
 800e472:	23ff      	movs	r3, #255	@ 0xff
 800e474:	e000      	b.n	800e478 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3718      	adds	r7, #24
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	e000ed04 	.word	0xe000ed04

0800e484 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e484:	b590      	push	{r4, r7, lr}
 800e486:	b08b      	sub	sp, #44	@ 0x2c
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e494:	2300      	movs	r3, #0
 800e496:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d10a      	bne.n	800e4b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e49e:	2380      	movs	r3, #128	@ 0x80
 800e4a0:	617b      	str	r3, [r7, #20]
    return event;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	461c      	mov	r4, r3
 800e4a6:	f107 0314 	add.w	r3, r7, #20
 800e4aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e4b2:	e054      	b.n	800e55e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c2:	d103      	bne.n	800e4cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4ca:	e009      	b.n	800e4e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d006      	beq.n	800e4e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d101      	bne.n	800e4e0 <osMessageGet+0x5c>
      ticks = 1;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e4e0:	f7ff fed3 	bl	800e28a <inHandlerMode>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d01c      	beq.n	800e524 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e4ea:	f107 0220 	add.w	r2, r7, #32
 800e4ee:	f107 0314 	add.w	r3, r7, #20
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	68b8      	ldr	r0, [r7, #8]
 800e4f8:	f000 fcb0 	bl	800ee5c <xQueueReceiveFromISR>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d102      	bne.n	800e508 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e502:	2310      	movs	r3, #16
 800e504:	617b      	str	r3, [r7, #20]
 800e506:	e001      	b.n	800e50c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e508:	2300      	movs	r3, #0
 800e50a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e50c:	6a3b      	ldr	r3, [r7, #32]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d01d      	beq.n	800e54e <osMessageGet+0xca>
 800e512:	4b15      	ldr	r3, [pc, #84]	@ (800e568 <osMessageGet+0xe4>)
 800e514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e518:	601a      	str	r2, [r3, #0]
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	e014      	b.n	800e54e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e524:	f107 0314 	add.w	r3, r7, #20
 800e528:	3304      	adds	r3, #4
 800e52a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e52c:	4619      	mov	r1, r3
 800e52e:	68b8      	ldr	r0, [r7, #8]
 800e530:	f000 fbb2 	bl	800ec98 <xQueueReceive>
 800e534:	4603      	mov	r3, r0
 800e536:	2b01      	cmp	r3, #1
 800e538:	d102      	bne.n	800e540 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e53a:	2310      	movs	r3, #16
 800e53c:	617b      	str	r3, [r7, #20]
 800e53e:	e006      	b.n	800e54e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e542:	2b00      	cmp	r3, #0
 800e544:	d101      	bne.n	800e54a <osMessageGet+0xc6>
 800e546:	2300      	movs	r3, #0
 800e548:	e000      	b.n	800e54c <osMessageGet+0xc8>
 800e54a:	2340      	movs	r3, #64	@ 0x40
 800e54c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	461c      	mov	r4, r3
 800e552:	f107 0314 	add.w	r3, r7, #20
 800e556:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e55a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	372c      	adds	r7, #44	@ 0x2c
 800e562:	46bd      	mov	sp, r7
 800e564:	bd90      	pop	{r4, r7, pc}
 800e566:	bf00      	nop
 800e568:	e000ed04 	.word	0xe000ed04

0800e56c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f103 0208 	add.w	r2, r3, #8
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f04f 32ff 	mov.w	r2, #4294967295
 800e584:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f103 0208 	add.w	r2, r3, #8
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f103 0208 	add.w	r2, r3, #8
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e5a0:	bf00      	nop
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e5ba:	bf00      	nop
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr

0800e5c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5c6:	b480      	push	{r7}
 800e5c8:	b085      	sub	sp, #20
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	689a      	ldr	r2, [r3, #8]
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	1c5a      	adds	r2, r3, #1
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	601a      	str	r2, [r3, #0]
}
 800e602:	bf00      	nop
 800e604:	3714      	adds	r7, #20
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr

0800e60e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e60e:	b480      	push	{r7}
 800e610:	b085      	sub	sp, #20
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
 800e616:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e624:	d103      	bne.n	800e62e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	691b      	ldr	r3, [r3, #16]
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	e00c      	b.n	800e648 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	3308      	adds	r3, #8
 800e632:	60fb      	str	r3, [r7, #12]
 800e634:	e002      	b.n	800e63c <vListInsert+0x2e>
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	429a      	cmp	r2, r3
 800e646:	d2f6      	bcs.n	800e636 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	683a      	ldr	r2, [r7, #0]
 800e656:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	68fa      	ldr	r2, [r7, #12]
 800e65c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	683a      	ldr	r2, [r7, #0]
 800e662:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	1c5a      	adds	r2, r3, #1
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	601a      	str	r2, [r3, #0]
}
 800e674:	bf00      	nop
 800e676:	3714      	adds	r7, #20
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e680:	b480      	push	{r7}
 800e682:	b085      	sub	sp, #20
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	6892      	ldr	r2, [r2, #8]
 800e696:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	6852      	ldr	r2, [r2, #4]
 800e6a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d103      	bne.n	800e6b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	689a      	ldr	r2, [r3, #8]
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	1e5a      	subs	r2, r3, #1
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3714      	adds	r7, #20
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d10b      	bne.n	800e700 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e6fa:	bf00      	nop
 800e6fc:	bf00      	nop
 800e6fe:	e7fd      	b.n	800e6fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e700:	f001 fdd2 	bl	80102a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e70c:	68f9      	ldr	r1, [r7, #12]
 800e70e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e710:	fb01 f303 	mul.w	r3, r1, r3
 800e714:	441a      	add	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2200      	movs	r2, #0
 800e71e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e730:	3b01      	subs	r3, #1
 800e732:	68f9      	ldr	r1, [r7, #12]
 800e734:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e736:	fb01 f303 	mul.w	r3, r1, r3
 800e73a:	441a      	add	r2, r3
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	22ff      	movs	r2, #255	@ 0xff
 800e744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	22ff      	movs	r2, #255	@ 0xff
 800e74c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d114      	bne.n	800e780 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d01a      	beq.n	800e794 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	3310      	adds	r3, #16
 800e762:	4618      	mov	r0, r3
 800e764:	f001 f99c 	bl	800faa0 <xTaskRemoveFromEventList>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d012      	beq.n	800e794 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e76e:	4b0d      	ldr	r3, [pc, #52]	@ (800e7a4 <xQueueGenericReset+0xd0>)
 800e770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e774:	601a      	str	r2, [r3, #0]
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	f3bf 8f6f 	isb	sy
 800e77e:	e009      	b.n	800e794 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	3310      	adds	r3, #16
 800e784:	4618      	mov	r0, r3
 800e786:	f7ff fef1 	bl	800e56c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3324      	adds	r3, #36	@ 0x24
 800e78e:	4618      	mov	r0, r3
 800e790:	f7ff feec 	bl	800e56c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e794:	f001 fdba 	bl	801030c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e798:	2301      	movs	r3, #1
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	e000ed04 	.word	0xe000ed04

0800e7a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b08e      	sub	sp, #56	@ 0x38
 800e7ac:	af02      	add	r7, sp, #8
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
 800e7b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d10b      	bne.n	800e7d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e7ce:	bf00      	nop
 800e7d0:	bf00      	nop
 800e7d2:	e7fd      	b.n	800e7d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10b      	bne.n	800e7f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e7ec:	bf00      	nop
 800e7ee:	bf00      	nop
 800e7f0:	e7fd      	b.n	800e7ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <xQueueGenericCreateStatic+0x56>
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d001      	beq.n	800e802 <xQueueGenericCreateStatic+0x5a>
 800e7fe:	2301      	movs	r3, #1
 800e800:	e000      	b.n	800e804 <xQueueGenericCreateStatic+0x5c>
 800e802:	2300      	movs	r3, #0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d10b      	bne.n	800e820 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	623b      	str	r3, [r7, #32]
}
 800e81a:	bf00      	nop
 800e81c:	bf00      	nop
 800e81e:	e7fd      	b.n	800e81c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d102      	bne.n	800e82c <xQueueGenericCreateStatic+0x84>
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d101      	bne.n	800e830 <xQueueGenericCreateStatic+0x88>
 800e82c:	2301      	movs	r3, #1
 800e82e:	e000      	b.n	800e832 <xQueueGenericCreateStatic+0x8a>
 800e830:	2300      	movs	r3, #0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d10b      	bne.n	800e84e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	61fb      	str	r3, [r7, #28]
}
 800e848:	bf00      	nop
 800e84a:	bf00      	nop
 800e84c:	e7fd      	b.n	800e84a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e84e:	2348      	movs	r3, #72	@ 0x48
 800e850:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	2b48      	cmp	r3, #72	@ 0x48
 800e856:	d00b      	beq.n	800e870 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	61bb      	str	r3, [r7, #24]
}
 800e86a:	bf00      	nop
 800e86c:	bf00      	nop
 800e86e:	e7fd      	b.n	800e86c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e870:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00d      	beq.n	800e898 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e87e:	2201      	movs	r2, #1
 800e880:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e884:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	4613      	mov	r3, r2
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	68b9      	ldr	r1, [r7, #8]
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f000 f840 	bl	800e918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3730      	adds	r7, #48	@ 0x30
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b08a      	sub	sp, #40	@ 0x28
 800e8a6:	af02      	add	r7, sp, #8
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10b      	bne.n	800e8ce <xQueueGenericCreate+0x2c>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	613b      	str	r3, [r7, #16]
}
 800e8c8:	bf00      	nop
 800e8ca:	bf00      	nop
 800e8cc:	e7fd      	b.n	800e8ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	fb02 f303 	mul.w	r3, r2, r3
 800e8d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	3348      	adds	r3, #72	@ 0x48
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f001 fe05 	bl	80104ec <pvPortMalloc>
 800e8e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d011      	beq.n	800e90e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	3348      	adds	r3, #72	@ 0x48
 800e8f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e8fc:	79fa      	ldrb	r2, [r7, #7]
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	4613      	mov	r3, r2
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	68b9      	ldr	r1, [r7, #8]
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 f805 	bl	800e918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e90e:	69bb      	ldr	r3, [r7, #24]
	}
 800e910:	4618      	mov	r0, r3
 800e912:	3720      	adds	r7, #32
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d103      	bne.n	800e934 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	69ba      	ldr	r2, [r7, #24]
 800e930:	601a      	str	r2, [r3, #0]
 800e932:	e002      	b.n	800e93a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e934:	69bb      	ldr	r3, [r7, #24]
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	68ba      	ldr	r2, [r7, #8]
 800e944:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e946:	2101      	movs	r1, #1
 800e948:	69b8      	ldr	r0, [r7, #24]
 800e94a:	f7ff fec3 	bl	800e6d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e94e:	bf00      	nop
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
	...

0800e958 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08e      	sub	sp, #56	@ 0x38
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
 800e964:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e966:	2300      	movs	r3, #0
 800e968:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10b      	bne.n	800e98c <xQueueGenericSend+0x34>
	__asm volatile
 800e974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e986:	bf00      	nop
 800e988:	bf00      	nop
 800e98a:	e7fd      	b.n	800e988 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d103      	bne.n	800e99a <xQueueGenericSend+0x42>
 800e992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e996:	2b00      	cmp	r3, #0
 800e998:	d101      	bne.n	800e99e <xQueueGenericSend+0x46>
 800e99a:	2301      	movs	r3, #1
 800e99c:	e000      	b.n	800e9a0 <xQueueGenericSend+0x48>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10b      	bne.n	800e9bc <xQueueGenericSend+0x64>
	__asm volatile
 800e9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e9b6:	bf00      	nop
 800e9b8:	bf00      	nop
 800e9ba:	e7fd      	b.n	800e9b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	2b02      	cmp	r3, #2
 800e9c0:	d103      	bne.n	800e9ca <xQueueGenericSend+0x72>
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d101      	bne.n	800e9ce <xQueueGenericSend+0x76>
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e000      	b.n	800e9d0 <xQueueGenericSend+0x78>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10b      	bne.n	800e9ec <xQueueGenericSend+0x94>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	623b      	str	r3, [r7, #32]
}
 800e9e6:	bf00      	nop
 800e9e8:	bf00      	nop
 800e9ea:	e7fd      	b.n	800e9e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9ec:	f001 fa20 	bl	800fe30 <xTaskGetSchedulerState>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d102      	bne.n	800e9fc <xQueueGenericSend+0xa4>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d101      	bne.n	800ea00 <xQueueGenericSend+0xa8>
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	e000      	b.n	800ea02 <xQueueGenericSend+0xaa>
 800ea00:	2300      	movs	r3, #0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d10b      	bne.n	800ea1e <xQueueGenericSend+0xc6>
	__asm volatile
 800ea06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	61fb      	str	r3, [r7, #28]
}
 800ea18:	bf00      	nop
 800ea1a:	bf00      	nop
 800ea1c:	e7fd      	b.n	800ea1a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea1e:	f001 fc43 	bl	80102a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d302      	bcc.n	800ea34 <xQueueGenericSend+0xdc>
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	2b02      	cmp	r3, #2
 800ea32:	d129      	bne.n	800ea88 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea34:	683a      	ldr	r2, [r7, #0]
 800ea36:	68b9      	ldr	r1, [r7, #8]
 800ea38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea3a:	f000 fa91 	bl	800ef60 <prvCopyDataToQueue>
 800ea3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d010      	beq.n	800ea6a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4a:	3324      	adds	r3, #36	@ 0x24
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f001 f827 	bl	800faa0 <xTaskRemoveFromEventList>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d013      	beq.n	800ea80 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ea58:	4b3f      	ldr	r3, [pc, #252]	@ (800eb58 <xQueueGenericSend+0x200>)
 800ea5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea5e:	601a      	str	r2, [r3, #0]
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	e00a      	b.n	800ea80 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ea6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d007      	beq.n	800ea80 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ea70:	4b39      	ldr	r3, [pc, #228]	@ (800eb58 <xQueueGenericSend+0x200>)
 800ea72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea76:	601a      	str	r2, [r3, #0]
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ea80:	f001 fc44 	bl	801030c <vPortExitCritical>
				return pdPASS;
 800ea84:	2301      	movs	r3, #1
 800ea86:	e063      	b.n	800eb50 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d103      	bne.n	800ea96 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea8e:	f001 fc3d 	bl	801030c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ea92:	2300      	movs	r3, #0
 800ea94:	e05c      	b.n	800eb50 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d106      	bne.n	800eaaa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea9c:	f107 0314 	add.w	r3, r7, #20
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f001 f861 	bl	800fb68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eaaa:	f001 fc2f 	bl	801030c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eaae:	f000 fdc1 	bl	800f634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eab2:	f001 fbf9 	bl	80102a8 <vPortEnterCritical>
 800eab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eabc:	b25b      	sxtb	r3, r3
 800eabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac2:	d103      	bne.n	800eacc <xQueueGenericSend+0x174>
 800eac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac6:	2200      	movs	r2, #0
 800eac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eace:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ead2:	b25b      	sxtb	r3, r3
 800ead4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead8:	d103      	bne.n	800eae2 <xQueueGenericSend+0x18a>
 800eada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eadc:	2200      	movs	r2, #0
 800eade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eae2:	f001 fc13 	bl	801030c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eae6:	1d3a      	adds	r2, r7, #4
 800eae8:	f107 0314 	add.w	r3, r7, #20
 800eaec:	4611      	mov	r1, r2
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f001 f850 	bl	800fb94 <xTaskCheckForTimeOut>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d124      	bne.n	800eb44 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eafa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eafc:	f000 fb28 	bl	800f150 <prvIsQueueFull>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d018      	beq.n	800eb38 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb08:	3310      	adds	r3, #16
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	4611      	mov	r1, r2
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 ffa0 	bl	800fa54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eb14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb16:	f000 fab3 	bl	800f080 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eb1a:	f000 fd99 	bl	800f650 <xTaskResumeAll>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f47f af7c 	bne.w	800ea1e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800eb26:	4b0c      	ldr	r3, [pc, #48]	@ (800eb58 <xQueueGenericSend+0x200>)
 800eb28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	e772      	b.n	800ea1e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eb38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb3a:	f000 faa1 	bl	800f080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb3e:	f000 fd87 	bl	800f650 <xTaskResumeAll>
 800eb42:	e76c      	b.n	800ea1e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eb44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb46:	f000 fa9b 	bl	800f080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb4a:	f000 fd81 	bl	800f650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eb4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3738      	adds	r7, #56	@ 0x38
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	e000ed04 	.word	0xe000ed04

0800eb5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b090      	sub	sp, #64	@ 0x40
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
 800eb68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800eb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10b      	bne.n	800eb8c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800eb86:	bf00      	nop
 800eb88:	bf00      	nop
 800eb8a:	e7fd      	b.n	800eb88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d103      	bne.n	800eb9a <xQueueGenericSendFromISR+0x3e>
 800eb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d101      	bne.n	800eb9e <xQueueGenericSendFromISR+0x42>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e000      	b.n	800eba0 <xQueueGenericSendFromISR+0x44>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d10b      	bne.n	800ebbc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800eba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba8:	f383 8811 	msr	BASEPRI, r3
 800ebac:	f3bf 8f6f 	isb	sy
 800ebb0:	f3bf 8f4f 	dsb	sy
 800ebb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ebb6:	bf00      	nop
 800ebb8:	bf00      	nop
 800ebba:	e7fd      	b.n	800ebb8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	2b02      	cmp	r3, #2
 800ebc0:	d103      	bne.n	800ebca <xQueueGenericSendFromISR+0x6e>
 800ebc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	d101      	bne.n	800ebce <xQueueGenericSendFromISR+0x72>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e000      	b.n	800ebd0 <xQueueGenericSendFromISR+0x74>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d10b      	bne.n	800ebec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ebd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	623b      	str	r3, [r7, #32]
}
 800ebe6:	bf00      	nop
 800ebe8:	bf00      	nop
 800ebea:	e7fd      	b.n	800ebe8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebec:	f001 fc3c 	bl	8010468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ebf0:	f3ef 8211 	mrs	r2, BASEPRI
 800ebf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf8:	f383 8811 	msr	BASEPRI, r3
 800ebfc:	f3bf 8f6f 	isb	sy
 800ec00:	f3bf 8f4f 	dsb	sy
 800ec04:	61fa      	str	r2, [r7, #28]
 800ec06:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ec08:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec0a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d302      	bcc.n	800ec1e <xQueueGenericSendFromISR+0xc2>
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	2b02      	cmp	r3, #2
 800ec1c:	d12f      	bne.n	800ec7e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ec24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	68b9      	ldr	r1, [r7, #8]
 800ec32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ec34:	f000 f994 	bl	800ef60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ec38:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ec3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec40:	d112      	bne.n	800ec68 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d016      	beq.n	800ec78 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec4c:	3324      	adds	r3, #36	@ 0x24
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 ff26 	bl	800faa0 <xTaskRemoveFromEventList>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00e      	beq.n	800ec78 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00b      	beq.n	800ec78 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2201      	movs	r2, #1
 800ec64:	601a      	str	r2, [r3, #0]
 800ec66:	e007      	b.n	800ec78 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ec68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	b25a      	sxtb	r2, r3
 800ec72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ec7c:	e001      	b.n	800ec82 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec84:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ec8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3740      	adds	r7, #64	@ 0x40
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b08c      	sub	sp, #48	@ 0x30
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eca4:	2300      	movs	r3, #0
 800eca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ecac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10b      	bne.n	800ecca <xQueueReceive+0x32>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	623b      	str	r3, [r7, #32]
}
 800ecc4:	bf00      	nop
 800ecc6:	bf00      	nop
 800ecc8:	e7fd      	b.n	800ecc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d103      	bne.n	800ecd8 <xQueueReceive+0x40>
 800ecd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d101      	bne.n	800ecdc <xQueueReceive+0x44>
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e000      	b.n	800ecde <xQueueReceive+0x46>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d10b      	bne.n	800ecfa <xQueueReceive+0x62>
	__asm volatile
 800ece2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ece6:	f383 8811 	msr	BASEPRI, r3
 800ecea:	f3bf 8f6f 	isb	sy
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	61fb      	str	r3, [r7, #28]
}
 800ecf4:	bf00      	nop
 800ecf6:	bf00      	nop
 800ecf8:	e7fd      	b.n	800ecf6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ecfa:	f001 f899 	bl	800fe30 <xTaskGetSchedulerState>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d102      	bne.n	800ed0a <xQueueReceive+0x72>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d101      	bne.n	800ed0e <xQueueReceive+0x76>
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e000      	b.n	800ed10 <xQueueReceive+0x78>
 800ed0e:	2300      	movs	r3, #0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10b      	bne.n	800ed2c <xQueueReceive+0x94>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed18:	f383 8811 	msr	BASEPRI, r3
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f3bf 8f4f 	dsb	sy
 800ed24:	61bb      	str	r3, [r7, #24]
}
 800ed26:	bf00      	nop
 800ed28:	bf00      	nop
 800ed2a:	e7fd      	b.n	800ed28 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed2c:	f001 fabc 	bl	80102a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d01f      	beq.n	800ed7c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed3c:	68b9      	ldr	r1, [r7, #8]
 800ed3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed40:	f000 f978 	bl	800f034 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed46:	1e5a      	subs	r2, r3, #1
 800ed48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00f      	beq.n	800ed74 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed56:	3310      	adds	r3, #16
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f000 fea1 	bl	800faa0 <xTaskRemoveFromEventList>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d007      	beq.n	800ed74 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ed64:	4b3c      	ldr	r3, [pc, #240]	@ (800ee58 <xQueueReceive+0x1c0>)
 800ed66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed6a:	601a      	str	r2, [r3, #0]
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ed74:	f001 faca 	bl	801030c <vPortExitCritical>
				return pdPASS;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e069      	b.n	800ee50 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d103      	bne.n	800ed8a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ed82:	f001 fac3 	bl	801030c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed86:	2300      	movs	r3, #0
 800ed88:	e062      	b.n	800ee50 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d106      	bne.n	800ed9e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed90:	f107 0310 	add.w	r3, r7, #16
 800ed94:	4618      	mov	r0, r3
 800ed96:	f000 fee7 	bl	800fb68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed9e:	f001 fab5 	bl	801030c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eda2:	f000 fc47 	bl	800f634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eda6:	f001 fa7f 	bl	80102a8 <vPortEnterCritical>
 800edaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800edb0:	b25b      	sxtb	r3, r3
 800edb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb6:	d103      	bne.n	800edc0 <xQueueReceive+0x128>
 800edb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edba:	2200      	movs	r2, #0
 800edbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800edc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800edc6:	b25b      	sxtb	r3, r3
 800edc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edcc:	d103      	bne.n	800edd6 <xQueueReceive+0x13e>
 800edce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800edd6:	f001 fa99 	bl	801030c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800edda:	1d3a      	adds	r2, r7, #4
 800eddc:	f107 0310 	add.w	r3, r7, #16
 800ede0:	4611      	mov	r1, r2
 800ede2:	4618      	mov	r0, r3
 800ede4:	f000 fed6 	bl	800fb94 <xTaskCheckForTimeOut>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d123      	bne.n	800ee36 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edf0:	f000 f998 	bl	800f124 <prvIsQueueEmpty>
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d017      	beq.n	800ee2a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800edfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfc:	3324      	adds	r3, #36	@ 0x24
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	4611      	mov	r1, r2
 800ee02:	4618      	mov	r0, r3
 800ee04:	f000 fe26 	bl	800fa54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee0a:	f000 f939 	bl	800f080 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee0e:	f000 fc1f 	bl	800f650 <xTaskResumeAll>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d189      	bne.n	800ed2c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ee18:	4b0f      	ldr	r3, [pc, #60]	@ (800ee58 <xQueueReceive+0x1c0>)
 800ee1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	f3bf 8f4f 	dsb	sy
 800ee24:	f3bf 8f6f 	isb	sy
 800ee28:	e780      	b.n	800ed2c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ee2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee2c:	f000 f928 	bl	800f080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee30:	f000 fc0e 	bl	800f650 <xTaskResumeAll>
 800ee34:	e77a      	b.n	800ed2c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ee36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee38:	f000 f922 	bl	800f080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee3c:	f000 fc08 	bl	800f650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee42:	f000 f96f 	bl	800f124 <prvIsQueueEmpty>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f43f af6f 	beq.w	800ed2c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ee4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3730      	adds	r7, #48	@ 0x30
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	e000ed04 	.word	0xe000ed04

0800ee5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b08e      	sub	sp, #56	@ 0x38
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ee6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d10b      	bne.n	800ee8a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ee72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee76:	f383 8811 	msr	BASEPRI, r3
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	f3bf 8f4f 	dsb	sy
 800ee82:	623b      	str	r3, [r7, #32]
}
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop
 800ee88:	e7fd      	b.n	800ee86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d103      	bne.n	800ee98 <xQueueReceiveFromISR+0x3c>
 800ee90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d101      	bne.n	800ee9c <xQueueReceiveFromISR+0x40>
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e000      	b.n	800ee9e <xQueueReceiveFromISR+0x42>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10b      	bne.n	800eeba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800eea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea6:	f383 8811 	msr	BASEPRI, r3
 800eeaa:	f3bf 8f6f 	isb	sy
 800eeae:	f3bf 8f4f 	dsb	sy
 800eeb2:	61fb      	str	r3, [r7, #28]
}
 800eeb4:	bf00      	nop
 800eeb6:	bf00      	nop
 800eeb8:	e7fd      	b.n	800eeb6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eeba:	f001 fad5 	bl	8010468 <vPortValidateInterruptPriority>
	__asm volatile
 800eebe:	f3ef 8211 	mrs	r2, BASEPRI
 800eec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec6:	f383 8811 	msr	BASEPRI, r3
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	61ba      	str	r2, [r7, #24]
 800eed4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eed6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eeda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eedc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eede:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d02f      	beq.n	800ef46 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eeec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eef0:	68b9      	ldr	r1, [r7, #8]
 800eef2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eef4:	f000 f89e 	bl	800f034 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefa:	1e5a      	subs	r2, r3, #1
 800eefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eefe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ef00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ef04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef08:	d112      	bne.n	800ef30 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d016      	beq.n	800ef40 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef14:	3310      	adds	r3, #16
 800ef16:	4618      	mov	r0, r3
 800ef18:	f000 fdc2 	bl	800faa0 <xTaskRemoveFromEventList>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00e      	beq.n	800ef40 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00b      	beq.n	800ef40 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	601a      	str	r2, [r3, #0]
 800ef2e:	e007      	b.n	800ef40 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ef30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef34:	3301      	adds	r3, #1
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	b25a      	sxtb	r2, r3
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ef40:	2301      	movs	r3, #1
 800ef42:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef44:	e001      	b.n	800ef4a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ef46:	2300      	movs	r3, #0
 800ef48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	f383 8811 	msr	BASEPRI, r3
}
 800ef54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3738      	adds	r7, #56	@ 0x38
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	60b9      	str	r1, [r7, #8]
 800ef6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d10d      	bne.n	800ef9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d14d      	bne.n	800f022 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	689b      	ldr	r3, [r3, #8]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f000 ff6e 	bl	800fe6c <xTaskPriorityDisinherit>
 800ef90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2200      	movs	r2, #0
 800ef96:	609a      	str	r2, [r3, #8]
 800ef98:	e043      	b.n	800f022 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d119      	bne.n	800efd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	6858      	ldr	r0, [r3, #4]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efa8:	461a      	mov	r2, r3
 800efaa:	68b9      	ldr	r1, [r7, #8]
 800efac:	f002 f8f6 	bl	801119c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	685a      	ldr	r2, [r3, #4]
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efb8:	441a      	add	r2, r3
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	685a      	ldr	r2, [r3, #4]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d32b      	bcc.n	800f022 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	605a      	str	r2, [r3, #4]
 800efd2:	e026      	b.n	800f022 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	68d8      	ldr	r0, [r3, #12]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efdc:	461a      	mov	r2, r3
 800efde:	68b9      	ldr	r1, [r7, #8]
 800efe0:	f002 f8dc 	bl	801119c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	68da      	ldr	r2, [r3, #12]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efec:	425b      	negs	r3, r3
 800efee:	441a      	add	r2, r3
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	68da      	ldr	r2, [r3, #12]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	429a      	cmp	r2, r3
 800effe:	d207      	bcs.n	800f010 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	689a      	ldr	r2, [r3, #8]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f008:	425b      	negs	r3, r3
 800f00a:	441a      	add	r2, r3
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2b02      	cmp	r3, #2
 800f014:	d105      	bne.n	800f022 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	3b01      	subs	r3, #1
 800f020:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	1c5a      	adds	r2, r3, #1
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f02a:	697b      	ldr	r3, [r7, #20]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3718      	adds	r7, #24
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f042:	2b00      	cmp	r3, #0
 800f044:	d018      	beq.n	800f078 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	68da      	ldr	r2, [r3, #12]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f04e:	441a      	add	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	68da      	ldr	r2, [r3, #12]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d303      	bcc.n	800f068 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	68d9      	ldr	r1, [r3, #12]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f070:	461a      	mov	r2, r3
 800f072:	6838      	ldr	r0, [r7, #0]
 800f074:	f002 f892 	bl	801119c <memcpy>
	}
}
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b084      	sub	sp, #16
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f088:	f001 f90e 	bl	80102a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f092:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f094:	e011      	b.n	800f0ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d012      	beq.n	800f0c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	3324      	adds	r3, #36	@ 0x24
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 fcfc 	bl	800faa0 <xTaskRemoveFromEventList>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d001      	beq.n	800f0b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f0ae:	f000 fdd5 	bl	800fc5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
 800f0b4:	3b01      	subs	r3, #1
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	dce9      	bgt.n	800f096 <prvUnlockQueue+0x16>
 800f0c2:	e000      	b.n	800f0c6 <prvUnlockQueue+0x46>
					break;
 800f0c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	22ff      	movs	r2, #255	@ 0xff
 800f0ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f0ce:	f001 f91d 	bl	801030c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f0d2:	f001 f8e9 	bl	80102a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f0dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f0de:	e011      	b.n	800f104 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	691b      	ldr	r3, [r3, #16]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d012      	beq.n	800f10e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	3310      	adds	r3, #16
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f000 fcd7 	bl	800faa0 <xTaskRemoveFromEventList>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d001      	beq.n	800f0fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f0f8:	f000 fdb0 	bl	800fc5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f0fc:	7bbb      	ldrb	r3, [r7, #14]
 800f0fe:	3b01      	subs	r3, #1
 800f100:	b2db      	uxtb	r3, r3
 800f102:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	dce9      	bgt.n	800f0e0 <prvUnlockQueue+0x60>
 800f10c:	e000      	b.n	800f110 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f10e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	22ff      	movs	r2, #255	@ 0xff
 800f114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f118:	f001 f8f8 	bl	801030c <vPortExitCritical>
}
 800f11c:	bf00      	nop
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f12c:	f001 f8bc 	bl	80102a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f134:	2b00      	cmp	r3, #0
 800f136:	d102      	bne.n	800f13e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f138:	2301      	movs	r3, #1
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	e001      	b.n	800f142 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f13e:	2300      	movs	r3, #0
 800f140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f142:	f001 f8e3 	bl	801030c <vPortExitCritical>

	return xReturn;
 800f146:	68fb      	ldr	r3, [r7, #12]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f158:	f001 f8a6 	bl	80102a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f164:	429a      	cmp	r2, r3
 800f166:	d102      	bne.n	800f16e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f168:	2301      	movs	r3, #1
 800f16a:	60fb      	str	r3, [r7, #12]
 800f16c:	e001      	b.n	800f172 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f16e:	2300      	movs	r3, #0
 800f170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f172:	f001 f8cb 	bl	801030c <vPortExitCritical>

	return xReturn;
 800f176:	68fb      	ldr	r3, [r7, #12]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3710      	adds	r7, #16
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f180:	b580      	push	{r7, lr}
 800f182:	b08e      	sub	sp, #56	@ 0x38
 800f184:	af04      	add	r7, sp, #16
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	607a      	str	r2, [r7, #4]
 800f18c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f190:	2b00      	cmp	r3, #0
 800f192:	d10b      	bne.n	800f1ac <xTaskCreateStatic+0x2c>
	__asm volatile
 800f194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f198:	f383 8811 	msr	BASEPRI, r3
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	623b      	str	r3, [r7, #32]
}
 800f1a6:	bf00      	nop
 800f1a8:	bf00      	nop
 800f1aa:	e7fd      	b.n	800f1a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d10b      	bne.n	800f1ca <xTaskCreateStatic+0x4a>
	__asm volatile
 800f1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	61fb      	str	r3, [r7, #28]
}
 800f1c4:	bf00      	nop
 800f1c6:	bf00      	nop
 800f1c8:	e7fd      	b.n	800f1c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f1ca:	23a4      	movs	r3, #164	@ 0xa4
 800f1cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	2ba4      	cmp	r3, #164	@ 0xa4
 800f1d2:	d00b      	beq.n	800f1ec <xTaskCreateStatic+0x6c>
	__asm volatile
 800f1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d8:	f383 8811 	msr	BASEPRI, r3
 800f1dc:	f3bf 8f6f 	isb	sy
 800f1e0:	f3bf 8f4f 	dsb	sy
 800f1e4:	61bb      	str	r3, [r7, #24]
}
 800f1e6:	bf00      	nop
 800f1e8:	bf00      	nop
 800f1ea:	e7fd      	b.n	800f1e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f1ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d01e      	beq.n	800f232 <xTaskCreateStatic+0xb2>
 800f1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d01b      	beq.n	800f232 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f202:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f206:	2202      	movs	r2, #2
 800f208:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f20c:	2300      	movs	r3, #0
 800f20e:	9303      	str	r3, [sp, #12]
 800f210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f212:	9302      	str	r3, [sp, #8]
 800f214:	f107 0314 	add.w	r3, r7, #20
 800f218:	9301      	str	r3, [sp, #4]
 800f21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21c:	9300      	str	r3, [sp, #0]
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	68b9      	ldr	r1, [r7, #8]
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f000 f851 	bl	800f2cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f22a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f22c:	f000 f8f8 	bl	800f420 <prvAddNewTaskToReadyList>
 800f230:	e001      	b.n	800f236 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f232:	2300      	movs	r3, #0
 800f234:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f236:	697b      	ldr	r3, [r7, #20]
	}
 800f238:	4618      	mov	r0, r3
 800f23a:	3728      	adds	r7, #40	@ 0x28
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f240:	b580      	push	{r7, lr}
 800f242:	b08c      	sub	sp, #48	@ 0x30
 800f244:	af04      	add	r7, sp, #16
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	603b      	str	r3, [r7, #0]
 800f24c:	4613      	mov	r3, r2
 800f24e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f250:	88fb      	ldrh	r3, [r7, #6]
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4618      	mov	r0, r3
 800f256:	f001 f949 	bl	80104ec <pvPortMalloc>
 800f25a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00e      	beq.n	800f280 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f262:	20a4      	movs	r0, #164	@ 0xa4
 800f264:	f001 f942 	bl	80104ec <pvPortMalloc>
 800f268:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d003      	beq.n	800f278 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	697a      	ldr	r2, [r7, #20]
 800f274:	631a      	str	r2, [r3, #48]	@ 0x30
 800f276:	e005      	b.n	800f284 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f278:	6978      	ldr	r0, [r7, #20]
 800f27a:	f001 fa0b 	bl	8010694 <vPortFree>
 800f27e:	e001      	b.n	800f284 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f280:	2300      	movs	r3, #0
 800f282:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d017      	beq.n	800f2ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	2200      	movs	r2, #0
 800f28e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f292:	88fa      	ldrh	r2, [r7, #6]
 800f294:	2300      	movs	r3, #0
 800f296:	9303      	str	r3, [sp, #12]
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	9302      	str	r3, [sp, #8]
 800f29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	68b9      	ldr	r1, [r7, #8]
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f000 f80f 	bl	800f2cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2ae:	69f8      	ldr	r0, [r7, #28]
 800f2b0:	f000 f8b6 	bl	800f420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	61bb      	str	r3, [r7, #24]
 800f2b8:	e002      	b.n	800f2c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f2be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f2c0:	69bb      	ldr	r3, [r7, #24]
	}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3720      	adds	r7, #32
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
	...

0800f2cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b088      	sub	sp, #32
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
 800f2d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	21a5      	movs	r1, #165	@ 0xa5
 800f2e6:	f001 feb7 	bl	8011058 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2f4:	3b01      	subs	r3, #1
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	4413      	add	r3, r2
 800f2fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	f023 0307 	bic.w	r3, r3, #7
 800f302:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	f003 0307 	and.w	r3, r3, #7
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00b      	beq.n	800f326 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	617b      	str	r3, [r7, #20]
}
 800f320:	bf00      	nop
 800f322:	bf00      	nop
 800f324:	e7fd      	b.n	800f322 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d01f      	beq.n	800f36c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f32c:	2300      	movs	r3, #0
 800f32e:	61fb      	str	r3, [r7, #28]
 800f330:	e012      	b.n	800f358 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	4413      	add	r3, r2
 800f338:	7819      	ldrb	r1, [r3, #0]
 800f33a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	4413      	add	r3, r2
 800f340:	3334      	adds	r3, #52	@ 0x34
 800f342:	460a      	mov	r2, r1
 800f344:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f346:	68ba      	ldr	r2, [r7, #8]
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	4413      	add	r3, r2
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d006      	beq.n	800f360 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	3301      	adds	r3, #1
 800f356:	61fb      	str	r3, [r7, #28]
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	2b0f      	cmp	r3, #15
 800f35c:	d9e9      	bls.n	800f332 <prvInitialiseNewTask+0x66>
 800f35e:	e000      	b.n	800f362 <prvInitialiseNewTask+0x96>
			{
				break;
 800f360:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f364:	2200      	movs	r2, #0
 800f366:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f36a:	e003      	b.n	800f374 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f36e:	2200      	movs	r2, #0
 800f370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f376:	2b06      	cmp	r3, #6
 800f378:	d901      	bls.n	800f37e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f37a:	2306      	movs	r3, #6
 800f37c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f382:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f388:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f38c:	2200      	movs	r2, #0
 800f38e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f392:	3304      	adds	r3, #4
 800f394:	4618      	mov	r0, r3
 800f396:	f7ff f909 	bl	800e5ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f39c:	3318      	adds	r3, #24
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff f904 	bl	800e5ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ac:	f1c3 0207 	rsb	r2, r3, #7
 800f3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3bc:	2200      	movs	r2, #0
 800f3be:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d2:	3350      	adds	r3, #80	@ 0x50
 800f3d4:	224c      	movs	r2, #76	@ 0x4c
 800f3d6:	2100      	movs	r1, #0
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f001 fe3d 	bl	8011058 <memset>
 800f3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e0:	4a0c      	ldr	r2, [pc, #48]	@ (800f414 <prvInitialiseNewTask+0x148>)
 800f3e2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e6:	4a0c      	ldr	r2, [pc, #48]	@ (800f418 <prvInitialiseNewTask+0x14c>)
 800f3e8:	659a      	str	r2, [r3, #88]	@ 0x58
 800f3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ec:	4a0b      	ldr	r2, [pc, #44]	@ (800f41c <prvInitialiseNewTask+0x150>)
 800f3ee:	65da      	str	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f3f0:	683a      	ldr	r2, [r7, #0]
 800f3f2:	68f9      	ldr	r1, [r7, #12]
 800f3f4:	69b8      	ldr	r0, [r7, #24]
 800f3f6:	f000 fe27 	bl	8010048 <pxPortInitialiseStack>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f402:	2b00      	cmp	r3, #0
 800f404:	d002      	beq.n	800f40c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f40a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f40c:	bf00      	nop
 800f40e:	3720      	adds	r7, #32
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	200090f4 	.word	0x200090f4
 800f418:	2000915c 	.word	0x2000915c
 800f41c:	200091c4 	.word	0x200091c4

0800f420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f428:	f000 ff3e 	bl	80102a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f42c:	4b2a      	ldr	r3, [pc, #168]	@ (800f4d8 <prvAddNewTaskToReadyList+0xb8>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	3301      	adds	r3, #1
 800f432:	4a29      	ldr	r2, [pc, #164]	@ (800f4d8 <prvAddNewTaskToReadyList+0xb8>)
 800f434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f436:	4b29      	ldr	r3, [pc, #164]	@ (800f4dc <prvAddNewTaskToReadyList+0xbc>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d109      	bne.n	800f452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f43e:	4a27      	ldr	r2, [pc, #156]	@ (800f4dc <prvAddNewTaskToReadyList+0xbc>)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f444:	4b24      	ldr	r3, [pc, #144]	@ (800f4d8 <prvAddNewTaskToReadyList+0xb8>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d110      	bne.n	800f46e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f44c:	f000 fc2c 	bl	800fca8 <prvInitialiseTaskLists>
 800f450:	e00d      	b.n	800f46e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f452:	4b23      	ldr	r3, [pc, #140]	@ (800f4e0 <prvAddNewTaskToReadyList+0xc0>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d109      	bne.n	800f46e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f45a:	4b20      	ldr	r3, [pc, #128]	@ (800f4dc <prvAddNewTaskToReadyList+0xbc>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f464:	429a      	cmp	r2, r3
 800f466:	d802      	bhi.n	800f46e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f468:	4a1c      	ldr	r2, [pc, #112]	@ (800f4dc <prvAddNewTaskToReadyList+0xbc>)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f46e:	4b1d      	ldr	r3, [pc, #116]	@ (800f4e4 <prvAddNewTaskToReadyList+0xc4>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	3301      	adds	r3, #1
 800f474:	4a1b      	ldr	r2, [pc, #108]	@ (800f4e4 <prvAddNewTaskToReadyList+0xc4>)
 800f476:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f47c:	2201      	movs	r2, #1
 800f47e:	409a      	lsls	r2, r3
 800f480:	4b19      	ldr	r3, [pc, #100]	@ (800f4e8 <prvAddNewTaskToReadyList+0xc8>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4313      	orrs	r3, r2
 800f486:	4a18      	ldr	r2, [pc, #96]	@ (800f4e8 <prvAddNewTaskToReadyList+0xc8>)
 800f488:	6013      	str	r3, [r2, #0]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f48e:	4613      	mov	r3, r2
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	4413      	add	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	4a15      	ldr	r2, [pc, #84]	@ (800f4ec <prvAddNewTaskToReadyList+0xcc>)
 800f498:	441a      	add	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	3304      	adds	r3, #4
 800f49e:	4619      	mov	r1, r3
 800f4a0:	4610      	mov	r0, r2
 800f4a2:	f7ff f890 	bl	800e5c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f4a6:	f000 ff31 	bl	801030c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f4e0 <prvAddNewTaskToReadyList+0xc0>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d00e      	beq.n	800f4d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f4dc <prvAddNewTaskToReadyList+0xbc>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d207      	bcs.n	800f4d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f4c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f0 <prvAddNewTaskToReadyList+0xd0>)
 800f4c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4c6:	601a      	str	r2, [r3, #0]
 800f4c8:	f3bf 8f4f 	dsb	sy
 800f4cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4d0:	bf00      	nop
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	200008d0 	.word	0x200008d0
 800f4dc:	200007d0 	.word	0x200007d0
 800f4e0:	200008dc 	.word	0x200008dc
 800f4e4:	200008ec 	.word	0x200008ec
 800f4e8:	200008d8 	.word	0x200008d8
 800f4ec:	200007d4 	.word	0x200007d4
 800f4f0:	e000ed04 	.word	0xe000ed04

0800f4f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d018      	beq.n	800f538 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f506:	4b14      	ldr	r3, [pc, #80]	@ (800f558 <vTaskDelay+0x64>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00b      	beq.n	800f526 <vTaskDelay+0x32>
	__asm volatile
 800f50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f512:	f383 8811 	msr	BASEPRI, r3
 800f516:	f3bf 8f6f 	isb	sy
 800f51a:	f3bf 8f4f 	dsb	sy
 800f51e:	60bb      	str	r3, [r7, #8]
}
 800f520:	bf00      	nop
 800f522:	bf00      	nop
 800f524:	e7fd      	b.n	800f522 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f526:	f000 f885 	bl	800f634 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f52a:	2100      	movs	r1, #0
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 fd25 	bl	800ff7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f532:	f000 f88d 	bl	800f650 <xTaskResumeAll>
 800f536:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d107      	bne.n	800f54e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f53e:	4b07      	ldr	r3, [pc, #28]	@ (800f55c <vTaskDelay+0x68>)
 800f540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f544:	601a      	str	r2, [r3, #0]
 800f546:	f3bf 8f4f 	dsb	sy
 800f54a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f54e:	bf00      	nop
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	200008f8 	.word	0x200008f8
 800f55c:	e000ed04 	.word	0xe000ed04

0800f560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b08a      	sub	sp, #40	@ 0x28
 800f564:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f566:	2300      	movs	r3, #0
 800f568:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f56a:	2300      	movs	r3, #0
 800f56c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f56e:	463a      	mov	r2, r7
 800f570:	1d39      	adds	r1, r7, #4
 800f572:	f107 0308 	add.w	r3, r7, #8
 800f576:	4618      	mov	r0, r3
 800f578:	f7f0 fff2 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	68ba      	ldr	r2, [r7, #8]
 800f582:	9202      	str	r2, [sp, #8]
 800f584:	9301      	str	r3, [sp, #4]
 800f586:	2300      	movs	r3, #0
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	2300      	movs	r3, #0
 800f58c:	460a      	mov	r2, r1
 800f58e:	4921      	ldr	r1, [pc, #132]	@ (800f614 <vTaskStartScheduler+0xb4>)
 800f590:	4821      	ldr	r0, [pc, #132]	@ (800f618 <vTaskStartScheduler+0xb8>)
 800f592:	f7ff fdf5 	bl	800f180 <xTaskCreateStatic>
 800f596:	4603      	mov	r3, r0
 800f598:	4a20      	ldr	r2, [pc, #128]	@ (800f61c <vTaskStartScheduler+0xbc>)
 800f59a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f59c:	4b1f      	ldr	r3, [pc, #124]	@ (800f61c <vTaskStartScheduler+0xbc>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d002      	beq.n	800f5aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	617b      	str	r3, [r7, #20]
 800f5a8:	e001      	b.n	800f5ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d11b      	bne.n	800f5ec <vTaskStartScheduler+0x8c>
	__asm volatile
 800f5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b8:	f383 8811 	msr	BASEPRI, r3
 800f5bc:	f3bf 8f6f 	isb	sy
 800f5c0:	f3bf 8f4f 	dsb	sy
 800f5c4:	613b      	str	r3, [r7, #16]
}
 800f5c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f5c8:	4b15      	ldr	r3, [pc, #84]	@ (800f620 <vTaskStartScheduler+0xc0>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3350      	adds	r3, #80	@ 0x50
 800f5ce:	4a15      	ldr	r2, [pc, #84]	@ (800f624 <vTaskStartScheduler+0xc4>)
 800f5d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f5d2:	4b15      	ldr	r3, [pc, #84]	@ (800f628 <vTaskStartScheduler+0xc8>)
 800f5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f5da:	4b14      	ldr	r3, [pc, #80]	@ (800f62c <vTaskStartScheduler+0xcc>)
 800f5dc:	2201      	movs	r2, #1
 800f5de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f5e0:	4b13      	ldr	r3, [pc, #76]	@ (800f630 <vTaskStartScheduler+0xd0>)
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f5e6:	f000 fdbb 	bl	8010160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f5ea:	e00f      	b.n	800f60c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f2:	d10b      	bne.n	800f60c <vTaskStartScheduler+0xac>
	__asm volatile
 800f5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f8:	f383 8811 	msr	BASEPRI, r3
 800f5fc:	f3bf 8f6f 	isb	sy
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	60fb      	str	r3, [r7, #12]
}
 800f606:	bf00      	nop
 800f608:	bf00      	nop
 800f60a:	e7fd      	b.n	800f608 <vTaskStartScheduler+0xa8>
}
 800f60c:	bf00      	nop
 800f60e:	3718      	adds	r7, #24
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	08011324 	.word	0x08011324
 800f618:	0800fc75 	.word	0x0800fc75
 800f61c:	200008f4 	.word	0x200008f4
 800f620:	200007d0 	.word	0x200007d0
 800f624:	20000030 	.word	0x20000030
 800f628:	200008f0 	.word	0x200008f0
 800f62c:	200008dc 	.word	0x200008dc
 800f630:	200008d4 	.word	0x200008d4

0800f634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f634:	b480      	push	{r7}
 800f636:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f638:	4b04      	ldr	r3, [pc, #16]	@ (800f64c <vTaskSuspendAll+0x18>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	3301      	adds	r3, #1
 800f63e:	4a03      	ldr	r2, [pc, #12]	@ (800f64c <vTaskSuspendAll+0x18>)
 800f640:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f642:	bf00      	nop
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	200008f8 	.word	0x200008f8

0800f650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f656:	2300      	movs	r3, #0
 800f658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f65a:	2300      	movs	r3, #0
 800f65c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f65e:	4b42      	ldr	r3, [pc, #264]	@ (800f768 <xTaskResumeAll+0x118>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d10b      	bne.n	800f67e <xTaskResumeAll+0x2e>
	__asm volatile
 800f666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f66a:	f383 8811 	msr	BASEPRI, r3
 800f66e:	f3bf 8f6f 	isb	sy
 800f672:	f3bf 8f4f 	dsb	sy
 800f676:	603b      	str	r3, [r7, #0]
}
 800f678:	bf00      	nop
 800f67a:	bf00      	nop
 800f67c:	e7fd      	b.n	800f67a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f67e:	f000 fe13 	bl	80102a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f682:	4b39      	ldr	r3, [pc, #228]	@ (800f768 <xTaskResumeAll+0x118>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	3b01      	subs	r3, #1
 800f688:	4a37      	ldr	r2, [pc, #220]	@ (800f768 <xTaskResumeAll+0x118>)
 800f68a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f68c:	4b36      	ldr	r3, [pc, #216]	@ (800f768 <xTaskResumeAll+0x118>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d161      	bne.n	800f758 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f694:	4b35      	ldr	r3, [pc, #212]	@ (800f76c <xTaskResumeAll+0x11c>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d05d      	beq.n	800f758 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f69c:	e02e      	b.n	800f6fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f69e:	4b34      	ldr	r3, [pc, #208]	@ (800f770 <xTaskResumeAll+0x120>)
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	3318      	adds	r3, #24
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fe ffe8 	bl	800e680 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	3304      	adds	r3, #4
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fe ffe3 	bl	800e680 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6be:	2201      	movs	r2, #1
 800f6c0:	409a      	lsls	r2, r3
 800f6c2:	4b2c      	ldr	r3, [pc, #176]	@ (800f774 <xTaskResumeAll+0x124>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	4a2a      	ldr	r2, [pc, #168]	@ (800f774 <xTaskResumeAll+0x124>)
 800f6ca:	6013      	str	r3, [r2, #0]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	4413      	add	r3, r2
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	4a27      	ldr	r2, [pc, #156]	@ (800f778 <xTaskResumeAll+0x128>)
 800f6da:	441a      	add	r2, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	3304      	adds	r3, #4
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	f7fe ff6f 	bl	800e5c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6ec:	4b23      	ldr	r3, [pc, #140]	@ (800f77c <xTaskResumeAll+0x12c>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d302      	bcc.n	800f6fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f6f6:	4b22      	ldr	r3, [pc, #136]	@ (800f780 <xTaskResumeAll+0x130>)
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6fc:	4b1c      	ldr	r3, [pc, #112]	@ (800f770 <xTaskResumeAll+0x120>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1cc      	bne.n	800f69e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d001      	beq.n	800f70e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f70a:	f000 fb71 	bl	800fdf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f70e:	4b1d      	ldr	r3, [pc, #116]	@ (800f784 <xTaskResumeAll+0x134>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d010      	beq.n	800f73c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f71a:	f000 f859 	bl	800f7d0 <xTaskIncrementTick>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d002      	beq.n	800f72a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f724:	4b16      	ldr	r3, [pc, #88]	@ (800f780 <xTaskResumeAll+0x130>)
 800f726:	2201      	movs	r2, #1
 800f728:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d1f1      	bne.n	800f71a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f736:	4b13      	ldr	r3, [pc, #76]	@ (800f784 <xTaskResumeAll+0x134>)
 800f738:	2200      	movs	r2, #0
 800f73a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f73c:	4b10      	ldr	r3, [pc, #64]	@ (800f780 <xTaskResumeAll+0x130>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d009      	beq.n	800f758 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f744:	2301      	movs	r3, #1
 800f746:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f748:	4b0f      	ldr	r3, [pc, #60]	@ (800f788 <xTaskResumeAll+0x138>)
 800f74a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f74e:	601a      	str	r2, [r3, #0]
 800f750:	f3bf 8f4f 	dsb	sy
 800f754:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f758:	f000 fdd8 	bl	801030c <vPortExitCritical>

	return xAlreadyYielded;
 800f75c:	68bb      	ldr	r3, [r7, #8]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	200008f8 	.word	0x200008f8
 800f76c:	200008d0 	.word	0x200008d0
 800f770:	20000890 	.word	0x20000890
 800f774:	200008d8 	.word	0x200008d8
 800f778:	200007d4 	.word	0x200007d4
 800f77c:	200007d0 	.word	0x200007d0
 800f780:	200008e4 	.word	0x200008e4
 800f784:	200008e0 	.word	0x200008e0
 800f788:	e000ed04 	.word	0xe000ed04

0800f78c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f792:	4b05      	ldr	r3, [pc, #20]	@ (800f7a8 <xTaskGetTickCount+0x1c>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f798:	687b      	ldr	r3, [r7, #4]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	370c      	adds	r7, #12
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop
 800f7a8:	200008d4 	.word	0x200008d4

0800f7ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7b2:	f000 fe59 	bl	8010468 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f7ba:	4b04      	ldr	r3, [pc, #16]	@ (800f7cc <xTaskGetTickCountFromISR+0x20>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f7c0:	683b      	ldr	r3, [r7, #0]
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3708      	adds	r7, #8
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	200008d4 	.word	0x200008d4

0800f7d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b086      	sub	sp, #24
 800f7d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7da:	4b4f      	ldr	r3, [pc, #316]	@ (800f918 <xTaskIncrementTick+0x148>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	f040 808f 	bne.w	800f902 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f7e4:	4b4d      	ldr	r3, [pc, #308]	@ (800f91c <xTaskIncrementTick+0x14c>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f7ec:	4a4b      	ldr	r2, [pc, #300]	@ (800f91c <xTaskIncrementTick+0x14c>)
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d121      	bne.n	800f83c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f7f8:	4b49      	ldr	r3, [pc, #292]	@ (800f920 <xTaskIncrementTick+0x150>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00b      	beq.n	800f81a <xTaskIncrementTick+0x4a>
	__asm volatile
 800f802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f806:	f383 8811 	msr	BASEPRI, r3
 800f80a:	f3bf 8f6f 	isb	sy
 800f80e:	f3bf 8f4f 	dsb	sy
 800f812:	603b      	str	r3, [r7, #0]
}
 800f814:	bf00      	nop
 800f816:	bf00      	nop
 800f818:	e7fd      	b.n	800f816 <xTaskIncrementTick+0x46>
 800f81a:	4b41      	ldr	r3, [pc, #260]	@ (800f920 <xTaskIncrementTick+0x150>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	60fb      	str	r3, [r7, #12]
 800f820:	4b40      	ldr	r3, [pc, #256]	@ (800f924 <xTaskIncrementTick+0x154>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4a3e      	ldr	r2, [pc, #248]	@ (800f920 <xTaskIncrementTick+0x150>)
 800f826:	6013      	str	r3, [r2, #0]
 800f828:	4a3e      	ldr	r2, [pc, #248]	@ (800f924 <xTaskIncrementTick+0x154>)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6013      	str	r3, [r2, #0]
 800f82e:	4b3e      	ldr	r3, [pc, #248]	@ (800f928 <xTaskIncrementTick+0x158>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	3301      	adds	r3, #1
 800f834:	4a3c      	ldr	r2, [pc, #240]	@ (800f928 <xTaskIncrementTick+0x158>)
 800f836:	6013      	str	r3, [r2, #0]
 800f838:	f000 fada 	bl	800fdf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f83c:	4b3b      	ldr	r3, [pc, #236]	@ (800f92c <xTaskIncrementTick+0x15c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	693a      	ldr	r2, [r7, #16]
 800f842:	429a      	cmp	r2, r3
 800f844:	d348      	bcc.n	800f8d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f846:	4b36      	ldr	r3, [pc, #216]	@ (800f920 <xTaskIncrementTick+0x150>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d104      	bne.n	800f85a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f850:	4b36      	ldr	r3, [pc, #216]	@ (800f92c <xTaskIncrementTick+0x15c>)
 800f852:	f04f 32ff 	mov.w	r2, #4294967295
 800f856:	601a      	str	r2, [r3, #0]
					break;
 800f858:	e03e      	b.n	800f8d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f85a:	4b31      	ldr	r3, [pc, #196]	@ (800f920 <xTaskIncrementTick+0x150>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	68db      	ldr	r3, [r3, #12]
 800f862:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f86a:	693a      	ldr	r2, [r7, #16]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d203      	bcs.n	800f87a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f872:	4a2e      	ldr	r2, [pc, #184]	@ (800f92c <xTaskIncrementTick+0x15c>)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f878:	e02e      	b.n	800f8d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	3304      	adds	r3, #4
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fe fefe 	bl	800e680 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d004      	beq.n	800f896 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	3318      	adds	r3, #24
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe fef5 	bl	800e680 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f89a:	2201      	movs	r2, #1
 800f89c:	409a      	lsls	r2, r3
 800f89e:	4b24      	ldr	r3, [pc, #144]	@ (800f930 <xTaskIncrementTick+0x160>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	4a22      	ldr	r2, [pc, #136]	@ (800f930 <xTaskIncrementTick+0x160>)
 800f8a6:	6013      	str	r3, [r2, #0]
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	4413      	add	r3, r2
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	4a1f      	ldr	r2, [pc, #124]	@ (800f934 <xTaskIncrementTick+0x164>)
 800f8b6:	441a      	add	r2, r3
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	3304      	adds	r3, #4
 800f8bc:	4619      	mov	r1, r3
 800f8be:	4610      	mov	r0, r2
 800f8c0:	f7fe fe81 	bl	800e5c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8c8:	4b1b      	ldr	r3, [pc, #108]	@ (800f938 <xTaskIncrementTick+0x168>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d3b9      	bcc.n	800f846 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8d6:	e7b6      	b.n	800f846 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f8d8:	4b17      	ldr	r3, [pc, #92]	@ (800f938 <xTaskIncrementTick+0x168>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8de:	4915      	ldr	r1, [pc, #84]	@ (800f934 <xTaskIncrementTick+0x164>)
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	4413      	add	r3, r2
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	440b      	add	r3, r1
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d901      	bls.n	800f8f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f8f4:	4b11      	ldr	r3, [pc, #68]	@ (800f93c <xTaskIncrementTick+0x16c>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d007      	beq.n	800f90c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	617b      	str	r3, [r7, #20]
 800f900:	e004      	b.n	800f90c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f902:	4b0f      	ldr	r3, [pc, #60]	@ (800f940 <xTaskIncrementTick+0x170>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	3301      	adds	r3, #1
 800f908:	4a0d      	ldr	r2, [pc, #52]	@ (800f940 <xTaskIncrementTick+0x170>)
 800f90a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f90c:	697b      	ldr	r3, [r7, #20]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3718      	adds	r7, #24
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	200008f8 	.word	0x200008f8
 800f91c:	200008d4 	.word	0x200008d4
 800f920:	20000888 	.word	0x20000888
 800f924:	2000088c 	.word	0x2000088c
 800f928:	200008e8 	.word	0x200008e8
 800f92c:	200008f0 	.word	0x200008f0
 800f930:	200008d8 	.word	0x200008d8
 800f934:	200007d4 	.word	0x200007d4
 800f938:	200007d0 	.word	0x200007d0
 800f93c:	200008e4 	.word	0x200008e4
 800f940:	200008e0 	.word	0x200008e0

0800f944 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b088      	sub	sp, #32
 800f948:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f94a:	4b3c      	ldr	r3, [pc, #240]	@ (800fa3c <vTaskSwitchContext+0xf8>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d003      	beq.n	800f95a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f952:	4b3b      	ldr	r3, [pc, #236]	@ (800fa40 <vTaskSwitchContext+0xfc>)
 800f954:	2201      	movs	r2, #1
 800f956:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f958:	e06c      	b.n	800fa34 <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 800f95a:	4b39      	ldr	r3, [pc, #228]	@ (800fa40 <vTaskSwitchContext+0xfc>)
 800f95c:	2200      	movs	r2, #0
 800f95e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f960:	4b38      	ldr	r3, [pc, #224]	@ (800fa44 <vTaskSwitchContext+0x100>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f966:	61fb      	str	r3, [r7, #28]
 800f968:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f96c:	61bb      	str	r3, [r7, #24]
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	69ba      	ldr	r2, [r7, #24]
 800f974:	429a      	cmp	r2, r3
 800f976:	d111      	bne.n	800f99c <vTaskSwitchContext+0x58>
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	3304      	adds	r3, #4
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	69ba      	ldr	r2, [r7, #24]
 800f980:	429a      	cmp	r2, r3
 800f982:	d10b      	bne.n	800f99c <vTaskSwitchContext+0x58>
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	3308      	adds	r3, #8
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	69ba      	ldr	r2, [r7, #24]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d105      	bne.n	800f99c <vTaskSwitchContext+0x58>
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	330c      	adds	r3, #12
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	69ba      	ldr	r2, [r7, #24]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d008      	beq.n	800f9ae <vTaskSwitchContext+0x6a>
 800f99c:	4b29      	ldr	r3, [pc, #164]	@ (800fa44 <vTaskSwitchContext+0x100>)
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	4b28      	ldr	r3, [pc, #160]	@ (800fa44 <vTaskSwitchContext+0x100>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3334      	adds	r3, #52	@ 0x34
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	4610      	mov	r0, r2
 800f9aa:	f7f0 fdc6 	bl	800053a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ae:	4b26      	ldr	r3, [pc, #152]	@ (800fa48 <vTaskSwitchContext+0x104>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	fab3 f383 	clz	r3, r3
 800f9ba:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f9bc:	7afb      	ldrb	r3, [r7, #11]
 800f9be:	f1c3 031f 	rsb	r3, r3, #31
 800f9c2:	617b      	str	r3, [r7, #20]
 800f9c4:	4921      	ldr	r1, [pc, #132]	@ (800fa4c <vTaskSwitchContext+0x108>)
 800f9c6:	697a      	ldr	r2, [r7, #20]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	4413      	add	r3, r2
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	440b      	add	r3, r1
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d10b      	bne.n	800f9f0 <vTaskSwitchContext+0xac>
	__asm volatile
 800f9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9dc:	f383 8811 	msr	BASEPRI, r3
 800f9e0:	f3bf 8f6f 	isb	sy
 800f9e4:	f3bf 8f4f 	dsb	sy
 800f9e8:	607b      	str	r3, [r7, #4]
}
 800f9ea:	bf00      	nop
 800f9ec:	bf00      	nop
 800f9ee:	e7fd      	b.n	800f9ec <vTaskSwitchContext+0xa8>
 800f9f0:	697a      	ldr	r2, [r7, #20]
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	4413      	add	r3, r2
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4a14      	ldr	r2, [pc, #80]	@ (800fa4c <vTaskSwitchContext+0x108>)
 800f9fc:	4413      	add	r3, r2
 800f9fe:	613b      	str	r3, [r7, #16]
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	685a      	ldr	r2, [r3, #4]
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	605a      	str	r2, [r3, #4]
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	3308      	adds	r3, #8
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d104      	bne.n	800fa20 <vTaskSwitchContext+0xdc>
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	685a      	ldr	r2, [r3, #4]
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	605a      	str	r2, [r3, #4]
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	4a07      	ldr	r2, [pc, #28]	@ (800fa44 <vTaskSwitchContext+0x100>)
 800fa28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa2a:	4b06      	ldr	r3, [pc, #24]	@ (800fa44 <vTaskSwitchContext+0x100>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	3350      	adds	r3, #80	@ 0x50
 800fa30:	4a07      	ldr	r2, [pc, #28]	@ (800fa50 <vTaskSwitchContext+0x10c>)
 800fa32:	6013      	str	r3, [r2, #0]
}
 800fa34:	bf00      	nop
 800fa36:	3720      	adds	r7, #32
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	200008f8 	.word	0x200008f8
 800fa40:	200008e4 	.word	0x200008e4
 800fa44:	200007d0 	.word	0x200007d0
 800fa48:	200008d8 	.word	0x200008d8
 800fa4c:	200007d4 	.word	0x200007d4
 800fa50:	20000030 	.word	0x20000030

0800fa54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d10b      	bne.n	800fa7c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fa64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa68:	f383 8811 	msr	BASEPRI, r3
 800fa6c:	f3bf 8f6f 	isb	sy
 800fa70:	f3bf 8f4f 	dsb	sy
 800fa74:	60fb      	str	r3, [r7, #12]
}
 800fa76:	bf00      	nop
 800fa78:	bf00      	nop
 800fa7a:	e7fd      	b.n	800fa78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa7c:	4b07      	ldr	r3, [pc, #28]	@ (800fa9c <vTaskPlaceOnEventList+0x48>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	3318      	adds	r3, #24
 800fa82:	4619      	mov	r1, r3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7fe fdc2 	bl	800e60e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	6838      	ldr	r0, [r7, #0]
 800fa8e:	f000 fa75 	bl	800ff7c <prvAddCurrentTaskToDelayedList>
}
 800fa92:	bf00      	nop
 800fa94:	3710      	adds	r7, #16
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	200007d0 	.word	0x200007d0

0800faa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	68db      	ldr	r3, [r3, #12]
 800faac:	68db      	ldr	r3, [r3, #12]
 800faae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d10b      	bne.n	800face <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800fab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faba:	f383 8811 	msr	BASEPRI, r3
 800fabe:	f3bf 8f6f 	isb	sy
 800fac2:	f3bf 8f4f 	dsb	sy
 800fac6:	60fb      	str	r3, [r7, #12]
}
 800fac8:	bf00      	nop
 800faca:	bf00      	nop
 800facc:	e7fd      	b.n	800faca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	3318      	adds	r3, #24
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe fdd4 	bl	800e680 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fad8:	4b1d      	ldr	r3, [pc, #116]	@ (800fb50 <xTaskRemoveFromEventList+0xb0>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d11c      	bne.n	800fb1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	3304      	adds	r3, #4
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fe fdcb 	bl	800e680 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faee:	2201      	movs	r2, #1
 800faf0:	409a      	lsls	r2, r3
 800faf2:	4b18      	ldr	r3, [pc, #96]	@ (800fb54 <xTaskRemoveFromEventList+0xb4>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4313      	orrs	r3, r2
 800faf8:	4a16      	ldr	r2, [pc, #88]	@ (800fb54 <xTaskRemoveFromEventList+0xb4>)
 800fafa:	6013      	str	r3, [r2, #0]
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb00:	4613      	mov	r3, r2
 800fb02:	009b      	lsls	r3, r3, #2
 800fb04:	4413      	add	r3, r2
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	4a13      	ldr	r2, [pc, #76]	@ (800fb58 <xTaskRemoveFromEventList+0xb8>)
 800fb0a:	441a      	add	r2, r3
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	3304      	adds	r3, #4
 800fb10:	4619      	mov	r1, r3
 800fb12:	4610      	mov	r0, r2
 800fb14:	f7fe fd57 	bl	800e5c6 <vListInsertEnd>
 800fb18:	e005      	b.n	800fb26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	3318      	adds	r3, #24
 800fb1e:	4619      	mov	r1, r3
 800fb20:	480e      	ldr	r0, [pc, #56]	@ (800fb5c <xTaskRemoveFromEventList+0xbc>)
 800fb22:	f7fe fd50 	bl	800e5c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fb60 <xTaskRemoveFromEventList+0xc0>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d905      	bls.n	800fb40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fb34:	2301      	movs	r3, #1
 800fb36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fb38:	4b0a      	ldr	r3, [pc, #40]	@ (800fb64 <xTaskRemoveFromEventList+0xc4>)
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	601a      	str	r2, [r3, #0]
 800fb3e:	e001      	b.n	800fb44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fb40:	2300      	movs	r3, #0
 800fb42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fb44:	697b      	ldr	r3, [r7, #20]
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3718      	adds	r7, #24
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	200008f8 	.word	0x200008f8
 800fb54:	200008d8 	.word	0x200008d8
 800fb58:	200007d4 	.word	0x200007d4
 800fb5c:	20000890 	.word	0x20000890
 800fb60:	200007d0 	.word	0x200007d0
 800fb64:	200008e4 	.word	0x200008e4

0800fb68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb70:	4b06      	ldr	r3, [pc, #24]	@ (800fb8c <vTaskInternalSetTimeOutState+0x24>)
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb78:	4b05      	ldr	r3, [pc, #20]	@ (800fb90 <vTaskInternalSetTimeOutState+0x28>)
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	605a      	str	r2, [r3, #4]
}
 800fb80:	bf00      	nop
 800fb82:	370c      	adds	r7, #12
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr
 800fb8c:	200008e8 	.word	0x200008e8
 800fb90:	200008d4 	.word	0x200008d4

0800fb94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b088      	sub	sp, #32
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10b      	bne.n	800fbbc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800fba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba8:	f383 8811 	msr	BASEPRI, r3
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	613b      	str	r3, [r7, #16]
}
 800fbb6:	bf00      	nop
 800fbb8:	bf00      	nop
 800fbba:	e7fd      	b.n	800fbb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d10b      	bne.n	800fbda <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800fbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc6:	f383 8811 	msr	BASEPRI, r3
 800fbca:	f3bf 8f6f 	isb	sy
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	60fb      	str	r3, [r7, #12]
}
 800fbd4:	bf00      	nop
 800fbd6:	bf00      	nop
 800fbd8:	e7fd      	b.n	800fbd6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800fbda:	f000 fb65 	bl	80102a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fbde:	4b1d      	ldr	r3, [pc, #116]	@ (800fc54 <xTaskCheckForTimeOut+0xc0>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	69ba      	ldr	r2, [r7, #24]
 800fbea:	1ad3      	subs	r3, r2, r3
 800fbec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbf6:	d102      	bne.n	800fbfe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	61fb      	str	r3, [r7, #28]
 800fbfc:	e023      	b.n	800fc46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	4b15      	ldr	r3, [pc, #84]	@ (800fc58 <xTaskCheckForTimeOut+0xc4>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d007      	beq.n	800fc1a <xTaskCheckForTimeOut+0x86>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	69ba      	ldr	r2, [r7, #24]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d302      	bcc.n	800fc1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fc14:	2301      	movs	r3, #1
 800fc16:	61fb      	str	r3, [r7, #28]
 800fc18:	e015      	b.n	800fc46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	697a      	ldr	r2, [r7, #20]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d20b      	bcs.n	800fc3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	1ad2      	subs	r2, r2, r3
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7ff ff99 	bl	800fb68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fc36:	2300      	movs	r3, #0
 800fc38:	61fb      	str	r3, [r7, #28]
 800fc3a:	e004      	b.n	800fc46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fc42:	2301      	movs	r3, #1
 800fc44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fc46:	f000 fb61 	bl	801030c <vPortExitCritical>

	return xReturn;
 800fc4a:	69fb      	ldr	r3, [r7, #28]
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3720      	adds	r7, #32
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	200008d4 	.word	0x200008d4
 800fc58:	200008e8 	.word	0x200008e8

0800fc5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc60:	4b03      	ldr	r3, [pc, #12]	@ (800fc70 <vTaskMissedYield+0x14>)
 800fc62:	2201      	movs	r2, #1
 800fc64:	601a      	str	r2, [r3, #0]
}
 800fc66:	bf00      	nop
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	200008e4 	.word	0x200008e4

0800fc74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc7c:	f000 f854 	bl	800fd28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc80:	4b07      	ldr	r3, [pc, #28]	@ (800fca0 <prvIdleTask+0x2c>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d907      	bls.n	800fc98 <prvIdleTask+0x24>
			{
				taskYIELD();
 800fc88:	4b06      	ldr	r3, [pc, #24]	@ (800fca4 <prvIdleTask+0x30>)
 800fc8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc8e:	601a      	str	r2, [r3, #0]
 800fc90:	f3bf 8f4f 	dsb	sy
 800fc94:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fc98:	f7f0 fc48 	bl	800052c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fc9c:	e7ee      	b.n	800fc7c <prvIdleTask+0x8>
 800fc9e:	bf00      	nop
 800fca0:	200007d4 	.word	0x200007d4
 800fca4:	e000ed04 	.word	0xe000ed04

0800fca8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fcae:	2300      	movs	r3, #0
 800fcb0:	607b      	str	r3, [r7, #4]
 800fcb2:	e00c      	b.n	800fcce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4413      	add	r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	4a12      	ldr	r2, [pc, #72]	@ (800fd08 <prvInitialiseTaskLists+0x60>)
 800fcc0:	4413      	add	r3, r2
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fe fc52 	bl	800e56c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	3301      	adds	r3, #1
 800fccc:	607b      	str	r3, [r7, #4]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2b06      	cmp	r3, #6
 800fcd2:	d9ef      	bls.n	800fcb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fcd4:	480d      	ldr	r0, [pc, #52]	@ (800fd0c <prvInitialiseTaskLists+0x64>)
 800fcd6:	f7fe fc49 	bl	800e56c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fcda:	480d      	ldr	r0, [pc, #52]	@ (800fd10 <prvInitialiseTaskLists+0x68>)
 800fcdc:	f7fe fc46 	bl	800e56c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fce0:	480c      	ldr	r0, [pc, #48]	@ (800fd14 <prvInitialiseTaskLists+0x6c>)
 800fce2:	f7fe fc43 	bl	800e56c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fce6:	480c      	ldr	r0, [pc, #48]	@ (800fd18 <prvInitialiseTaskLists+0x70>)
 800fce8:	f7fe fc40 	bl	800e56c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fcec:	480b      	ldr	r0, [pc, #44]	@ (800fd1c <prvInitialiseTaskLists+0x74>)
 800fcee:	f7fe fc3d 	bl	800e56c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fcf2:	4b0b      	ldr	r3, [pc, #44]	@ (800fd20 <prvInitialiseTaskLists+0x78>)
 800fcf4:	4a05      	ldr	r2, [pc, #20]	@ (800fd0c <prvInitialiseTaskLists+0x64>)
 800fcf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fcf8:	4b0a      	ldr	r3, [pc, #40]	@ (800fd24 <prvInitialiseTaskLists+0x7c>)
 800fcfa:	4a05      	ldr	r2, [pc, #20]	@ (800fd10 <prvInitialiseTaskLists+0x68>)
 800fcfc:	601a      	str	r2, [r3, #0]
}
 800fcfe:	bf00      	nop
 800fd00:	3708      	adds	r7, #8
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	200007d4 	.word	0x200007d4
 800fd0c:	20000860 	.word	0x20000860
 800fd10:	20000874 	.word	0x20000874
 800fd14:	20000890 	.word	0x20000890
 800fd18:	200008a4 	.word	0x200008a4
 800fd1c:	200008bc 	.word	0x200008bc
 800fd20:	20000888 	.word	0x20000888
 800fd24:	2000088c 	.word	0x2000088c

0800fd28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd2e:	e019      	b.n	800fd64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fd30:	f000 faba 	bl	80102a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd34:	4b10      	ldr	r3, [pc, #64]	@ (800fd78 <prvCheckTasksWaitingTermination+0x50>)
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	3304      	adds	r3, #4
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fe fc9d 	bl	800e680 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fd46:	4b0d      	ldr	r3, [pc, #52]	@ (800fd7c <prvCheckTasksWaitingTermination+0x54>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	4a0b      	ldr	r2, [pc, #44]	@ (800fd7c <prvCheckTasksWaitingTermination+0x54>)
 800fd4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fd50:	4b0b      	ldr	r3, [pc, #44]	@ (800fd80 <prvCheckTasksWaitingTermination+0x58>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	3b01      	subs	r3, #1
 800fd56:	4a0a      	ldr	r2, [pc, #40]	@ (800fd80 <prvCheckTasksWaitingTermination+0x58>)
 800fd58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fd5a:	f000 fad7 	bl	801030c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f810 	bl	800fd84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd64:	4b06      	ldr	r3, [pc, #24]	@ (800fd80 <prvCheckTasksWaitingTermination+0x58>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d1e1      	bne.n	800fd30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd6c:	bf00      	nop
 800fd6e:	bf00      	nop
 800fd70:	3708      	adds	r7, #8
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	200008a4 	.word	0x200008a4
 800fd7c:	200008d0 	.word	0x200008d0
 800fd80:	200008b8 	.word	0x200008b8

0800fd84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3350      	adds	r3, #80	@ 0x50
 800fd90:	4618      	mov	r0, r3
 800fd92:	f001 f969 	bl	8011068 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d108      	bne.n	800fdb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fda4:	4618      	mov	r0, r3
 800fda6:	f000 fc75 	bl	8010694 <vPortFree>
				vPortFree( pxTCB );
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fc72 	bl	8010694 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fdb0:	e019      	b.n	800fde6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	d103      	bne.n	800fdc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 fc69 	bl	8010694 <vPortFree>
	}
 800fdc2:	e010      	b.n	800fde6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800fdca:	2b02      	cmp	r3, #2
 800fdcc:	d00b      	beq.n	800fde6 <prvDeleteTCB+0x62>
	__asm volatile
 800fdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd2:	f383 8811 	msr	BASEPRI, r3
 800fdd6:	f3bf 8f6f 	isb	sy
 800fdda:	f3bf 8f4f 	dsb	sy
 800fdde:	60fb      	str	r3, [r7, #12]
}
 800fde0:	bf00      	nop
 800fde2:	bf00      	nop
 800fde4:	e7fd      	b.n	800fde2 <prvDeleteTCB+0x5e>
	}
 800fde6:	bf00      	nop
 800fde8:	3710      	adds	r7, #16
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
	...

0800fdf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b083      	sub	sp, #12
 800fdf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdf6:	4b0c      	ldr	r3, [pc, #48]	@ (800fe28 <prvResetNextTaskUnblockTime+0x38>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d104      	bne.n	800fe0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fe00:	4b0a      	ldr	r3, [pc, #40]	@ (800fe2c <prvResetNextTaskUnblockTime+0x3c>)
 800fe02:	f04f 32ff 	mov.w	r2, #4294967295
 800fe06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fe08:	e008      	b.n	800fe1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe0a:	4b07      	ldr	r3, [pc, #28]	@ (800fe28 <prvResetNextTaskUnblockTime+0x38>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	4a04      	ldr	r2, [pc, #16]	@ (800fe2c <prvResetNextTaskUnblockTime+0x3c>)
 800fe1a:	6013      	str	r3, [r2, #0]
}
 800fe1c:	bf00      	nop
 800fe1e:	370c      	adds	r7, #12
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr
 800fe28:	20000888 	.word	0x20000888
 800fe2c:	200008f0 	.word	0x200008f0

0800fe30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fe30:	b480      	push	{r7}
 800fe32:	b083      	sub	sp, #12
 800fe34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fe36:	4b0b      	ldr	r3, [pc, #44]	@ (800fe64 <xTaskGetSchedulerState+0x34>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d102      	bne.n	800fe44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe3e:	2301      	movs	r3, #1
 800fe40:	607b      	str	r3, [r7, #4]
 800fe42:	e008      	b.n	800fe56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe44:	4b08      	ldr	r3, [pc, #32]	@ (800fe68 <xTaskGetSchedulerState+0x38>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d102      	bne.n	800fe52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	607b      	str	r3, [r7, #4]
 800fe50:	e001      	b.n	800fe56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe52:	2300      	movs	r3, #0
 800fe54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe56:	687b      	ldr	r3, [r7, #4]
	}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr
 800fe64:	200008dc 	.word	0x200008dc
 800fe68:	200008f8 	.word	0x200008f8

0800fe6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b086      	sub	sp, #24
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d070      	beq.n	800ff64 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fe82:	4b3b      	ldr	r3, [pc, #236]	@ (800ff70 <xTaskPriorityDisinherit+0x104>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	693a      	ldr	r2, [r7, #16]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d00b      	beq.n	800fea4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fe8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe90:	f383 8811 	msr	BASEPRI, r3
 800fe94:	f3bf 8f6f 	isb	sy
 800fe98:	f3bf 8f4f 	dsb	sy
 800fe9c:	60fb      	str	r3, [r7, #12]
}
 800fe9e:	bf00      	nop
 800fea0:	bf00      	nop
 800fea2:	e7fd      	b.n	800fea0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d10b      	bne.n	800fec4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800feac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb0:	f383 8811 	msr	BASEPRI, r3
 800feb4:	f3bf 8f6f 	isb	sy
 800feb8:	f3bf 8f4f 	dsb	sy
 800febc:	60bb      	str	r3, [r7, #8]
}
 800febe:	bf00      	nop
 800fec0:	bf00      	nop
 800fec2:	e7fd      	b.n	800fec0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fec8:	1e5a      	subs	r2, r3, #1
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d044      	beq.n	800ff64 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d140      	bne.n	800ff64 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	3304      	adds	r3, #4
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fe fbca 	bl	800e680 <uxListRemove>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d115      	bne.n	800ff1e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fef6:	491f      	ldr	r1, [pc, #124]	@ (800ff74 <xTaskPriorityDisinherit+0x108>)
 800fef8:	4613      	mov	r3, r2
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	4413      	add	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	440b      	add	r3, r1
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d10a      	bne.n	800ff1e <xTaskPriorityDisinherit+0xb2>
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ff12:	43da      	mvns	r2, r3
 800ff14:	4b18      	ldr	r3, [pc, #96]	@ (800ff78 <xTaskPriorityDisinherit+0x10c>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4013      	ands	r3, r2
 800ff1a:	4a17      	ldr	r2, [pc, #92]	@ (800ff78 <xTaskPriorityDisinherit+0x10c>)
 800ff1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff2a:	f1c3 0207 	rsb	r2, r3, #7
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff36:	2201      	movs	r2, #1
 800ff38:	409a      	lsls	r2, r3
 800ff3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ff78 <xTaskPriorityDisinherit+0x10c>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	4a0d      	ldr	r2, [pc, #52]	@ (800ff78 <xTaskPriorityDisinherit+0x10c>)
 800ff42:	6013      	str	r3, [r2, #0]
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff48:	4613      	mov	r3, r2
 800ff4a:	009b      	lsls	r3, r3, #2
 800ff4c:	4413      	add	r3, r2
 800ff4e:	009b      	lsls	r3, r3, #2
 800ff50:	4a08      	ldr	r2, [pc, #32]	@ (800ff74 <xTaskPriorityDisinherit+0x108>)
 800ff52:	441a      	add	r2, r3
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	3304      	adds	r3, #4
 800ff58:	4619      	mov	r1, r3
 800ff5a:	4610      	mov	r0, r2
 800ff5c:	f7fe fb33 	bl	800e5c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ff60:	2301      	movs	r3, #1
 800ff62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff64:	697b      	ldr	r3, [r7, #20]
	}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3718      	adds	r7, #24
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	200007d0 	.word	0x200007d0
 800ff74:	200007d4 	.word	0x200007d4
 800ff78:	200008d8 	.word	0x200008d8

0800ff7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff86:	4b29      	ldr	r3, [pc, #164]	@ (801002c <prvAddCurrentTaskToDelayedList+0xb0>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff8c:	4b28      	ldr	r3, [pc, #160]	@ (8010030 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	3304      	adds	r3, #4
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fe fb74 	bl	800e680 <uxListRemove>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d10b      	bne.n	800ffb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ff9e:	4b24      	ldr	r3, [pc, #144]	@ (8010030 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	fa02 f303 	lsl.w	r3, r2, r3
 800ffaa:	43da      	mvns	r2, r3
 800ffac:	4b21      	ldr	r3, [pc, #132]	@ (8010034 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4013      	ands	r3, r2
 800ffb2:	4a20      	ldr	r2, [pc, #128]	@ (8010034 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ffb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffbc:	d10a      	bne.n	800ffd4 <prvAddCurrentTaskToDelayedList+0x58>
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d007      	beq.n	800ffd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffc4:	4b1a      	ldr	r3, [pc, #104]	@ (8010030 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	3304      	adds	r3, #4
 800ffca:	4619      	mov	r1, r3
 800ffcc:	481a      	ldr	r0, [pc, #104]	@ (8010038 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ffce:	f7fe fafa 	bl	800e5c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ffd2:	e026      	b.n	8010022 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4413      	add	r3, r2
 800ffda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ffdc:	4b14      	ldr	r3, [pc, #80]	@ (8010030 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	68ba      	ldr	r2, [r7, #8]
 800ffe2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ffe4:	68ba      	ldr	r2, [r7, #8]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d209      	bcs.n	8010000 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffec:	4b13      	ldr	r3, [pc, #76]	@ (801003c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	4b0f      	ldr	r3, [pc, #60]	@ (8010030 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3304      	adds	r3, #4
 800fff6:	4619      	mov	r1, r3
 800fff8:	4610      	mov	r0, r2
 800fffa:	f7fe fb08 	bl	800e60e <vListInsert>
}
 800fffe:	e010      	b.n	8010022 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010000:	4b0f      	ldr	r3, [pc, #60]	@ (8010040 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	4b0a      	ldr	r3, [pc, #40]	@ (8010030 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	3304      	adds	r3, #4
 801000a:	4619      	mov	r1, r3
 801000c:	4610      	mov	r0, r2
 801000e:	f7fe fafe 	bl	800e60e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010012:	4b0c      	ldr	r3, [pc, #48]	@ (8010044 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	429a      	cmp	r2, r3
 801001a:	d202      	bcs.n	8010022 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801001c:	4a09      	ldr	r2, [pc, #36]	@ (8010044 <prvAddCurrentTaskToDelayedList+0xc8>)
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	6013      	str	r3, [r2, #0]
}
 8010022:	bf00      	nop
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	200008d4 	.word	0x200008d4
 8010030:	200007d0 	.word	0x200007d0
 8010034:	200008d8 	.word	0x200008d8
 8010038:	200008bc 	.word	0x200008bc
 801003c:	2000088c 	.word	0x2000088c
 8010040:	20000888 	.word	0x20000888
 8010044:	200008f0 	.word	0x200008f0

08010048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010048:	b480      	push	{r7}
 801004a:	b085      	sub	sp, #20
 801004c:	af00      	add	r7, sp, #0
 801004e:	60f8      	str	r0, [r7, #12]
 8010050:	60b9      	str	r1, [r7, #8]
 8010052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	3b04      	subs	r3, #4
 8010058:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	3b04      	subs	r3, #4
 8010066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	f023 0201 	bic.w	r2, r3, #1
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	3b04      	subs	r3, #4
 8010076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010078:	4a0c      	ldr	r2, [pc, #48]	@ (80100ac <pxPortInitialiseStack+0x64>)
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	3b14      	subs	r3, #20
 8010082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	3b04      	subs	r3, #4
 801008e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f06f 0202 	mvn.w	r2, #2
 8010096:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	3b20      	subs	r3, #32
 801009c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801009e:	68fb      	ldr	r3, [r7, #12]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3714      	adds	r7, #20
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr
 80100ac:	080100b1 	.word	0x080100b1

080100b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80100b0:	b480      	push	{r7}
 80100b2:	b085      	sub	sp, #20
 80100b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80100b6:	2300      	movs	r3, #0
 80100b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80100ba:	4b13      	ldr	r3, [pc, #76]	@ (8010108 <prvTaskExitError+0x58>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100c2:	d00b      	beq.n	80100dc <prvTaskExitError+0x2c>
	__asm volatile
 80100c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c8:	f383 8811 	msr	BASEPRI, r3
 80100cc:	f3bf 8f6f 	isb	sy
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	60fb      	str	r3, [r7, #12]
}
 80100d6:	bf00      	nop
 80100d8:	bf00      	nop
 80100da:	e7fd      	b.n	80100d8 <prvTaskExitError+0x28>
	__asm volatile
 80100dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100e0:	f383 8811 	msr	BASEPRI, r3
 80100e4:	f3bf 8f6f 	isb	sy
 80100e8:	f3bf 8f4f 	dsb	sy
 80100ec:	60bb      	str	r3, [r7, #8]
}
 80100ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100f0:	bf00      	nop
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d0fc      	beq.n	80100f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100f8:	bf00      	nop
 80100fa:	bf00      	nop
 80100fc:	3714      	adds	r7, #20
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	2000002c 	.word	0x2000002c
 801010c:	00000000 	.word	0x00000000

08010110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010110:	4b07      	ldr	r3, [pc, #28]	@ (8010130 <pxCurrentTCBConst2>)
 8010112:	6819      	ldr	r1, [r3, #0]
 8010114:	6808      	ldr	r0, [r1, #0]
 8010116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011a:	f380 8809 	msr	PSP, r0
 801011e:	f3bf 8f6f 	isb	sy
 8010122:	f04f 0000 	mov.w	r0, #0
 8010126:	f380 8811 	msr	BASEPRI, r0
 801012a:	4770      	bx	lr
 801012c:	f3af 8000 	nop.w

08010130 <pxCurrentTCBConst2>:
 8010130:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop

08010138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010138:	4808      	ldr	r0, [pc, #32]	@ (801015c <prvPortStartFirstTask+0x24>)
 801013a:	6800      	ldr	r0, [r0, #0]
 801013c:	6800      	ldr	r0, [r0, #0]
 801013e:	f380 8808 	msr	MSP, r0
 8010142:	f04f 0000 	mov.w	r0, #0
 8010146:	f380 8814 	msr	CONTROL, r0
 801014a:	b662      	cpsie	i
 801014c:	b661      	cpsie	f
 801014e:	f3bf 8f4f 	dsb	sy
 8010152:	f3bf 8f6f 	isb	sy
 8010156:	df00      	svc	0
 8010158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801015a:	bf00      	nop
 801015c:	e000ed08 	.word	0xe000ed08

08010160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b086      	sub	sp, #24
 8010164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010166:	4b47      	ldr	r3, [pc, #284]	@ (8010284 <xPortStartScheduler+0x124>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4a47      	ldr	r2, [pc, #284]	@ (8010288 <xPortStartScheduler+0x128>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d10b      	bne.n	8010188 <xPortStartScheduler+0x28>
	__asm volatile
 8010170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010174:	f383 8811 	msr	BASEPRI, r3
 8010178:	f3bf 8f6f 	isb	sy
 801017c:	f3bf 8f4f 	dsb	sy
 8010180:	60fb      	str	r3, [r7, #12]
}
 8010182:	bf00      	nop
 8010184:	bf00      	nop
 8010186:	e7fd      	b.n	8010184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010188:	4b3e      	ldr	r3, [pc, #248]	@ (8010284 <xPortStartScheduler+0x124>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a3f      	ldr	r2, [pc, #252]	@ (801028c <xPortStartScheduler+0x12c>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d10b      	bne.n	80101aa <xPortStartScheduler+0x4a>
	__asm volatile
 8010192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010196:	f383 8811 	msr	BASEPRI, r3
 801019a:	f3bf 8f6f 	isb	sy
 801019e:	f3bf 8f4f 	dsb	sy
 80101a2:	613b      	str	r3, [r7, #16]
}
 80101a4:	bf00      	nop
 80101a6:	bf00      	nop
 80101a8:	e7fd      	b.n	80101a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80101aa:	4b39      	ldr	r3, [pc, #228]	@ (8010290 <xPortStartScheduler+0x130>)
 80101ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	22ff      	movs	r2, #255	@ 0xff
 80101ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80101c4:	78fb      	ldrb	r3, [r7, #3]
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80101cc:	b2da      	uxtb	r2, r3
 80101ce:	4b31      	ldr	r3, [pc, #196]	@ (8010294 <xPortStartScheduler+0x134>)
 80101d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101d2:	4b31      	ldr	r3, [pc, #196]	@ (8010298 <xPortStartScheduler+0x138>)
 80101d4:	2207      	movs	r2, #7
 80101d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101d8:	e009      	b.n	80101ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80101da:	4b2f      	ldr	r3, [pc, #188]	@ (8010298 <xPortStartScheduler+0x138>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	3b01      	subs	r3, #1
 80101e0:	4a2d      	ldr	r2, [pc, #180]	@ (8010298 <xPortStartScheduler+0x138>)
 80101e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101e4:	78fb      	ldrb	r3, [r7, #3]
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101ee:	78fb      	ldrb	r3, [r7, #3]
 80101f0:	b2db      	uxtb	r3, r3
 80101f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101f6:	2b80      	cmp	r3, #128	@ 0x80
 80101f8:	d0ef      	beq.n	80101da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101fa:	4b27      	ldr	r3, [pc, #156]	@ (8010298 <xPortStartScheduler+0x138>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f1c3 0307 	rsb	r3, r3, #7
 8010202:	2b04      	cmp	r3, #4
 8010204:	d00b      	beq.n	801021e <xPortStartScheduler+0xbe>
	__asm volatile
 8010206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801020a:	f383 8811 	msr	BASEPRI, r3
 801020e:	f3bf 8f6f 	isb	sy
 8010212:	f3bf 8f4f 	dsb	sy
 8010216:	60bb      	str	r3, [r7, #8]
}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	e7fd      	b.n	801021a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801021e:	4b1e      	ldr	r3, [pc, #120]	@ (8010298 <xPortStartScheduler+0x138>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	021b      	lsls	r3, r3, #8
 8010224:	4a1c      	ldr	r2, [pc, #112]	@ (8010298 <xPortStartScheduler+0x138>)
 8010226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010228:	4b1b      	ldr	r3, [pc, #108]	@ (8010298 <xPortStartScheduler+0x138>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010230:	4a19      	ldr	r2, [pc, #100]	@ (8010298 <xPortStartScheduler+0x138>)
 8010232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	b2da      	uxtb	r2, r3
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801023c:	4b17      	ldr	r3, [pc, #92]	@ (801029c <xPortStartScheduler+0x13c>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a16      	ldr	r2, [pc, #88]	@ (801029c <xPortStartScheduler+0x13c>)
 8010242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010248:	4b14      	ldr	r3, [pc, #80]	@ (801029c <xPortStartScheduler+0x13c>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a13      	ldr	r2, [pc, #76]	@ (801029c <xPortStartScheduler+0x13c>)
 801024e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010254:	f000 f8da 	bl	801040c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010258:	4b11      	ldr	r3, [pc, #68]	@ (80102a0 <xPortStartScheduler+0x140>)
 801025a:	2200      	movs	r2, #0
 801025c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801025e:	f000 f8f9 	bl	8010454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010262:	4b10      	ldr	r3, [pc, #64]	@ (80102a4 <xPortStartScheduler+0x144>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4a0f      	ldr	r2, [pc, #60]	@ (80102a4 <xPortStartScheduler+0x144>)
 8010268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801026c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801026e:	f7ff ff63 	bl	8010138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010272:	f7ff fb67 	bl	800f944 <vTaskSwitchContext>
	prvTaskExitError();
 8010276:	f7ff ff1b 	bl	80100b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801027a:	2300      	movs	r3, #0
}
 801027c:	4618      	mov	r0, r3
 801027e:	3718      	adds	r7, #24
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	e000ed00 	.word	0xe000ed00
 8010288:	410fc271 	.word	0x410fc271
 801028c:	410fc270 	.word	0x410fc270
 8010290:	e000e400 	.word	0xe000e400
 8010294:	200008fc 	.word	0x200008fc
 8010298:	20000900 	.word	0x20000900
 801029c:	e000ed20 	.word	0xe000ed20
 80102a0:	2000002c 	.word	0x2000002c
 80102a4:	e000ef34 	.word	0xe000ef34

080102a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	607b      	str	r3, [r7, #4]
}
 80102c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80102c2:	4b10      	ldr	r3, [pc, #64]	@ (8010304 <vPortEnterCritical+0x5c>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	3301      	adds	r3, #1
 80102c8:	4a0e      	ldr	r2, [pc, #56]	@ (8010304 <vPortEnterCritical+0x5c>)
 80102ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80102cc:	4b0d      	ldr	r3, [pc, #52]	@ (8010304 <vPortEnterCritical+0x5c>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d110      	bne.n	80102f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80102d4:	4b0c      	ldr	r3, [pc, #48]	@ (8010308 <vPortEnterCritical+0x60>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d00b      	beq.n	80102f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80102de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e2:	f383 8811 	msr	BASEPRI, r3
 80102e6:	f3bf 8f6f 	isb	sy
 80102ea:	f3bf 8f4f 	dsb	sy
 80102ee:	603b      	str	r3, [r7, #0]
}
 80102f0:	bf00      	nop
 80102f2:	bf00      	nop
 80102f4:	e7fd      	b.n	80102f2 <vPortEnterCritical+0x4a>
	}
}
 80102f6:	bf00      	nop
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	2000002c 	.word	0x2000002c
 8010308:	e000ed04 	.word	0xe000ed04

0801030c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801030c:	b480      	push	{r7}
 801030e:	b083      	sub	sp, #12
 8010310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010312:	4b12      	ldr	r3, [pc, #72]	@ (801035c <vPortExitCritical+0x50>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d10b      	bne.n	8010332 <vPortExitCritical+0x26>
	__asm volatile
 801031a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801031e:	f383 8811 	msr	BASEPRI, r3
 8010322:	f3bf 8f6f 	isb	sy
 8010326:	f3bf 8f4f 	dsb	sy
 801032a:	607b      	str	r3, [r7, #4]
}
 801032c:	bf00      	nop
 801032e:	bf00      	nop
 8010330:	e7fd      	b.n	801032e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010332:	4b0a      	ldr	r3, [pc, #40]	@ (801035c <vPortExitCritical+0x50>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	3b01      	subs	r3, #1
 8010338:	4a08      	ldr	r2, [pc, #32]	@ (801035c <vPortExitCritical+0x50>)
 801033a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801033c:	4b07      	ldr	r3, [pc, #28]	@ (801035c <vPortExitCritical+0x50>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d105      	bne.n	8010350 <vPortExitCritical+0x44>
 8010344:	2300      	movs	r3, #0
 8010346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	f383 8811 	msr	BASEPRI, r3
}
 801034e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010350:	bf00      	nop
 8010352:	370c      	adds	r7, #12
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr
 801035c:	2000002c 	.word	0x2000002c

08010360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010360:	f3ef 8009 	mrs	r0, PSP
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	4b15      	ldr	r3, [pc, #84]	@ (80103c0 <pxCurrentTCBConst>)
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	f01e 0f10 	tst.w	lr, #16
 8010370:	bf08      	it	eq
 8010372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801037a:	6010      	str	r0, [r2, #0]
 801037c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010384:	f380 8811 	msr	BASEPRI, r0
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	f7ff fad8 	bl	800f944 <vTaskSwitchContext>
 8010394:	f04f 0000 	mov.w	r0, #0
 8010398:	f380 8811 	msr	BASEPRI, r0
 801039c:	bc09      	pop	{r0, r3}
 801039e:	6819      	ldr	r1, [r3, #0]
 80103a0:	6808      	ldr	r0, [r1, #0]
 80103a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a6:	f01e 0f10 	tst.w	lr, #16
 80103aa:	bf08      	it	eq
 80103ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80103b0:	f380 8809 	msr	PSP, r0
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop
 80103bc:	f3af 8000 	nop.w

080103c0 <pxCurrentTCBConst>:
 80103c0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80103c4:	bf00      	nop
 80103c6:	bf00      	nop

080103c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
	__asm volatile
 80103ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d2:	f383 8811 	msr	BASEPRI, r3
 80103d6:	f3bf 8f6f 	isb	sy
 80103da:	f3bf 8f4f 	dsb	sy
 80103de:	607b      	str	r3, [r7, #4]
}
 80103e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103e2:	f7ff f9f5 	bl	800f7d0 <xTaskIncrementTick>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d003      	beq.n	80103f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103ec:	4b06      	ldr	r3, [pc, #24]	@ (8010408 <SysTick_Handler+0x40>)
 80103ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103f2:	601a      	str	r2, [r3, #0]
 80103f4:	2300      	movs	r3, #0
 80103f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	f383 8811 	msr	BASEPRI, r3
}
 80103fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010400:	bf00      	nop
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	e000ed04 	.word	0xe000ed04

0801040c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801040c:	b480      	push	{r7}
 801040e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010410:	4b0b      	ldr	r3, [pc, #44]	@ (8010440 <vPortSetupTimerInterrupt+0x34>)
 8010412:	2200      	movs	r2, #0
 8010414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010416:	4b0b      	ldr	r3, [pc, #44]	@ (8010444 <vPortSetupTimerInterrupt+0x38>)
 8010418:	2200      	movs	r2, #0
 801041a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801041c:	4b0a      	ldr	r3, [pc, #40]	@ (8010448 <vPortSetupTimerInterrupt+0x3c>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a0a      	ldr	r2, [pc, #40]	@ (801044c <vPortSetupTimerInterrupt+0x40>)
 8010422:	fba2 2303 	umull	r2, r3, r2, r3
 8010426:	099b      	lsrs	r3, r3, #6
 8010428:	4a09      	ldr	r2, [pc, #36]	@ (8010450 <vPortSetupTimerInterrupt+0x44>)
 801042a:	3b01      	subs	r3, #1
 801042c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801042e:	4b04      	ldr	r3, [pc, #16]	@ (8010440 <vPortSetupTimerInterrupt+0x34>)
 8010430:	2207      	movs	r2, #7
 8010432:	601a      	str	r2, [r3, #0]
}
 8010434:	bf00      	nop
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr
 801043e:	bf00      	nop
 8010440:	e000e010 	.word	0xe000e010
 8010444:	e000e018 	.word	0xe000e018
 8010448:	20000000 	.word	0x20000000
 801044c:	10624dd3 	.word	0x10624dd3
 8010450:	e000e014 	.word	0xe000e014

08010454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010464 <vPortEnableVFP+0x10>
 8010458:	6801      	ldr	r1, [r0, #0]
 801045a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801045e:	6001      	str	r1, [r0, #0]
 8010460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010462:	bf00      	nop
 8010464:	e000ed88 	.word	0xe000ed88

08010468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010468:	b480      	push	{r7}
 801046a:	b085      	sub	sp, #20
 801046c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801046e:	f3ef 8305 	mrs	r3, IPSR
 8010472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2b0f      	cmp	r3, #15
 8010478:	d915      	bls.n	80104a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801047a:	4a18      	ldr	r2, [pc, #96]	@ (80104dc <vPortValidateInterruptPriority+0x74>)
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	4413      	add	r3, r2
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010484:	4b16      	ldr	r3, [pc, #88]	@ (80104e0 <vPortValidateInterruptPriority+0x78>)
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	7afa      	ldrb	r2, [r7, #11]
 801048a:	429a      	cmp	r2, r3
 801048c:	d20b      	bcs.n	80104a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801048e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010492:	f383 8811 	msr	BASEPRI, r3
 8010496:	f3bf 8f6f 	isb	sy
 801049a:	f3bf 8f4f 	dsb	sy
 801049e:	607b      	str	r3, [r7, #4]
}
 80104a0:	bf00      	nop
 80104a2:	bf00      	nop
 80104a4:	e7fd      	b.n	80104a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80104a6:	4b0f      	ldr	r3, [pc, #60]	@ (80104e4 <vPortValidateInterruptPriority+0x7c>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80104ae:	4b0e      	ldr	r3, [pc, #56]	@ (80104e8 <vPortValidateInterruptPriority+0x80>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d90b      	bls.n	80104ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80104b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104ba:	f383 8811 	msr	BASEPRI, r3
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	f3bf 8f4f 	dsb	sy
 80104c6:	603b      	str	r3, [r7, #0]
}
 80104c8:	bf00      	nop
 80104ca:	bf00      	nop
 80104cc:	e7fd      	b.n	80104ca <vPortValidateInterruptPriority+0x62>
	}
 80104ce:	bf00      	nop
 80104d0:	3714      	adds	r7, #20
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr
 80104da:	bf00      	nop
 80104dc:	e000e3f0 	.word	0xe000e3f0
 80104e0:	200008fc 	.word	0x200008fc
 80104e4:	e000ed0c 	.word	0xe000ed0c
 80104e8:	20000900 	.word	0x20000900

080104ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b08a      	sub	sp, #40	@ 0x28
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80104f4:	2300      	movs	r3, #0
 80104f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80104f8:	f7ff f89c 	bl	800f634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80104fc:	4b5f      	ldr	r3, [pc, #380]	@ (801067c <pvPortMalloc+0x190>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d101      	bne.n	8010508 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010504:	f000 f92a 	bl	801075c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010508:	4b5d      	ldr	r3, [pc, #372]	@ (8010680 <pvPortMalloc+0x194>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	4013      	ands	r3, r2
 8010510:	2b00      	cmp	r3, #0
 8010512:	f040 8095 	bne.w	8010640 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d01e      	beq.n	801055a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801051c:	2208      	movs	r2, #8
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4413      	add	r3, r2
 8010522:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f003 0307 	and.w	r3, r3, #7
 801052a:	2b00      	cmp	r3, #0
 801052c:	d015      	beq.n	801055a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f023 0307 	bic.w	r3, r3, #7
 8010534:	3308      	adds	r3, #8
 8010536:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f003 0307 	and.w	r3, r3, #7
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00b      	beq.n	801055a <pvPortMalloc+0x6e>
	__asm volatile
 8010542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010546:	f383 8811 	msr	BASEPRI, r3
 801054a:	f3bf 8f6f 	isb	sy
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	617b      	str	r3, [r7, #20]
}
 8010554:	bf00      	nop
 8010556:	bf00      	nop
 8010558:	e7fd      	b.n	8010556 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d06f      	beq.n	8010640 <pvPortMalloc+0x154>
 8010560:	4b48      	ldr	r3, [pc, #288]	@ (8010684 <pvPortMalloc+0x198>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	429a      	cmp	r2, r3
 8010568:	d86a      	bhi.n	8010640 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801056a:	4b47      	ldr	r3, [pc, #284]	@ (8010688 <pvPortMalloc+0x19c>)
 801056c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801056e:	4b46      	ldr	r3, [pc, #280]	@ (8010688 <pvPortMalloc+0x19c>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010574:	e004      	b.n	8010580 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	429a      	cmp	r2, r3
 8010588:	d903      	bls.n	8010592 <pvPortMalloc+0xa6>
 801058a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1f1      	bne.n	8010576 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010592:	4b3a      	ldr	r3, [pc, #232]	@ (801067c <pvPortMalloc+0x190>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010598:	429a      	cmp	r2, r3
 801059a:	d051      	beq.n	8010640 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801059c:	6a3b      	ldr	r3, [r7, #32]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2208      	movs	r2, #8
 80105a2:	4413      	add	r3, r2
 80105a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80105a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	6a3b      	ldr	r3, [r7, #32]
 80105ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80105ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b0:	685a      	ldr	r2, [r3, #4]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	1ad2      	subs	r2, r2, r3
 80105b6:	2308      	movs	r3, #8
 80105b8:	005b      	lsls	r3, r3, #1
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d920      	bls.n	8010600 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80105be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4413      	add	r3, r2
 80105c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	f003 0307 	and.w	r3, r3, #7
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00b      	beq.n	80105e8 <pvPortMalloc+0xfc>
	__asm volatile
 80105d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105d4:	f383 8811 	msr	BASEPRI, r3
 80105d8:	f3bf 8f6f 	isb	sy
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	613b      	str	r3, [r7, #16]
}
 80105e2:	bf00      	nop
 80105e4:	bf00      	nop
 80105e6:	e7fd      	b.n	80105e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80105e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ea:	685a      	ldr	r2, [r3, #4]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	1ad2      	subs	r2, r2, r3
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80105f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80105fa:	69b8      	ldr	r0, [r7, #24]
 80105fc:	f000 f910 	bl	8010820 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010600:	4b20      	ldr	r3, [pc, #128]	@ (8010684 <pvPortMalloc+0x198>)
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	4a1e      	ldr	r2, [pc, #120]	@ (8010684 <pvPortMalloc+0x198>)
 801060c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801060e:	4b1d      	ldr	r3, [pc, #116]	@ (8010684 <pvPortMalloc+0x198>)
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	4b1e      	ldr	r3, [pc, #120]	@ (801068c <pvPortMalloc+0x1a0>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	429a      	cmp	r2, r3
 8010618:	d203      	bcs.n	8010622 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801061a:	4b1a      	ldr	r3, [pc, #104]	@ (8010684 <pvPortMalloc+0x198>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	4a1b      	ldr	r2, [pc, #108]	@ (801068c <pvPortMalloc+0x1a0>)
 8010620:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010624:	685a      	ldr	r2, [r3, #4]
 8010626:	4b16      	ldr	r3, [pc, #88]	@ (8010680 <pvPortMalloc+0x194>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	431a      	orrs	r2, r3
 801062c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801062e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010632:	2200      	movs	r2, #0
 8010634:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010636:	4b16      	ldr	r3, [pc, #88]	@ (8010690 <pvPortMalloc+0x1a4>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	3301      	adds	r3, #1
 801063c:	4a14      	ldr	r2, [pc, #80]	@ (8010690 <pvPortMalloc+0x1a4>)
 801063e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010640:	f7ff f806 	bl	800f650 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010644:	69fb      	ldr	r3, [r7, #28]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d101      	bne.n	801064e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801064a:	f7ef ff81 	bl	8000550 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	f003 0307 	and.w	r3, r3, #7
 8010654:	2b00      	cmp	r3, #0
 8010656:	d00b      	beq.n	8010670 <pvPortMalloc+0x184>
	__asm volatile
 8010658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801065c:	f383 8811 	msr	BASEPRI, r3
 8010660:	f3bf 8f6f 	isb	sy
 8010664:	f3bf 8f4f 	dsb	sy
 8010668:	60fb      	str	r3, [r7, #12]
}
 801066a:	bf00      	nop
 801066c:	bf00      	nop
 801066e:	e7fd      	b.n	801066c <pvPortMalloc+0x180>
	return pvReturn;
 8010670:	69fb      	ldr	r3, [r7, #28]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3728      	adds	r7, #40	@ 0x28
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	2000890c 	.word	0x2000890c
 8010680:	20008920 	.word	0x20008920
 8010684:	20008910 	.word	0x20008910
 8010688:	20008904 	.word	0x20008904
 801068c:	20008914 	.word	0x20008914
 8010690:	20008918 	.word	0x20008918

08010694 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b086      	sub	sp, #24
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d04f      	beq.n	8010746 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80106a6:	2308      	movs	r3, #8
 80106a8:	425b      	negs	r3, r3
 80106aa:	697a      	ldr	r2, [r7, #20]
 80106ac:	4413      	add	r3, r2
 80106ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	685a      	ldr	r2, [r3, #4]
 80106b8:	4b25      	ldr	r3, [pc, #148]	@ (8010750 <vPortFree+0xbc>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4013      	ands	r3, r2
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d10b      	bne.n	80106da <vPortFree+0x46>
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c6:	f383 8811 	msr	BASEPRI, r3
 80106ca:	f3bf 8f6f 	isb	sy
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	60fb      	str	r3, [r7, #12]
}
 80106d4:	bf00      	nop
 80106d6:	bf00      	nop
 80106d8:	e7fd      	b.n	80106d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d00b      	beq.n	80106fa <vPortFree+0x66>
	__asm volatile
 80106e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106e6:	f383 8811 	msr	BASEPRI, r3
 80106ea:	f3bf 8f6f 	isb	sy
 80106ee:	f3bf 8f4f 	dsb	sy
 80106f2:	60bb      	str	r3, [r7, #8]
}
 80106f4:	bf00      	nop
 80106f6:	bf00      	nop
 80106f8:	e7fd      	b.n	80106f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	685a      	ldr	r2, [r3, #4]
 80106fe:	4b14      	ldr	r3, [pc, #80]	@ (8010750 <vPortFree+0xbc>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4013      	ands	r3, r2
 8010704:	2b00      	cmp	r3, #0
 8010706:	d01e      	beq.n	8010746 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d11a      	bne.n	8010746 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	685a      	ldr	r2, [r3, #4]
 8010714:	4b0e      	ldr	r3, [pc, #56]	@ (8010750 <vPortFree+0xbc>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	43db      	mvns	r3, r3
 801071a:	401a      	ands	r2, r3
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010720:	f7fe ff88 	bl	800f634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	685a      	ldr	r2, [r3, #4]
 8010728:	4b0a      	ldr	r3, [pc, #40]	@ (8010754 <vPortFree+0xc0>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4413      	add	r3, r2
 801072e:	4a09      	ldr	r2, [pc, #36]	@ (8010754 <vPortFree+0xc0>)
 8010730:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010732:	6938      	ldr	r0, [r7, #16]
 8010734:	f000 f874 	bl	8010820 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010738:	4b07      	ldr	r3, [pc, #28]	@ (8010758 <vPortFree+0xc4>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	3301      	adds	r3, #1
 801073e:	4a06      	ldr	r2, [pc, #24]	@ (8010758 <vPortFree+0xc4>)
 8010740:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010742:	f7fe ff85 	bl	800f650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010746:	bf00      	nop
 8010748:	3718      	adds	r7, #24
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	20008920 	.word	0x20008920
 8010754:	20008910 	.word	0x20008910
 8010758:	2000891c 	.word	0x2000891c

0801075c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801075c:	b480      	push	{r7}
 801075e:	b085      	sub	sp, #20
 8010760:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010766:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010768:	4b27      	ldr	r3, [pc, #156]	@ (8010808 <prvHeapInit+0xac>)
 801076a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f003 0307 	and.w	r3, r3, #7
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00c      	beq.n	8010790 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	3307      	adds	r3, #7
 801077a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f023 0307 	bic.w	r3, r3, #7
 8010782:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010784:	68ba      	ldr	r2, [r7, #8]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	1ad3      	subs	r3, r2, r3
 801078a:	4a1f      	ldr	r2, [pc, #124]	@ (8010808 <prvHeapInit+0xac>)
 801078c:	4413      	add	r3, r2
 801078e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010794:	4a1d      	ldr	r2, [pc, #116]	@ (801080c <prvHeapInit+0xb0>)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801079a:	4b1c      	ldr	r3, [pc, #112]	@ (801080c <prvHeapInit+0xb0>)
 801079c:	2200      	movs	r2, #0
 801079e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	68ba      	ldr	r2, [r7, #8]
 80107a4:	4413      	add	r3, r2
 80107a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80107a8:	2208      	movs	r2, #8
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	1a9b      	subs	r3, r3, r2
 80107ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	f023 0307 	bic.w	r3, r3, #7
 80107b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	4a15      	ldr	r2, [pc, #84]	@ (8010810 <prvHeapInit+0xb4>)
 80107bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80107be:	4b14      	ldr	r3, [pc, #80]	@ (8010810 <prvHeapInit+0xb4>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2200      	movs	r2, #0
 80107c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107c6:	4b12      	ldr	r3, [pc, #72]	@ (8010810 <prvHeapInit+0xb4>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	2200      	movs	r2, #0
 80107cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	68fa      	ldr	r2, [r7, #12]
 80107d6:	1ad2      	subs	r2, r2, r3
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80107dc:	4b0c      	ldr	r3, [pc, #48]	@ (8010810 <prvHeapInit+0xb4>)
 80107de:	681a      	ldr	r2, [r3, #0]
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	4a0a      	ldr	r2, [pc, #40]	@ (8010814 <prvHeapInit+0xb8>)
 80107ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	4a09      	ldr	r2, [pc, #36]	@ (8010818 <prvHeapInit+0xbc>)
 80107f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80107f4:	4b09      	ldr	r3, [pc, #36]	@ (801081c <prvHeapInit+0xc0>)
 80107f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80107fa:	601a      	str	r2, [r3, #0]
}
 80107fc:	bf00      	nop
 80107fe:	3714      	adds	r7, #20
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr
 8010808:	20000904 	.word	0x20000904
 801080c:	20008904 	.word	0x20008904
 8010810:	2000890c 	.word	0x2000890c
 8010814:	20008914 	.word	0x20008914
 8010818:	20008910 	.word	0x20008910
 801081c:	20008920 	.word	0x20008920

08010820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010820:	b480      	push	{r7}
 8010822:	b085      	sub	sp, #20
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010828:	4b28      	ldr	r3, [pc, #160]	@ (80108cc <prvInsertBlockIntoFreeList+0xac>)
 801082a:	60fb      	str	r3, [r7, #12]
 801082c:	e002      	b.n	8010834 <prvInsertBlockIntoFreeList+0x14>
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	60fb      	str	r3, [r7, #12]
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	429a      	cmp	r2, r3
 801083c:	d8f7      	bhi.n	801082e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	68ba      	ldr	r2, [r7, #8]
 8010848:	4413      	add	r3, r2
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	429a      	cmp	r2, r3
 801084e:	d108      	bne.n	8010862 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	685a      	ldr	r2, [r3, #4]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	441a      	add	r2, r3
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	68ba      	ldr	r2, [r7, #8]
 801086c:	441a      	add	r2, r3
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	429a      	cmp	r2, r3
 8010874:	d118      	bne.n	80108a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	4b15      	ldr	r3, [pc, #84]	@ (80108d0 <prvInsertBlockIntoFreeList+0xb0>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	429a      	cmp	r2, r3
 8010880:	d00d      	beq.n	801089e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	685a      	ldr	r2, [r3, #4]
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	441a      	add	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	601a      	str	r2, [r3, #0]
 801089c:	e008      	b.n	80108b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801089e:	4b0c      	ldr	r3, [pc, #48]	@ (80108d0 <prvInsertBlockIntoFreeList+0xb0>)
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	601a      	str	r2, [r3, #0]
 80108a6:	e003      	b.n	80108b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80108b0:	68fa      	ldr	r2, [r7, #12]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d002      	beq.n	80108be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	687a      	ldr	r2, [r7, #4]
 80108bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108be:	bf00      	nop
 80108c0:	3714      	adds	r7, #20
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	20008904 	.word	0x20008904
 80108d0:	2000890c 	.word	0x2000890c

080108d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80108d8:	2201      	movs	r2, #1
 80108da:	490e      	ldr	r1, [pc, #56]	@ (8010914 <MX_USB_HOST_Init+0x40>)
 80108dc:	480e      	ldr	r0, [pc, #56]	@ (8010918 <MX_USB_HOST_Init+0x44>)
 80108de:	f7fb fd49 	bl	800c374 <USBH_Init>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d001      	beq.n	80108ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80108e8:	f7f0 fd08 	bl	80012fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80108ec:	490b      	ldr	r1, [pc, #44]	@ (801091c <MX_USB_HOST_Init+0x48>)
 80108ee:	480a      	ldr	r0, [pc, #40]	@ (8010918 <MX_USB_HOST_Init+0x44>)
 80108f0:	f7fb fe15 	bl	800c51e <USBH_RegisterClass>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d001      	beq.n	80108fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80108fa:	f7f0 fcff 	bl	80012fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80108fe:	4806      	ldr	r0, [pc, #24]	@ (8010918 <MX_USB_HOST_Init+0x44>)
 8010900:	f7fb fe99 	bl	800c636 <USBH_Start>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801090a:	f7f0 fcf7 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801090e:	bf00      	nop
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	08010921 	.word	0x08010921
 8010918:	20008924 	.word	0x20008924
 801091c:	2000000c 	.word	0x2000000c

08010920 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	460b      	mov	r3, r1
 801092a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801092c:	78fb      	ldrb	r3, [r7, #3]
 801092e:	3b01      	subs	r3, #1
 8010930:	2b04      	cmp	r3, #4
 8010932:	d819      	bhi.n	8010968 <USBH_UserProcess+0x48>
 8010934:	a201      	add	r2, pc, #4	@ (adr r2, 801093c <USBH_UserProcess+0x1c>)
 8010936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093a:	bf00      	nop
 801093c:	08010969 	.word	0x08010969
 8010940:	08010959 	.word	0x08010959
 8010944:	08010969 	.word	0x08010969
 8010948:	08010961 	.word	0x08010961
 801094c:	08010951 	.word	0x08010951
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010950:	4b09      	ldr	r3, [pc, #36]	@ (8010978 <USBH_UserProcess+0x58>)
 8010952:	2203      	movs	r2, #3
 8010954:	701a      	strb	r2, [r3, #0]
  break;
 8010956:	e008      	b.n	801096a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010958:	4b07      	ldr	r3, [pc, #28]	@ (8010978 <USBH_UserProcess+0x58>)
 801095a:	2202      	movs	r2, #2
 801095c:	701a      	strb	r2, [r3, #0]
  break;
 801095e:	e004      	b.n	801096a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010960:	4b05      	ldr	r3, [pc, #20]	@ (8010978 <USBH_UserProcess+0x58>)
 8010962:	2201      	movs	r2, #1
 8010964:	701a      	strb	r2, [r3, #0]
  break;
 8010966:	e000      	b.n	801096a <USBH_UserProcess+0x4a>

  default:
  break;
 8010968:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801096a:	bf00      	nop
 801096c:	370c      	adds	r7, #12
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr
 8010976:	bf00      	nop
 8010978:	20008d08 	.word	0x20008d08

0801097c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b08a      	sub	sp, #40	@ 0x28
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010984:	f107 0314 	add.w	r3, r7, #20
 8010988:	2200      	movs	r2, #0
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	605a      	str	r2, [r3, #4]
 801098e:	609a      	str	r2, [r3, #8]
 8010990:	60da      	str	r2, [r3, #12]
 8010992:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801099c:	d147      	bne.n	8010a2e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801099e:	2300      	movs	r3, #0
 80109a0:	613b      	str	r3, [r7, #16]
 80109a2:	4b25      	ldr	r3, [pc, #148]	@ (8010a38 <HAL_HCD_MspInit+0xbc>)
 80109a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109a6:	4a24      	ldr	r2, [pc, #144]	@ (8010a38 <HAL_HCD_MspInit+0xbc>)
 80109a8:	f043 0301 	orr.w	r3, r3, #1
 80109ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80109ae:	4b22      	ldr	r3, [pc, #136]	@ (8010a38 <HAL_HCD_MspInit+0xbc>)
 80109b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109b2:	f003 0301 	and.w	r3, r3, #1
 80109b6:	613b      	str	r3, [r7, #16]
 80109b8:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 80109ba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80109be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109c0:	2302      	movs	r3, #2
 80109c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109c4:	2300      	movs	r3, #0
 80109c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109c8:	2303      	movs	r3, #3
 80109ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80109cc:	230a      	movs	r3, #10
 80109ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109d0:	f107 0314 	add.w	r3, r7, #20
 80109d4:	4619      	mov	r1, r3
 80109d6:	4819      	ldr	r0, [pc, #100]	@ (8010a3c <HAL_HCD_MspInit+0xc0>)
 80109d8:	f7f2 fbbc 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 80109dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80109e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109e2:	2302      	movs	r3, #2
 80109e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109e6:	2300      	movs	r3, #0
 80109e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 80109ea:	f107 0314 	add.w	r3, r7, #20
 80109ee:	4619      	mov	r1, r3
 80109f0:	4812      	ldr	r0, [pc, #72]	@ (8010a3c <HAL_HCD_MspInit+0xc0>)
 80109f2:	f7f2 fbaf 	bl	8003154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80109f6:	4b10      	ldr	r3, [pc, #64]	@ (8010a38 <HAL_HCD_MspInit+0xbc>)
 80109f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109fa:	4a0f      	ldr	r2, [pc, #60]	@ (8010a38 <HAL_HCD_MspInit+0xbc>)
 80109fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a00:	6353      	str	r3, [r2, #52]	@ 0x34
 8010a02:	2300      	movs	r3, #0
 8010a04:	60fb      	str	r3, [r7, #12]
 8010a06:	4b0c      	ldr	r3, [pc, #48]	@ (8010a38 <HAL_HCD_MspInit+0xbc>)
 8010a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8010a38 <HAL_HCD_MspInit+0xbc>)
 8010a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8010a12:	4b09      	ldr	r3, [pc, #36]	@ (8010a38 <HAL_HCD_MspInit+0xbc>)
 8010a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010a1a:	60fb      	str	r3, [r7, #12]
 8010a1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010a1e:	2200      	movs	r2, #0
 8010a20:	2105      	movs	r1, #5
 8010a22:	2043      	movs	r0, #67	@ 0x43
 8010a24:	f7f1 faca 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010a28:	2043      	movs	r0, #67	@ 0x43
 8010a2a:	f7f1 fae3 	bl	8001ff4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010a2e:	bf00      	nop
 8010a30:	3728      	adds	r7, #40	@ 0x28
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	40023800 	.word	0x40023800
 8010a3c:	40020000 	.word	0x40020000

08010a40 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fc faa3 	bl	800cf9a <USBH_LL_IncTimer>
}
 8010a54:	bf00      	nop
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fc fae7 	bl	800d03e <USBH_LL_Connect>
}
 8010a70:	bf00      	nop
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fc fafc 	bl	800d084 <USBH_LL_Disconnect>
}
 8010a8c:	bf00      	nop
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	70fb      	strb	r3, [r7, #3]
 8010aa0:	4613      	mov	r3, r2
 8010aa2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7fc fb31 	bl	800d112 <USBH_LL_NotifyURBChange>
#endif
}
 8010ab0:	bf00      	nop
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7fc fa91 	bl	800cfee <USBH_LL_PortEnabled>
}
 8010acc:	bf00      	nop
 8010ace:	3708      	adds	r7, #8
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fc fa9d 	bl	800d022 <USBH_LL_PortDisabled>
}
 8010ae8:	bf00      	nop
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d12a      	bne.n	8010b58 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010b02:	4a18      	ldr	r2, [pc, #96]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4a15      	ldr	r2, [pc, #84]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b0e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010b12:	4b14      	ldr	r3, [pc, #80]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8010b18:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010b1a:	4b12      	ldr	r3, [pc, #72]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b1c:	2208      	movs	r2, #8
 8010b1e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010b20:	4b10      	ldr	r3, [pc, #64]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b22:	2201      	movs	r2, #1
 8010b24:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010b26:	4b0f      	ldr	r3, [pc, #60]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b2e:	2202      	movs	r2, #2
 8010b30:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010b32:	4b0c      	ldr	r3, [pc, #48]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010b38:	480a      	ldr	r0, [pc, #40]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b3a:	f7f2 fd02 	bl	8003542 <HAL_HCD_Init>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d001      	beq.n	8010b48 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010b44:	f7f0 fbda 	bl	80012fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010b48:	4806      	ldr	r0, [pc, #24]	@ (8010b64 <USBH_LL_Init+0x74>)
 8010b4a:	f7f3 f963 	bl	8003e14 <HAL_HCD_GetCurrentFrame>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	4619      	mov	r1, r3
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7fc fa12 	bl	800cf7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010b58:	2300      	movs	r3, #0
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	20008d0c 	.word	0x20008d0c

08010b68 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b70:	2300      	movs	r3, #0
 8010b72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b74:	2300      	movs	r3, #0
 8010b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7f3 f8d0 	bl	8003d24 <HAL_HCD_Start>
 8010b84:	4603      	mov	r3, r0
 8010b86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b88:	7bfb      	ldrb	r3, [r7, #15]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f000 f95e 	bl	8010e4c <USBH_Get_USB_Status>
 8010b90:	4603      	mov	r3, r0
 8010b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b084      	sub	sp, #16
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010baa:	2300      	movs	r3, #0
 8010bac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7f3 f8d8 	bl	8003d6a <HAL_HCD_Stop>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010bbe:	7bfb      	ldrb	r3, [r7, #15]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f000 f943 	bl	8010e4c <USBH_Get_USB_Status>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3710      	adds	r7, #16
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010bdc:	2301      	movs	r3, #1
 8010bde:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7f3 f922 	bl	8003e30 <HAL_HCD_GetCurrentSpeed>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b02      	cmp	r3, #2
 8010bf0:	d00c      	beq.n	8010c0c <USBH_LL_GetSpeed+0x38>
 8010bf2:	2b02      	cmp	r3, #2
 8010bf4:	d80d      	bhi.n	8010c12 <USBH_LL_GetSpeed+0x3e>
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d002      	beq.n	8010c00 <USBH_LL_GetSpeed+0x2c>
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d003      	beq.n	8010c06 <USBH_LL_GetSpeed+0x32>
 8010bfe:	e008      	b.n	8010c12 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010c00:	2300      	movs	r3, #0
 8010c02:	73fb      	strb	r3, [r7, #15]
    break;
 8010c04:	e008      	b.n	8010c18 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010c06:	2301      	movs	r3, #1
 8010c08:	73fb      	strb	r3, [r7, #15]
    break;
 8010c0a:	e005      	b.n	8010c18 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010c0c:	2302      	movs	r3, #2
 8010c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c10:	e002      	b.n	8010c18 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010c12:	2301      	movs	r3, #1
 8010c14:	73fb      	strb	r3, [r7, #15]
    break;
 8010c16:	bf00      	nop
  }
  return  speed;
 8010c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b084      	sub	sp, #16
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7f3 f8b3 	bl	8003da4 <HAL_HCD_ResetPort>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c42:	7bfb      	ldrb	r3, [r7, #15]
 8010c44:	4618      	mov	r0, r3
 8010c46:	f000 f901 	bl	8010e4c <USBH_Get_USB_Status>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c6a:	78fa      	ldrb	r2, [r7, #3]
 8010c6c:	4611      	mov	r1, r2
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7f3 f8bb 	bl	8003dea <HAL_HCD_HC_GetXferCount>
 8010c74:	4603      	mov	r3, r0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3708      	adds	r7, #8
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}

08010c7e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010c7e:	b590      	push	{r4, r7, lr}
 8010c80:	b089      	sub	sp, #36	@ 0x24
 8010c82:	af04      	add	r7, sp, #16
 8010c84:	6078      	str	r0, [r7, #4]
 8010c86:	4608      	mov	r0, r1
 8010c88:	4611      	mov	r1, r2
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	70fb      	strb	r3, [r7, #3]
 8010c90:	460b      	mov	r3, r1
 8010c92:	70bb      	strb	r3, [r7, #2]
 8010c94:	4613      	mov	r3, r2
 8010c96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010ca6:	787c      	ldrb	r4, [r7, #1]
 8010ca8:	78ba      	ldrb	r2, [r7, #2]
 8010caa:	78f9      	ldrb	r1, [r7, #3]
 8010cac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010cae:	9302      	str	r3, [sp, #8]
 8010cb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010cb4:	9301      	str	r3, [sp, #4]
 8010cb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	4623      	mov	r3, r4
 8010cbe:	f7f2 fca7 	bl	8003610 <HAL_HCD_HC_Init>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010cc6:	7bfb      	ldrb	r3, [r7, #15]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f000 f8bf 	bl	8010e4c <USBH_Get_USB_Status>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3714      	adds	r7, #20
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd90      	pop	{r4, r7, pc}

08010cdc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cec:	2300      	movs	r3, #0
 8010cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010cf6:	78fa      	ldrb	r2, [r7, #3]
 8010cf8:	4611      	mov	r1, r2
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f2 fd40 	bl	8003780 <HAL_HCD_HC_Halt>
 8010d00:	4603      	mov	r3, r0
 8010d02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010d04:	7bfb      	ldrb	r3, [r7, #15]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f000 f8a0 	bl	8010e4c <USBH_Get_USB_Status>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3710      	adds	r7, #16
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}

08010d1a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010d1a:	b590      	push	{r4, r7, lr}
 8010d1c:	b089      	sub	sp, #36	@ 0x24
 8010d1e:	af04      	add	r7, sp, #16
 8010d20:	6078      	str	r0, [r7, #4]
 8010d22:	4608      	mov	r0, r1
 8010d24:	4611      	mov	r1, r2
 8010d26:	461a      	mov	r2, r3
 8010d28:	4603      	mov	r3, r0
 8010d2a:	70fb      	strb	r3, [r7, #3]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	70bb      	strb	r3, [r7, #2]
 8010d30:	4613      	mov	r3, r2
 8010d32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d34:	2300      	movs	r3, #0
 8010d36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010d42:	787c      	ldrb	r4, [r7, #1]
 8010d44:	78ba      	ldrb	r2, [r7, #2]
 8010d46:	78f9      	ldrb	r1, [r7, #3]
 8010d48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010d4c:	9303      	str	r3, [sp, #12]
 8010d4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010d50:	9302      	str	r3, [sp, #8]
 8010d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	4623      	mov	r3, r4
 8010d5e:	f7f2 fd33 	bl	80037c8 <HAL_HCD_HC_SubmitRequest>
 8010d62:	4603      	mov	r3, r0
 8010d64:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010d66:	7bfb      	ldrb	r3, [r7, #15]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f000 f86f 	bl	8010e4c <USBH_Get_USB_Status>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d72:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3714      	adds	r7, #20
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd90      	pop	{r4, r7, pc}

08010d7c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
 8010d84:	460b      	mov	r3, r1
 8010d86:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010d8e:	78fa      	ldrb	r2, [r7, #3]
 8010d90:	4611      	mov	r1, r2
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7f3 f814 	bl	8003dc0 <HAL_HCD_HC_GetURBState>
 8010d98:	4603      	mov	r3, r0
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3708      	adds	r7, #8
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b082      	sub	sp, #8
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	6078      	str	r0, [r7, #4]
 8010daa:	460b      	mov	r3, r1
 8010dac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d103      	bne.n	8010dc0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010db8:	78fb      	ldrb	r3, [r7, #3]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f000 f872 	bl	8010ea4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010dc0:	20c8      	movs	r0, #200	@ 0xc8
 8010dc2:	f7f1 f81f 	bl	8001e04 <HAL_Delay>
  return USBH_OK;
 8010dc6:	2300      	movs	r3, #0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b085      	sub	sp, #20
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	460b      	mov	r3, r1
 8010dda:	70fb      	strb	r3, [r7, #3]
 8010ddc:	4613      	mov	r3, r2
 8010dde:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010de6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010de8:	78fa      	ldrb	r2, [r7, #3]
 8010dea:	68f9      	ldr	r1, [r7, #12]
 8010dec:	4613      	mov	r3, r2
 8010dee:	011b      	lsls	r3, r3, #4
 8010df0:	1a9b      	subs	r3, r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	440b      	add	r3, r1
 8010df6:	3317      	adds	r3, #23
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00a      	beq.n	8010e14 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010dfe:	78fa      	ldrb	r2, [r7, #3]
 8010e00:	68f9      	ldr	r1, [r7, #12]
 8010e02:	4613      	mov	r3, r2
 8010e04:	011b      	lsls	r3, r3, #4
 8010e06:	1a9b      	subs	r3, r3, r2
 8010e08:	009b      	lsls	r3, r3, #2
 8010e0a:	440b      	add	r3, r1
 8010e0c:	333c      	adds	r3, #60	@ 0x3c
 8010e0e:	78ba      	ldrb	r2, [r7, #2]
 8010e10:	701a      	strb	r2, [r3, #0]
 8010e12:	e009      	b.n	8010e28 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010e14:	78fa      	ldrb	r2, [r7, #3]
 8010e16:	68f9      	ldr	r1, [r7, #12]
 8010e18:	4613      	mov	r3, r2
 8010e1a:	011b      	lsls	r3, r3, #4
 8010e1c:	1a9b      	subs	r3, r3, r2
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	440b      	add	r3, r1
 8010e22:	333d      	adds	r3, #61	@ 0x3d
 8010e24:	78ba      	ldrb	r2, [r7, #2]
 8010e26:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010e28:	2300      	movs	r3, #0
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3714      	adds	r7, #20
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr

08010e36 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b082      	sub	sp, #8
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f7f0 ffe0 	bl	8001e04 <HAL_Delay>
}
 8010e44:	bf00      	nop
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b085      	sub	sp, #20
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	4603      	mov	r3, r0
 8010e54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e56:	2300      	movs	r3, #0
 8010e58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e5a:	79fb      	ldrb	r3, [r7, #7]
 8010e5c:	2b03      	cmp	r3, #3
 8010e5e:	d817      	bhi.n	8010e90 <USBH_Get_USB_Status+0x44>
 8010e60:	a201      	add	r2, pc, #4	@ (adr r2, 8010e68 <USBH_Get_USB_Status+0x1c>)
 8010e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e66:	bf00      	nop
 8010e68:	08010e79 	.word	0x08010e79
 8010e6c:	08010e7f 	.word	0x08010e7f
 8010e70:	08010e85 	.word	0x08010e85
 8010e74:	08010e8b 	.word	0x08010e8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e7c:	e00b      	b.n	8010e96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010e7e:	2302      	movs	r3, #2
 8010e80:	73fb      	strb	r3, [r7, #15]
    break;
 8010e82:	e008      	b.n	8010e96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010e84:	2301      	movs	r3, #1
 8010e86:	73fb      	strb	r3, [r7, #15]
    break;
 8010e88:	e005      	b.n	8010e96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010e8a:	2302      	movs	r3, #2
 8010e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8010e8e:	e002      	b.n	8010e96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010e90:	2302      	movs	r3, #2
 8010e92:	73fb      	strb	r3, [r7, #15]
    break;
 8010e94:	bf00      	nop
  }
  return usb_status;
 8010e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3714      	adds	r7, #20
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	4603      	mov	r3, r0
 8010eac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010eae:	79fb      	ldrb	r3, [r7, #7]
 8010eb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010eb2:	79fb      	ldrb	r3, [r7, #7]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d102      	bne.n	8010ebe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	73fb      	strb	r3, [r7, #15]
 8010ebc:	e001      	b.n	8010ec2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 8010ec2:	7bfb      	ldrb	r3, [r7, #15]
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	2104      	movs	r1, #4
 8010ec8:	4803      	ldr	r0, [pc, #12]	@ (8010ed8 <MX_DriverVbusFS+0x34>)
 8010eca:	f7f2 fb07 	bl	80034dc <HAL_GPIO_WritePin>
}
 8010ece:	bf00      	nop
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	40020400 	.word	0x40020400

08010edc <malloc>:
 8010edc:	4b02      	ldr	r3, [pc, #8]	@ (8010ee8 <malloc+0xc>)
 8010ede:	4601      	mov	r1, r0
 8010ee0:	6818      	ldr	r0, [r3, #0]
 8010ee2:	f000 b82d 	b.w	8010f40 <_malloc_r>
 8010ee6:	bf00      	nop
 8010ee8:	20000030 	.word	0x20000030

08010eec <free>:
 8010eec:	4b02      	ldr	r3, [pc, #8]	@ (8010ef8 <free+0xc>)
 8010eee:	4601      	mov	r1, r0
 8010ef0:	6818      	ldr	r0, [r3, #0]
 8010ef2:	f000 b961 	b.w	80111b8 <_free_r>
 8010ef6:	bf00      	nop
 8010ef8:	20000030 	.word	0x20000030

08010efc <sbrk_aligned>:
 8010efc:	b570      	push	{r4, r5, r6, lr}
 8010efe:	4e0f      	ldr	r6, [pc, #60]	@ (8010f3c <sbrk_aligned+0x40>)
 8010f00:	460c      	mov	r4, r1
 8010f02:	6831      	ldr	r1, [r6, #0]
 8010f04:	4605      	mov	r5, r0
 8010f06:	b911      	cbnz	r1, 8010f0e <sbrk_aligned+0x12>
 8010f08:	f000 f90c 	bl	8011124 <_sbrk_r>
 8010f0c:	6030      	str	r0, [r6, #0]
 8010f0e:	4621      	mov	r1, r4
 8010f10:	4628      	mov	r0, r5
 8010f12:	f000 f907 	bl	8011124 <_sbrk_r>
 8010f16:	1c43      	adds	r3, r0, #1
 8010f18:	d103      	bne.n	8010f22 <sbrk_aligned+0x26>
 8010f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8010f1e:	4620      	mov	r0, r4
 8010f20:	bd70      	pop	{r4, r5, r6, pc}
 8010f22:	1cc4      	adds	r4, r0, #3
 8010f24:	f024 0403 	bic.w	r4, r4, #3
 8010f28:	42a0      	cmp	r0, r4
 8010f2a:	d0f8      	beq.n	8010f1e <sbrk_aligned+0x22>
 8010f2c:	1a21      	subs	r1, r4, r0
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f000 f8f8 	bl	8011124 <_sbrk_r>
 8010f34:	3001      	adds	r0, #1
 8010f36:	d1f2      	bne.n	8010f1e <sbrk_aligned+0x22>
 8010f38:	e7ef      	b.n	8010f1a <sbrk_aligned+0x1e>
 8010f3a:	bf00      	nop
 8010f3c:	200090ec 	.word	0x200090ec

08010f40 <_malloc_r>:
 8010f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f44:	1ccd      	adds	r5, r1, #3
 8010f46:	f025 0503 	bic.w	r5, r5, #3
 8010f4a:	3508      	adds	r5, #8
 8010f4c:	2d0c      	cmp	r5, #12
 8010f4e:	bf38      	it	cc
 8010f50:	250c      	movcc	r5, #12
 8010f52:	2d00      	cmp	r5, #0
 8010f54:	4606      	mov	r6, r0
 8010f56:	db01      	blt.n	8010f5c <_malloc_r+0x1c>
 8010f58:	42a9      	cmp	r1, r5
 8010f5a:	d904      	bls.n	8010f66 <_malloc_r+0x26>
 8010f5c:	230c      	movs	r3, #12
 8010f5e:	6033      	str	r3, [r6, #0]
 8010f60:	2000      	movs	r0, #0
 8010f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801103c <_malloc_r+0xfc>
 8010f6a:	f000 f869 	bl	8011040 <__malloc_lock>
 8010f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8010f72:	461c      	mov	r4, r3
 8010f74:	bb44      	cbnz	r4, 8010fc8 <_malloc_r+0x88>
 8010f76:	4629      	mov	r1, r5
 8010f78:	4630      	mov	r0, r6
 8010f7a:	f7ff ffbf 	bl	8010efc <sbrk_aligned>
 8010f7e:	1c43      	adds	r3, r0, #1
 8010f80:	4604      	mov	r4, r0
 8010f82:	d158      	bne.n	8011036 <_malloc_r+0xf6>
 8010f84:	f8d8 4000 	ldr.w	r4, [r8]
 8010f88:	4627      	mov	r7, r4
 8010f8a:	2f00      	cmp	r7, #0
 8010f8c:	d143      	bne.n	8011016 <_malloc_r+0xd6>
 8010f8e:	2c00      	cmp	r4, #0
 8010f90:	d04b      	beq.n	801102a <_malloc_r+0xea>
 8010f92:	6823      	ldr	r3, [r4, #0]
 8010f94:	4639      	mov	r1, r7
 8010f96:	4630      	mov	r0, r6
 8010f98:	eb04 0903 	add.w	r9, r4, r3
 8010f9c:	f000 f8c2 	bl	8011124 <_sbrk_r>
 8010fa0:	4581      	cmp	r9, r0
 8010fa2:	d142      	bne.n	801102a <_malloc_r+0xea>
 8010fa4:	6821      	ldr	r1, [r4, #0]
 8010fa6:	1a6d      	subs	r5, r5, r1
 8010fa8:	4629      	mov	r1, r5
 8010faa:	4630      	mov	r0, r6
 8010fac:	f7ff ffa6 	bl	8010efc <sbrk_aligned>
 8010fb0:	3001      	adds	r0, #1
 8010fb2:	d03a      	beq.n	801102a <_malloc_r+0xea>
 8010fb4:	6823      	ldr	r3, [r4, #0]
 8010fb6:	442b      	add	r3, r5
 8010fb8:	6023      	str	r3, [r4, #0]
 8010fba:	f8d8 3000 	ldr.w	r3, [r8]
 8010fbe:	685a      	ldr	r2, [r3, #4]
 8010fc0:	bb62      	cbnz	r2, 801101c <_malloc_r+0xdc>
 8010fc2:	f8c8 7000 	str.w	r7, [r8]
 8010fc6:	e00f      	b.n	8010fe8 <_malloc_r+0xa8>
 8010fc8:	6822      	ldr	r2, [r4, #0]
 8010fca:	1b52      	subs	r2, r2, r5
 8010fcc:	d420      	bmi.n	8011010 <_malloc_r+0xd0>
 8010fce:	2a0b      	cmp	r2, #11
 8010fd0:	d917      	bls.n	8011002 <_malloc_r+0xc2>
 8010fd2:	1961      	adds	r1, r4, r5
 8010fd4:	42a3      	cmp	r3, r4
 8010fd6:	6025      	str	r5, [r4, #0]
 8010fd8:	bf18      	it	ne
 8010fda:	6059      	strne	r1, [r3, #4]
 8010fdc:	6863      	ldr	r3, [r4, #4]
 8010fde:	bf08      	it	eq
 8010fe0:	f8c8 1000 	streq.w	r1, [r8]
 8010fe4:	5162      	str	r2, [r4, r5]
 8010fe6:	604b      	str	r3, [r1, #4]
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f000 f82f 	bl	801104c <__malloc_unlock>
 8010fee:	f104 000b 	add.w	r0, r4, #11
 8010ff2:	1d23      	adds	r3, r4, #4
 8010ff4:	f020 0007 	bic.w	r0, r0, #7
 8010ff8:	1ac2      	subs	r2, r0, r3
 8010ffa:	bf1c      	itt	ne
 8010ffc:	1a1b      	subne	r3, r3, r0
 8010ffe:	50a3      	strne	r3, [r4, r2]
 8011000:	e7af      	b.n	8010f62 <_malloc_r+0x22>
 8011002:	6862      	ldr	r2, [r4, #4]
 8011004:	42a3      	cmp	r3, r4
 8011006:	bf0c      	ite	eq
 8011008:	f8c8 2000 	streq.w	r2, [r8]
 801100c:	605a      	strne	r2, [r3, #4]
 801100e:	e7eb      	b.n	8010fe8 <_malloc_r+0xa8>
 8011010:	4623      	mov	r3, r4
 8011012:	6864      	ldr	r4, [r4, #4]
 8011014:	e7ae      	b.n	8010f74 <_malloc_r+0x34>
 8011016:	463c      	mov	r4, r7
 8011018:	687f      	ldr	r7, [r7, #4]
 801101a:	e7b6      	b.n	8010f8a <_malloc_r+0x4a>
 801101c:	461a      	mov	r2, r3
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	42a3      	cmp	r3, r4
 8011022:	d1fb      	bne.n	801101c <_malloc_r+0xdc>
 8011024:	2300      	movs	r3, #0
 8011026:	6053      	str	r3, [r2, #4]
 8011028:	e7de      	b.n	8010fe8 <_malloc_r+0xa8>
 801102a:	230c      	movs	r3, #12
 801102c:	6033      	str	r3, [r6, #0]
 801102e:	4630      	mov	r0, r6
 8011030:	f000 f80c 	bl	801104c <__malloc_unlock>
 8011034:	e794      	b.n	8010f60 <_malloc_r+0x20>
 8011036:	6005      	str	r5, [r0, #0]
 8011038:	e7d6      	b.n	8010fe8 <_malloc_r+0xa8>
 801103a:	bf00      	nop
 801103c:	200090f0 	.word	0x200090f0

08011040 <__malloc_lock>:
 8011040:	4801      	ldr	r0, [pc, #4]	@ (8011048 <__malloc_lock+0x8>)
 8011042:	f000 b8a9 	b.w	8011198 <__retarget_lock_acquire_recursive>
 8011046:	bf00      	nop
 8011048:	20009230 	.word	0x20009230

0801104c <__malloc_unlock>:
 801104c:	4801      	ldr	r0, [pc, #4]	@ (8011054 <__malloc_unlock+0x8>)
 801104e:	f000 b8a4 	b.w	801119a <__retarget_lock_release_recursive>
 8011052:	bf00      	nop
 8011054:	20009230 	.word	0x20009230

08011058 <memset>:
 8011058:	4402      	add	r2, r0
 801105a:	4603      	mov	r3, r0
 801105c:	4293      	cmp	r3, r2
 801105e:	d100      	bne.n	8011062 <memset+0xa>
 8011060:	4770      	bx	lr
 8011062:	f803 1b01 	strb.w	r1, [r3], #1
 8011066:	e7f9      	b.n	801105c <memset+0x4>

08011068 <_reclaim_reent>:
 8011068:	4b2d      	ldr	r3, [pc, #180]	@ (8011120 <_reclaim_reent+0xb8>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	4283      	cmp	r3, r0
 801106e:	b570      	push	{r4, r5, r6, lr}
 8011070:	4604      	mov	r4, r0
 8011072:	d053      	beq.n	801111c <_reclaim_reent+0xb4>
 8011074:	69c3      	ldr	r3, [r0, #28]
 8011076:	b31b      	cbz	r3, 80110c0 <_reclaim_reent+0x58>
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	b163      	cbz	r3, 8011096 <_reclaim_reent+0x2e>
 801107c:	2500      	movs	r5, #0
 801107e:	69e3      	ldr	r3, [r4, #28]
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	5959      	ldr	r1, [r3, r5]
 8011084:	b9b1      	cbnz	r1, 80110b4 <_reclaim_reent+0x4c>
 8011086:	3504      	adds	r5, #4
 8011088:	2d80      	cmp	r5, #128	@ 0x80
 801108a:	d1f8      	bne.n	801107e <_reclaim_reent+0x16>
 801108c:	69e3      	ldr	r3, [r4, #28]
 801108e:	4620      	mov	r0, r4
 8011090:	68d9      	ldr	r1, [r3, #12]
 8011092:	f000 f891 	bl	80111b8 <_free_r>
 8011096:	69e3      	ldr	r3, [r4, #28]
 8011098:	6819      	ldr	r1, [r3, #0]
 801109a:	b111      	cbz	r1, 80110a2 <_reclaim_reent+0x3a>
 801109c:	4620      	mov	r0, r4
 801109e:	f000 f88b 	bl	80111b8 <_free_r>
 80110a2:	69e3      	ldr	r3, [r4, #28]
 80110a4:	689d      	ldr	r5, [r3, #8]
 80110a6:	b15d      	cbz	r5, 80110c0 <_reclaim_reent+0x58>
 80110a8:	4629      	mov	r1, r5
 80110aa:	4620      	mov	r0, r4
 80110ac:	682d      	ldr	r5, [r5, #0]
 80110ae:	f000 f883 	bl	80111b8 <_free_r>
 80110b2:	e7f8      	b.n	80110a6 <_reclaim_reent+0x3e>
 80110b4:	680e      	ldr	r6, [r1, #0]
 80110b6:	4620      	mov	r0, r4
 80110b8:	f000 f87e 	bl	80111b8 <_free_r>
 80110bc:	4631      	mov	r1, r6
 80110be:	e7e1      	b.n	8011084 <_reclaim_reent+0x1c>
 80110c0:	6961      	ldr	r1, [r4, #20]
 80110c2:	b111      	cbz	r1, 80110ca <_reclaim_reent+0x62>
 80110c4:	4620      	mov	r0, r4
 80110c6:	f000 f877 	bl	80111b8 <_free_r>
 80110ca:	69e1      	ldr	r1, [r4, #28]
 80110cc:	b111      	cbz	r1, 80110d4 <_reclaim_reent+0x6c>
 80110ce:	4620      	mov	r0, r4
 80110d0:	f000 f872 	bl	80111b8 <_free_r>
 80110d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80110d6:	b111      	cbz	r1, 80110de <_reclaim_reent+0x76>
 80110d8:	4620      	mov	r0, r4
 80110da:	f000 f86d 	bl	80111b8 <_free_r>
 80110de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110e0:	b111      	cbz	r1, 80110e8 <_reclaim_reent+0x80>
 80110e2:	4620      	mov	r0, r4
 80110e4:	f000 f868 	bl	80111b8 <_free_r>
 80110e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80110ea:	b111      	cbz	r1, 80110f2 <_reclaim_reent+0x8a>
 80110ec:	4620      	mov	r0, r4
 80110ee:	f000 f863 	bl	80111b8 <_free_r>
 80110f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80110f4:	b111      	cbz	r1, 80110fc <_reclaim_reent+0x94>
 80110f6:	4620      	mov	r0, r4
 80110f8:	f000 f85e 	bl	80111b8 <_free_r>
 80110fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80110fe:	b111      	cbz	r1, 8011106 <_reclaim_reent+0x9e>
 8011100:	4620      	mov	r0, r4
 8011102:	f000 f859 	bl	80111b8 <_free_r>
 8011106:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011108:	b111      	cbz	r1, 8011110 <_reclaim_reent+0xa8>
 801110a:	4620      	mov	r0, r4
 801110c:	f000 f854 	bl	80111b8 <_free_r>
 8011110:	6a23      	ldr	r3, [r4, #32]
 8011112:	b11b      	cbz	r3, 801111c <_reclaim_reent+0xb4>
 8011114:	4620      	mov	r0, r4
 8011116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801111a:	4718      	bx	r3
 801111c:	bd70      	pop	{r4, r5, r6, pc}
 801111e:	bf00      	nop
 8011120:	20000030 	.word	0x20000030

08011124 <_sbrk_r>:
 8011124:	b538      	push	{r3, r4, r5, lr}
 8011126:	4d06      	ldr	r5, [pc, #24]	@ (8011140 <_sbrk_r+0x1c>)
 8011128:	2300      	movs	r3, #0
 801112a:	4604      	mov	r4, r0
 801112c:	4608      	mov	r0, r1
 801112e:	602b      	str	r3, [r5, #0]
 8011130:	f7f0 fdb4 	bl	8001c9c <_sbrk>
 8011134:	1c43      	adds	r3, r0, #1
 8011136:	d102      	bne.n	801113e <_sbrk_r+0x1a>
 8011138:	682b      	ldr	r3, [r5, #0]
 801113a:	b103      	cbz	r3, 801113e <_sbrk_r+0x1a>
 801113c:	6023      	str	r3, [r4, #0]
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	2000922c 	.word	0x2000922c

08011144 <__errno>:
 8011144:	4b01      	ldr	r3, [pc, #4]	@ (801114c <__errno+0x8>)
 8011146:	6818      	ldr	r0, [r3, #0]
 8011148:	4770      	bx	lr
 801114a:	bf00      	nop
 801114c:	20000030 	.word	0x20000030

08011150 <__libc_init_array>:
 8011150:	b570      	push	{r4, r5, r6, lr}
 8011152:	4d0d      	ldr	r5, [pc, #52]	@ (8011188 <__libc_init_array+0x38>)
 8011154:	4c0d      	ldr	r4, [pc, #52]	@ (801118c <__libc_init_array+0x3c>)
 8011156:	1b64      	subs	r4, r4, r5
 8011158:	10a4      	asrs	r4, r4, #2
 801115a:	2600      	movs	r6, #0
 801115c:	42a6      	cmp	r6, r4
 801115e:	d109      	bne.n	8011174 <__libc_init_array+0x24>
 8011160:	4d0b      	ldr	r5, [pc, #44]	@ (8011190 <__libc_init_array+0x40>)
 8011162:	4c0c      	ldr	r4, [pc, #48]	@ (8011194 <__libc_init_array+0x44>)
 8011164:	f000 f872 	bl	801124c <_init>
 8011168:	1b64      	subs	r4, r4, r5
 801116a:	10a4      	asrs	r4, r4, #2
 801116c:	2600      	movs	r6, #0
 801116e:	42a6      	cmp	r6, r4
 8011170:	d105      	bne.n	801117e <__libc_init_array+0x2e>
 8011172:	bd70      	pop	{r4, r5, r6, pc}
 8011174:	f855 3b04 	ldr.w	r3, [r5], #4
 8011178:	4798      	blx	r3
 801117a:	3601      	adds	r6, #1
 801117c:	e7ee      	b.n	801115c <__libc_init_array+0xc>
 801117e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011182:	4798      	blx	r3
 8011184:	3601      	adds	r6, #1
 8011186:	e7f2      	b.n	801116e <__libc_init_array+0x1e>
 8011188:	08011360 	.word	0x08011360
 801118c:	08011360 	.word	0x08011360
 8011190:	08011360 	.word	0x08011360
 8011194:	08011364 	.word	0x08011364

08011198 <__retarget_lock_acquire_recursive>:
 8011198:	4770      	bx	lr

0801119a <__retarget_lock_release_recursive>:
 801119a:	4770      	bx	lr

0801119c <memcpy>:
 801119c:	440a      	add	r2, r1
 801119e:	4291      	cmp	r1, r2
 80111a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80111a4:	d100      	bne.n	80111a8 <memcpy+0xc>
 80111a6:	4770      	bx	lr
 80111a8:	b510      	push	{r4, lr}
 80111aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111b2:	4291      	cmp	r1, r2
 80111b4:	d1f9      	bne.n	80111aa <memcpy+0xe>
 80111b6:	bd10      	pop	{r4, pc}

080111b8 <_free_r>:
 80111b8:	b538      	push	{r3, r4, r5, lr}
 80111ba:	4605      	mov	r5, r0
 80111bc:	2900      	cmp	r1, #0
 80111be:	d041      	beq.n	8011244 <_free_r+0x8c>
 80111c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111c4:	1f0c      	subs	r4, r1, #4
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	bfb8      	it	lt
 80111ca:	18e4      	addlt	r4, r4, r3
 80111cc:	f7ff ff38 	bl	8011040 <__malloc_lock>
 80111d0:	4a1d      	ldr	r2, [pc, #116]	@ (8011248 <_free_r+0x90>)
 80111d2:	6813      	ldr	r3, [r2, #0]
 80111d4:	b933      	cbnz	r3, 80111e4 <_free_r+0x2c>
 80111d6:	6063      	str	r3, [r4, #4]
 80111d8:	6014      	str	r4, [r2, #0]
 80111da:	4628      	mov	r0, r5
 80111dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111e0:	f7ff bf34 	b.w	801104c <__malloc_unlock>
 80111e4:	42a3      	cmp	r3, r4
 80111e6:	d908      	bls.n	80111fa <_free_r+0x42>
 80111e8:	6820      	ldr	r0, [r4, #0]
 80111ea:	1821      	adds	r1, r4, r0
 80111ec:	428b      	cmp	r3, r1
 80111ee:	bf01      	itttt	eq
 80111f0:	6819      	ldreq	r1, [r3, #0]
 80111f2:	685b      	ldreq	r3, [r3, #4]
 80111f4:	1809      	addeq	r1, r1, r0
 80111f6:	6021      	streq	r1, [r4, #0]
 80111f8:	e7ed      	b.n	80111d6 <_free_r+0x1e>
 80111fa:	461a      	mov	r2, r3
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	b10b      	cbz	r3, 8011204 <_free_r+0x4c>
 8011200:	42a3      	cmp	r3, r4
 8011202:	d9fa      	bls.n	80111fa <_free_r+0x42>
 8011204:	6811      	ldr	r1, [r2, #0]
 8011206:	1850      	adds	r0, r2, r1
 8011208:	42a0      	cmp	r0, r4
 801120a:	d10b      	bne.n	8011224 <_free_r+0x6c>
 801120c:	6820      	ldr	r0, [r4, #0]
 801120e:	4401      	add	r1, r0
 8011210:	1850      	adds	r0, r2, r1
 8011212:	4283      	cmp	r3, r0
 8011214:	6011      	str	r1, [r2, #0]
 8011216:	d1e0      	bne.n	80111da <_free_r+0x22>
 8011218:	6818      	ldr	r0, [r3, #0]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	6053      	str	r3, [r2, #4]
 801121e:	4408      	add	r0, r1
 8011220:	6010      	str	r0, [r2, #0]
 8011222:	e7da      	b.n	80111da <_free_r+0x22>
 8011224:	d902      	bls.n	801122c <_free_r+0x74>
 8011226:	230c      	movs	r3, #12
 8011228:	602b      	str	r3, [r5, #0]
 801122a:	e7d6      	b.n	80111da <_free_r+0x22>
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	1821      	adds	r1, r4, r0
 8011230:	428b      	cmp	r3, r1
 8011232:	bf04      	itt	eq
 8011234:	6819      	ldreq	r1, [r3, #0]
 8011236:	685b      	ldreq	r3, [r3, #4]
 8011238:	6063      	str	r3, [r4, #4]
 801123a:	bf04      	itt	eq
 801123c:	1809      	addeq	r1, r1, r0
 801123e:	6021      	streq	r1, [r4, #0]
 8011240:	6054      	str	r4, [r2, #4]
 8011242:	e7ca      	b.n	80111da <_free_r+0x22>
 8011244:	bd38      	pop	{r3, r4, r5, pc}
 8011246:	bf00      	nop
 8011248:	200090f0 	.word	0x200090f0

0801124c <_init>:
 801124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124e:	bf00      	nop
 8011250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011252:	bc08      	pop	{r3}
 8011254:	469e      	mov	lr, r3
 8011256:	4770      	bx	lr

08011258 <_fini>:
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	bf00      	nop
 801125c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801125e:	bc08      	pop	{r3}
 8011260:	469e      	mov	lr, r3
 8011262:	4770      	bx	lr
